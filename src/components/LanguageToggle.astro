---
export interface Translation {
  id: string;
  title: string;
  language: string[];
  path: string;
}

export interface Props {
  translations: Translation[];
  currentLanguage: string;
  currentPath: string;
}

const { translations, currentLanguage, currentPath } = Astro.props;

// Filter out current post and sort by language
const otherTranslations = translations
  .filter(t => t.path !== currentPath)
  .sort((a, b) => {
    // Sort English first, then alphabetically
    if (a.language[0] === 'en') return -1;
    if (b.language[0] === 'en') return 1;
    return a.language[0].localeCompare(b.language[0]);
  });

// Language display names
const languageNames: Record<string, string> = {
  'en': 'English',
  'es': 'Espa√±ol'
};

// Language flags
const languageFlags: Record<string, string> = {
  'en': 'üá∫üá∏',
  'es': 'üá™üá∏'
};
---

{otherTranslations.length > 0 && (
  <div class="language-toggle">
    <span class="language-label">Also available in:</span>
    {otherTranslations.map(translation => (
      <a 
        href={translation.path}
        class="language-link"
        title={`Read in ${languageNames[translation.language[0]]}`}
      >
        {languageFlags[translation.language[0]]} {languageNames[translation.language[0]]}
      </a>
    ))}
  </div>
)}

<style>
  .language-toggle {
    @apply flex items-center gap-3 mb-8 text-sm text-[rgb(var(--color-text-muted))];
  }

  .language-label {
    @apply font-medium;
  }

  .language-link {
    @apply text-[rgb(var(--color-accent))] hover:text-[rgb(var(--color-accent-hover))] font-medium no-underline transition-colors duration-200;
  }

  .language-link:hover {
    @apply underline;
  }
</style>