---
interface Props {
	/**
	 * The date to format
	 */
	date: Date;
	
	/**
	 * The format to use
	 */
	format?: 'short' | 'long' | 'relative';
	
	/**
	 * Additional classes to apply
	 */
	class?: string;
}

const { date, format = 'long', class: className = '' } = Astro.props;

const formatter = new Intl.DateTimeFormat('en-US', {
	year: 'numeric',
	month: format === 'short' ? 'short' : 'long',
	day: 'numeric'
});

const relativeTimeFormatter = new Intl.RelativeTimeFormat('en-US', {
	numeric: 'auto'
});

function getRelativeTime(date: Date): string {
	const now = new Date();
	const diff = date.getTime() - now.getTime();
	const days = Math.round(diff / (1000 * 60 * 60 * 24));
	
	if (days === 0) return 'today';
	if (days === -1) return 'yesterday';
	if (days === 1) return 'tomorrow';
	
	return relativeTimeFormatter.format(days, 'day');
}
---

<time
	datetime={date.toISOString()}
	class:list={[
		'text-neutral-600 dark:text-neutral-400',
		className
	]}
>
	{format === 'relative' ? getRelativeTime(date) : formatter.format(date)}
</time>

<style>
	/* Smooth transitions for dark mode */
	time {
		transition: color 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		time {
			transition: none !important;
		}
	}
</style>
