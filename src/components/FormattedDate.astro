---
interface Props {
	date: Date;
	format?: 'short' | 'long' | 'relative';
}

const { date, format = 'long' } = Astro.props;

const formatDate = (date: Date, format: string) => {
	switch (format) {
		case 'short':
			return date.toLocaleDateString('en-US', {
				year: 'numeric',
				month: 'short',
				day: 'numeric'
			});
		case 'long':
			return date.toLocaleDateString('en-US', {
				year: 'numeric',
				month: 'long',
				day: 'numeric'
			});
		case 'relative':
			const now = new Date();
			const diff = now.getTime() - date.getTime();
			const days = Math.floor(diff / (1000 * 60 * 60 * 24));
			
			if (days === 0) {
				return 'Today';
			} else if (days === 1) {
				return 'Yesterday';
			} else if (days < 7) {
				return `${days} days ago`;
			} else if (days < 30) {
				const weeks = Math.floor(days / 7);
				return `${weeks} ${weeks === 1 ? 'week' : 'weeks'} ago`;
			} else if (days < 365) {
				const months = Math.floor(days / 30);
				return `${months} ${months === 1 ? 'month' : 'months'} ago`;
			} else {
				const years = Math.floor(days / 365);
				return `${years} ${years === 1 ? 'year' : 'years'} ago`;
			}
		default:
			return date.toLocaleDateString();
	}
};
---

<time datetime={date.toISOString()} class="text-neutral-600 dark:text-neutral-400">
	{formatDate(date, format)}
</time>

<style>
	/* Smooth transitions for dark mode */
	time {
		transition: color 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		time {
			transition: none !important;
		}
	}
</style>
