---
interface Props {
  /**
   * The image source
   */
  src: string;
  
  /**
   * The image alt text
   */
  alt: string;
  
  /**
   * The image width
   */
  width?: number;
  
  /**
   * The image height
   */
  height?: number;
  
  /**
   * Whether to use lazy loading
   */
  lazy?: boolean;
  
  /**
   * Additional classes to apply
   */
  class?: string;
  
  /**
   * Priority loading for above-the-fold images
   */
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  lazy = true,
  class: className = '',
  priority = false
} = Astro.props;
---

<div class:list={['relative overflow-hidden', className]}>
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    class="w-full h-auto object-cover theme-transition"
    loading={lazy && !priority ? 'lazy' : 'eager'}
    decoding="async"
    fetchpriority={priority ? 'high' : 'auto'}
    onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
  />
  <div class="hidden w-full h-48 bg-neutral-100 dark:bg-neutral-800 items-center justify-center">
    <div class="text-center">
      <svg class="mx-auto h-12 w-12 text-neutral-400 dark:text-neutral-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
      <p class="mt-2 text-sm text-neutral-500 dark:text-neutral-400">Image unavailable</p>
    </div>
  </div>
</div>

<style>
  img {
    transition: opacity var(--animation-duration-fast) var(--animation-easing-default);
  }

  img[loading="lazy"] {
    opacity: 0;
  }

  img[loading="lazy"].loaded {
    opacity: 1;
  }

  @media (prefers-reduced-motion: reduce) {
    img {
      transition: none !important;
    }
  }
</style>

<script>
  // Handle lazy loading with intersection observer
  const images = document.querySelectorAll('img[loading="lazy"]');
  
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          img.classList.add('loaded');
          observer.unobserve(img);
        }
      });
    }, {
      rootMargin: '50px 0px'
    });

    images.forEach(img => imageObserver.observe(img));
  } else {
    // Fallback for older browsers
    images.forEach(img => img.classList.add('loaded'));
  }
</script> 