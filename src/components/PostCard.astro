---
import FormattedDate from './FormattedDate.astro';
import { categories } from '../data/categories';
import { formatDistanceToNow } from 'date-fns';

interface Props {
	post: {
		id: string;
		data: {
			title: string;
			description: string;
			pubDate: Date;
			category?: string[];
			subcategory?: string;
			language: string[];
			readingTime?: number;
			tags?: string[];
			image?: string;
		};
	};
	translations?: {
		id: string;
		language: string;
	}[];
}

const { post, translations } = Astro.props;

// Find the category data for all categories
const categoryData = post.data.category?.map(catId => categories.find(cat => cat.id === catId)) || [];

// Get the alternate language translation if it exists
const alternateTranslation = translations?.find(t => t.id !== post.id);

// Get language flag emoji
const getLanguageFlag = (lang: string) => {
	const flags: Record<string, string> = {
		'en': 'üá∫üá∏',
		'es': 'üáµüá∑',
	};
	return flags[lang] || lang.toUpperCase();
};

// Format relative date
const formatRelativeDate = (date: Date) => {
	const now = new Date();
	const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
	
	if (diffInSeconds < 60) return 'just now';
	if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
	if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
	if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;
	if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 604800)}w ago`;
	if (diffInSeconds < 31536000) return `${Math.floor(diffInSeconds / 2592000)}mo ago`;
	return `${Math.floor(diffInSeconds / 31536000)}y ago`;
};
---

<article 
	class="group rounded-xl border border-zinc-200 dark:border-zinc-800 shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden bg-white dark:bg-zinc-900"
	aria-label={`Post: ${post.data.title}`}
>
	<a href={`/blog/${post.id}/`} class="block no-underline text-inherit">
		{post.data.image && (
			<div class="relative pt-[56.25%] bg-zinc-100 dark:bg-zinc-800 overflow-hidden">
				<img
					src={post.data.image}
					alt=""
					class="absolute top-0 left-0 w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
					width="800"
					height="400"
					loading="lazy"
				/>
				<div class="absolute inset-0 bg-gradient-to-t from-background/80 dark:from-background-dark/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
			</div>
		)}
		
		<div class="p-6 md:p-7 space-y-4">
			{/* Metadata Section */}
			<div class="flex items-center gap-2 border-b border-zinc-100 dark:border-zinc-800 pb-3">
				{post.data.language.map(lang => (
					<span class="text-xs px-2 py-0.5 rounded-full bg-zinc-100 dark:bg-zinc-800 font-medium text-gray-700 dark:text-gray-300">
						{getLanguageFlag(lang)}
					</span>
				))}
				{post.data.readingTime && (
					<span class="text-xs px-2 py-0.5 rounded-full bg-zinc-100 dark:bg-zinc-800 font-medium text-gray-700 dark:text-gray-300">
						{post.data.readingTime} min read
					</span>
				)}
			</div>

			{/* Title Section */}
			<div class="space-y-3 mt-4">
				<h3 class="text-2xl md:text-3xl font-serif font-bold leading-tight tracking-tight text-gray-900 dark:text-gray-100 group-hover:text-primary-500 dark:group-hover:text-primary-400 transition-colors duration-300">
					{post.data.title}
				</h3>

				<p class="text-base md:text-lg text-gray-600 dark:text-gray-400 leading-relaxed line-clamp-3">
					{post.data.description}
				</p>
			</div>

			{/* Categories Section */}
			{post.data.category && (
				<div class="flex flex-wrap gap-3 mb-4">
					{categoryData.map(cat => cat && (
						<a 
							href={`/category/${cat.id}/`} 
							class="inline-flex items-center gap-1.5 text-sm font-medium bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 px-4 py-1.5 rounded-full hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-all duration-200 hover:scale-105"
						>
							{cat.icon} {cat.name}
						</a>
					))}
				</div>
			)}

			{/* Tags Section */}
			{post.data.tags && post.data.tags.length > 0 && (
				<div class="flex flex-wrap gap-3 mb-4">
					{post.data.tags.map(tag => (
						<a 
							href={`/tag/${tag}/`} 
							class="inline-flex items-center gap-1.5 text-sm font-medium bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 px-4 py-1.5 rounded-full hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-all duration-200 hover:scale-105"
						>
							üè∑Ô∏è {tag}
						</a>
					))}
				</div>
			)}

			{/* Footer Section */}
			<div class="flex items-center justify-between pt-3 border-t border-zinc-100 dark:border-zinc-800">
				<time 
					datetime={post.data.pubDate.toISOString()}
					class="text-sm text-gray-500 dark:text-gray-400 hover:underline cursor-pointer"
					title={post.data.pubDate.toLocaleDateString('en-US', {
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}
				>
					{formatDistanceToNow(post.data.pubDate, { addSuffix: true })}
				</time>
			</div>
		</div>
	</a>
</article>

<style>
	.line-clamp-3 {
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	@media (prefers-reduced-motion: reduce) {
		* {
			transition: none !important;
			animation: none !important;
		}
	}
</style> 