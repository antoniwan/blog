---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from './FormattedDate.astro';
import TagDisplay from './TagDisplay.astro';
import DefaultImage from './DefaultImage.astro';

interface Props {
	post: CollectionEntry<'blog'>;
	featured?: boolean;
	compact?: boolean;
}

const { post, featured = false, compact = false } = Astro.props;
const { data } = post;
---

<article 
	class="group relative interactive-card overflow-hidden"
	class:list={{
		'featured-card': featured,
		'compact-card': compact,
		'hover:-translate-y-2': !compact,
		'hover:-translate-y-1': compact
	}}
	role="article"
	data-post-slug={post.id}
>
	<!-- Read indicator -->
	<div class="read-indicator" data-post-slug={post.id}>
		<span class="read-dot"></span>
	</div>

	<!-- Enhanced gradient overlay with shocking highlights -->
	<div class="absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-[rgb(var(--color-primary))]/10 opacity-0 group-hover:opacity-100 transition-normal pointer-events-none"></div>
	
	<!-- Hero Image -->
	<div class="relative overflow-hidden">
		{data.heroImage ? (
			<img 
				src={data.heroImage} 
				alt={data.title}
				class="w-full h-48 md:h-56 object-cover group-hover:opacity-85 transition-opacity duration-300"
				loading="lazy"
			/>
		) : (
			<DefaultImage 
				alt={data.title}
				className="w-full h-48 md:h-56 object-cover group-hover:opacity-85 transition-opacity duration-300"
				loading="lazy"
			/>
		)}
		<!-- Image overlay gradient -->
		<div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
	</div>
	
	<!-- Card content -->
	<div class="relative p-4 sm:p-6 md:p-8">
		<div class="space-y-3 sm:space-y-4 md:space-y-5">
			<!-- Header with metadata -->
			<header class="space-y-3">
				<div class="flex items-center gap-2 text-sm text-body-muted leading-relaxed">
					<FormattedDate date={data.pubDate} />
					{(data.readingTime || data.minutesRead) && (
						<>
							<span aria-hidden="true">•</span>
							<span>{data.minutesRead || `${data.readingTime} min read`}</span>
						</>
					)}
					{featured && (
						<>
							<span aria-hidden="true">•</span>
							<span class="text-[rgb(var(--color-primary))] text-lg font-semibold" role="img" aria-label="Featured post">
								⭐
							</span>
						</>
					)}
				</div>
				
				<h2 class="text-xl sm:text-2xl md:text-3xl font-bold text-[rgb(var(--color-text))] group-hover:text-[rgb(var(--color-primary))] transition-normal leading-tight">
					<a href={`/p/${post.id}/`} class="block">
						{data.title}
					</a>
				</h2>
			</header>
			
			<!-- Description -->
			{data.description && (
				<p class="text-base sm:text-lg md:text-xl text-body-muted line-clamp-2 md:line-clamp-3 leading-relaxed">
					{data.description}
				</p>
			)}
			
			<!-- Tags -->
			{data.tags && data.tags.length > 0 && (
				<footer class="pt-0.5 sm:pt-1">
					<TagDisplay 
						tags={data.tags} 
						maxVisible={3} 
						showMoreIndicator={true}
						compact={true}
					/>
				</footer>
			)}
		</div>
	</div>
	
	<!-- Hover indicator -->
	<div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-[rgb(var(--color-primary))] to-[rgb(var(--color-primary))] transform scale-x-0 group-hover:scale-x-100 transition-normal origin-left"></div>
</article>

<script>
	// Read status indicator for PostCard
		// Storage constants - using direct values since import doesn't work in Astro client scripts
	const STORAGE_KEY = 'curious-chaos-read-posts-v1.0';
	const FALLBACK_KEY = 'curious-chaos-read-posts';

	class PostCardReadIndicator {
		private storageKey: string;
		private fallbackKey: string;
		private boundPostReadHandler: () => void;
		private boundClearedHandler: () => void;
		private boundStorageHandler: (event: any) => void;
		private boundDataUpdatedHandler: (event: any) => void;

		constructor() {
			this.storageKey = STORAGE_KEY;
			this.fallbackKey = FALLBACK_KEY;
			this.boundPostReadHandler = this.handlePostRead.bind(this);
			this.boundClearedHandler = this.handleClearedPosts.bind(this);
			this.boundStorageHandler = this.handleStorageChange.bind(this);
			this.boundDataUpdatedHandler = this.handleDataUpdated.bind(this);
			this.init();
		}

			loadReadPosts() {
		try {
			const stored = localStorage.getItem(this.storageKey) || localStorage.getItem(this.fallbackKey);
			if (!stored) return [];
			
			const parsed = JSON.parse(stored);
			
			// Validate data structure
			if (!Array.isArray(parsed)) {
				console.warn('Invalid read posts format: expected array, got', typeof parsed);
				return [];
			}
			
			// Filter and validate individual items
			return parsed.filter(item => {
				if (!item || typeof item !== 'object') return false;
				
				const hasValidSlug = typeof item.postSlug === 'string' && item.postSlug.trim().length > 0;
				const hasValidDate = typeof item.readAt === 'string' && !isNaN(Date.parse(item.readAt));
				
				if (!hasValidSlug || !hasValidDate) {
					console.warn('Filtering out invalid read post item:', item);
					return false;
				}
				
				return true;
			});
		} catch (error) {
			console.warn('Failed to parse read posts:', error);
			return [];
		}
	}

			getReadData(postSlug: string) {
		const readData = this.loadReadPosts();
		return readData.find((data) => data.postSlug === postSlug) || null;
	}

		updateIndicators() {
			document.querySelectorAll('.read-indicator').forEach(indicator => {
				const postSlug = (indicator as HTMLElement).dataset.postSlug;
				const dot = indicator.querySelector('.read-dot');
				
				if (postSlug && dot) {
					const readData = this.getReadData(postSlug);
					
					if (readData) {
						dot.classList.add('read');
						indicator.setAttribute('title', 'Read');
					} else {
						dot.classList.remove('read');
						indicator.setAttribute('title', 'Unread');
					}
				}
			});
		}

			handlePostRead() {
		this.updateIndicators();
	}
	
	handleClearedPosts() {
		this.updateIndicators();
	}
	
	handleStorageChange(event: any) {
		// React to localStorage changes from other tabs/windows
		if (event.key === this.storageKey || event.key === this.fallbackKey) {
			this.updateIndicators();
		}
	}
	
	handleDataUpdated(event: any) {
		// React to immediate data updates from same tab
		if (event.detail?.type === 'post-read') {
			this.updateIndicators();
		}
	}
	
	init() {
		// Update indicators on page load
		this.updateIndicators();

		// Listen for post-read events from other components
		window.addEventListener('post-read', this.boundPostReadHandler);

		// Listen for read-posts-cleared events
		window.addEventListener('read-posts-cleared', this.boundClearedHandler);
		
		// Listen for storage events (cross-tab synchronization)
		window.addEventListener('storage', this.boundStorageHandler);
		
		// Listen for immediate data updates (same-tab reactivity)
		window.addEventListener('reading-data-updated', this.boundDataUpdatedHandler);
	}
	
	cleanup() {
		window.removeEventListener('post-read', this.boundPostReadHandler);
		window.removeEventListener('read-posts-cleared', this.boundClearedHandler);
		window.removeEventListener('storage', this.boundStorageHandler);
		window.removeEventListener('reading-data-updated', this.boundDataUpdatedHandler);
	}
	}

	// Initialize when DOM is ready
	let postCardIndicator: PostCardReadIndicator;
	
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			postCardIndicator = new PostCardReadIndicator();
		});
	} else {
		postCardIndicator = new PostCardReadIndicator();
	}
	
	// Cleanup on page unload
	window.addEventListener('beforeunload', () => {
		if (postCardIndicator) {
			postCardIndicator.cleanup();
		}
	});
</script>

<style>
	/* Read indicator styling */
	.read-indicator {
		position: absolute;
		top: 0.75rem;
		right: 0.75rem;
		z-index: 10;
		pointer-events: none;
	}

	.read-dot {
		display: block;
		width: 8px;
		height: 8px;
		border-radius: 50%;
		background: rgb(var(--color-border));
		border: 2px solid rgb(var(--color-bg));
		transition: all 0.2s ease;
	}

	.read-dot.read {
		background: rgb(34, 197, 94);
		border-color: rgb(var(--color-bg));
		box-shadow: 0 0 0 2px rgb(34, 197, 94, 0.2);
	}

	/* Enhanced card styling */
	article {
		transition: all 0.2s ease;
		backdrop-filter: blur(8px);
	}

	/* Featured card styling */
	.featured-card {
		border-color: rgb(var(--color-primary) / 0.2);
		box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
		background: linear-gradient(135deg, 
			rgb(var(--color-bg)) 0%, 
			rgb(var(--color-bg-alt)) 100%);
	}

	/* Compact card styling */
	.compact-card {
		@apply p-3 sm:p-4 md:p-6;
	}

	.compact-card .space-y-3 > * + * {
		margin-top: 0.75rem;
	}

	.compact-card .space-y-4 > * + * {
		margin-top: 1rem;
	}

	.compact-card .space-y-5 > * + * {
		margin-top: 1.25rem;
	}

	/* Enhanced hover effects */
	.group:hover {
		box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 10px 10px -5px rgb(0 0 0 / 0.04);
		border-color: rgb(var(--color-primary) / 0.2);
	}

	/* Enhanced focus states */
	.group:focus-within {
		outline: 2px solid rgb(var(--color-primary));
		outline-offset: 2px;
		border-radius: 0.75rem;
	}

	/* Improved line heights for better readability */
	.text-lg {
		line-height: 1.4;
	}

	.text-xl {
		line-height: 1.4;
	}

	.text-2xl {
		line-height: 1.3;
	}

	.text-3xl {
		line-height: 1.2;
	}

	/* Enhanced spacing between elements */
	.space-y-3 > * + * {
		margin-top: 0.75rem;
	}

	.space-y-4 > * + * {
		margin-top: 1rem;
	}

	.space-y-5 > * + * {
		margin-top: 1.25rem;
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		article {
			transition: none !important;
		}

		.group:hover {
			transform: none;
		}

		.group:hover img {
			transform: none !important;
		}

		.read-dot {
			transition: none !important;
		}
	}
</style> 
