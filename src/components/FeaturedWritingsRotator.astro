---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from './FormattedDate.astro';
import DefaultImage from './DefaultImage.astro';
import { calculateReadingTimeFromMarkdown } from '../utils/readingTime';

export interface Props {
  posts: CollectionEntry<'blog'>[];
  autoRotate?: boolean;
  rotationSpeed?: number;
  showNavigation?: boolean;
  className?: string;
}

const {
  posts,
  autoRotate = true,
  rotationSpeed = 6000,
  showNavigation = true,
  className = "",
} = Astro.props;

if (!posts || posts.length === 0) {
  return null;
}
---

<section 
  class={`featured-rotator ${className}`} 
  data-auto-rotate={autoRotate} 
  data-rotation-speed={rotationSpeed}
  aria-label="Featured writings carousel"
  role="region"
>
  <div class="rotator-wrapper">
    {/* Main carousel container */}
    <div class="carousel-container">
      {posts.map((post, index) => {
        const { data } = post;
        const readingTime = calculateReadingTimeFromMarkdown(post.body || '');
        const isActive = index === 0;
        
        return (
          <article 
            class={`carousel-slide ${isActive ? 'active' : ''}`} 
            data-index={index}
            role="group"
            aria-hidden={!isActive}
            aria-label={`Featured writing ${index + 1} of ${posts.length}`}
            tabindex={isActive ? 0 : -1}
          >
            {/* Hero image */}
            <div class="slide-image">
              {data.heroImage ? (
                <img 
                  src={data.heroImage} 
                  alt={`Hero image for ${data.title}`}
                  class="hero-img"
                  loading="lazy"
                />
              ) : (
                <DefaultImage 
                  alt={`Default image for ${data.title}`}
                  className="hero-img"
                  loading="lazy"
                />
              )}
              
              {/* Gradient overlay for text readability */}
              <div class="image-overlay"></div>
            </div>
            
            {/* Content overlay */}
            <div class="content-overlay">
              <div class="content-wrapper">
                {/* Post metadata */}
                <div class="post-meta">
                  <time datetime={data.pubDate.toISOString()} class="post-date">
                    <FormattedDate date={data.pubDate} />
                  </time>
                  {readingTime && (
                    <>
                      <span class="meta-separator">â€¢</span>
                      <span class="reading-time">{readingTime}</span>
                    </>
                  )}
                </div>
                
                {/* Post title */}
                <h2 class="post-title">
                  <a 
                    href={`/p/${post.id}/`} 
                    class="title-link"
                    data-post-id={post.id}
                    data-post-title={data.title}
                  >
                    {data.title}
                  </a>
                </h2>
                
                {/* Post description */}
                {data.description && (
                  <p class="post-description">
                    {data.description}
                  </p>
                )}
              </div>
            </div>
          </article>
        );
      })}
      
      {/* Navigation arrows */}
      {showNavigation && posts.length > 1 && (
        <div class="nav-controls">
          <button 
            class="nav-btn nav-prev" 
            aria-label="Previous post"
            type="button"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>
          <button 
            class="nav-btn nav-next" 
            aria-label="Next post"
            type="button"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>
      )}
      
      {/* Slide counter */}
      {posts.length > 1 && (
        <div class="slide-counter">
          <span class="current-slide">1</span>
          <span class="counter-separator">/</span>
          <span class="total-slides">{posts.length}</span>
        </div>
      )}
    </div>
  </div>
</section>

<style>
  /* Mobile-first base styles */
  .featured-rotator {
    @apply w-full;
  }
  
  .rotator-wrapper {
    @apply relative;
  }
  
  .carousel-container {
    @apply relative bg-gray-100 dark:bg-gray-800 overflow-hidden rounded-lg shadow-lg;
    aspect-ratio: 3/4; /* Mobile portrait */
  }
  
  /* Slide styles */
  .carousel-slide {
    @apply absolute inset-0 transition-opacity duration-500 ease-in-out opacity-0;
    pointer-events: none; /* prevent invisible slides from intercepting clicks */
  }
  
  .carousel-slide.active {
    @apply opacity-100;
    pointer-events: auto; /* only active slide is interactive */
  }
  
  /* Image container */
  .slide-image {
    @apply relative h-full w-full;
  }
  
  .hero-img {
    @apply w-full h-full object-cover;
  }
  
  /* Gradient overlay for text readability */
  .image-overlay {
    @apply absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent;
  }
  
  /* Content overlay */
  .content-overlay {
    @apply absolute bottom-0 left-0 right-0 p-4;
  }
  
  .content-wrapper {
    @apply space-y-3;
  }
  
  /* Post metadata */
  .post-meta {
    @apply flex items-center gap-2 text-sm text-white/90;
  }
  
  .post-date {
    @apply text-yellow-300 font-semibold;
  }
  
  .meta-separator {
    @apply text-white/70;
  }
  
  .reading-time {
    @apply text-white font-medium;
  }
  
  /* Post title */
  .post-title {
    @apply text-lg font-bold text-white leading-tight;
  }
  
  .title-link {
    @apply hover:text-yellow-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-yellow-300 focus:ring-offset-2 focus:ring-offset-black/50 rounded;
  }
  
  /* Post description */
  .post-description {
    @apply text-sm text-white/90 leading-relaxed line-clamp-2;
  }
  
  /* Navigation controls */
  .nav-controls {
    @apply absolute top-1/2 -translate-y-1/2 left-0 right-0 flex justify-between px-2;
    z-index: 10;
  }
  
  .nav-btn {
    @apply bg-white/80 dark:bg-gray-800/80 text-gray-600 dark:text-gray-300 rounded-full p-2 shadow-sm transition-colors duration-150 hover:bg-white/90 dark:hover:bg-gray-700/90 focus:outline-none focus:ring-1 focus:ring-yellow-400;
    min-width: 36px;
    min-height: 36px;
    @apply flex items-center justify-center;
  }
  
  .nav-btn:active {
    @apply scale-100;
  }
  
  /* Slide counter */
  .slide-counter {
    @apply absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded text-xs font-medium backdrop-blur-sm;
    z-index: 10;
  }
  
  .counter-separator {
    @apply mx-1 text-white/60;
  }
  
  /* Small tablet (640px+) */
  @media (min-width: 640px) {
    .carousel-container {
      aspect-ratio: 4/3;
    }
    
    .content-overlay {
      @apply p-5;
    }
    
    .post-title {
      @apply text-xl;
    }
    
    .post-description {
      @apply text-base;
    }
    
    .nav-controls {
      @apply px-3;
    }
    
    .nav-btn {
      @apply p-2.5;
      min-width: 40px;
      min-height: 40px;
    }
  }
  
  /* Tablet (768px+) */
  @media (min-width: 768px) {
    .carousel-container {
      aspect-ratio: 16/10;
    }
    
    .content-overlay {
      @apply p-6;
    }
    
    .content-wrapper {
      @apply space-y-4;
    }
    
    .post-title {
      @apply text-2xl;
    }
    
    .post-description {
      @apply text-lg;
    }
    
    .nav-btn {
      @apply p-3;
      min-width: 44px;
      min-height: 44px;
    }
    
    .slide-counter {
      @apply top-3 right-3 px-3 py-1.5 text-sm;
    }
  }
  
  /* Desktop (1024px+) */
  @media (min-width: 1024px) {
    .carousel-container {
      aspect-ratio: 16/9;
    }
    
    .post-title {
      @apply text-3xl;
    }
    
    .post-description {
      @apply text-xl;
    }
    
    .nav-btn {
      @apply p-3;
      min-width: 48px;
      min-height: 48px;
    }
  }
  
  /* Large desktop (1280px+) */
  @media (min-width: 1280px) {
    .post-title {
      @apply text-4xl;
    }
    
    .post-description {
      @apply text-2xl;
    }
    
    .nav-btn {
      @apply p-3;
      min-width: 48px;
      min-height: 48px;
    }
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    .nav-btn {
      @apply border border-gray-800 dark:border-white;
    }
  }
  
  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .carousel-slide {
      transition: opacity 0.2s ease-in-out !important;
    }
    
    .nav-btn {
      transition: none !important;
    }
    
    .nav-btn:hover {
      transform: none !important;
    }
  }
  
  /* Dark mode enhancements */
  @media (prefers-color-scheme: dark) {
    .nav-btn {
      @apply bg-gray-800/80 hover:bg-gray-700/80 text-gray-300;
    }
    
    .slide-counter {
      @apply bg-gray-900/80;
    }
  }
  
  /* Print styles */
  @media print {
    .nav-btn,
    .slide-counter {
      @apply hidden;
    }
    
    .carousel-container {
      @apply shadow-none border border-gray-300;
    }
    
    .content-overlay {
      @apply bg-white text-black;
    }
    
    .post-title,
    .post-description,
    .post-meta {
      @apply text-black;
    }
  }
</style>

<script>
  class FeaturedRotator {
    private container: HTMLElement;
    private slides: Element[];
    private currentIndex: number;
    private autoRotate: boolean;
    private rotationSpeed: number;
    private rotationInterval: number | null;
    private isPaused: boolean;
    
    constructor(container: HTMLElement) {
      this.container = container;
      this.slides = Array.from(container.querySelectorAll('.carousel-slide'));
      this.currentIndex = 0;
      this.autoRotate = container.dataset.autoRotate === 'true';
      this.rotationSpeed = parseInt(container.dataset.rotationSpeed || '6000');
      this.rotationInterval = null;
      this.isPaused = false;
      
      this.init();
    }
    
    private init(): void {
      this.setupNavigation();
      this.setupKeyboardNavigation();
      this.setupAutoRotation();
      this.updateDisplay();
    }
    
    private setupNavigation(): void {
      const prevBtn = this.container.querySelector('.nav-prev') as HTMLButtonElement;
      const nextBtn = this.container.querySelector('.nav-next') as HTMLButtonElement;
      
      if (prevBtn) {
        prevBtn.addEventListener('click', () => this.previous());
      }
      
      if (nextBtn) {
        nextBtn.addEventListener('click', () => this.next());
      }
    }
    
    private setupKeyboardNavigation(): void {
      this.container.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          this.previous();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          this.next();
        } else if (e.key === 'Home') {
          e.preventDefault();
          this.goTo(0);
        } else if (e.key === 'End') {
          e.preventDefault();
          this.goTo(this.slides.length - 1);
        }
      });
    }
    
    private setupAutoRotation(): void {
      if (this.autoRotate && this.slides.length > 1) {
        this.startAutoRotation();
        
        // Pause on interaction
        this.container.addEventListener('focusin', () => this.pauseAutoRotation());
        this.container.addEventListener('focusout', () => this.resumeAutoRotation());
        this.container.addEventListener('mouseenter', () => this.pauseAutoRotation());
        this.container.addEventListener('mouseleave', () => this.resumeAutoRotation());
        this.container.addEventListener('touchstart', () => this.pauseAutoRotation());
        this.container.addEventListener('touchend', () => this.resumeAutoRotation());
      }
    }
    
    private startAutoRotation(): void {
      if (this.rotationInterval || this.isPaused) return;
      
      this.rotationInterval = window.setInterval(() => {
        this.next();
      }, this.rotationSpeed);
    }
    
    private stopAutoRotation(): void {
      if (this.rotationInterval) {
        clearInterval(this.rotationInterval);
        this.rotationInterval = null;
      }
    }
    
    private pauseAutoRotation(): void {
      this.isPaused = true;
      this.stopAutoRotation();
    }
    
    private resumeAutoRotation(): void {
      this.isPaused = false;
      this.startAutoRotation();
    }
    
    private goTo(index: number): void {
      if (index < 0 || index >= this.slides.length) return;
      
      this.currentIndex = index;
      this.updateDisplay();
    }
    
    private next(): void {
      this.currentIndex = (this.currentIndex + 1) % this.slides.length;
      this.updateDisplay();
    }
    
    private previous(): void {
      this.currentIndex = this.currentIndex === 0 ? this.slides.length - 1 : this.currentIndex - 1;
      this.updateDisplay();
    }
    
    private updateDisplay(): void {
      // Update slides
      this.slides.forEach((slide: Element, index: number) => {
        const isActive = index === this.currentIndex;
        slide.classList.toggle('active', isActive);
        slide.setAttribute('aria-hidden', (!isActive).toString());
        slide.setAttribute('tabindex', isActive ? '0' : '-1');
      });
      
      // Update counter
      const counter = this.container.querySelector('.slide-counter');
      if (counter) {
        const currentSlideEl = counter.querySelector('.current-slide');
        if (currentSlideEl) {
          currentSlideEl.textContent = String(this.currentIndex + 1);
        }
      }
      
      // Update navigation labels
      this.updateNavigationLabels();
    }
    
    private updateNavigationLabels(): void {
      const prevBtn = this.container.querySelector('.nav-prev') as HTMLButtonElement;
      const nextBtn = this.container.querySelector('.nav-next') as HTMLButtonElement;
      
      if (prevBtn) {
        const prevIndex = this.currentIndex === 0 ? this.slides.length - 1 : this.currentIndex - 1;
        const prevTitle = this.slides[prevIndex].querySelector('.post-title')?.textContent?.trim() || 'Previous post';
        prevBtn.setAttribute('aria-label', `Previous post (${prevTitle})`);
      }
      
      if (nextBtn) {
        const nextIndex = (this.currentIndex + 1) % this.slides.length;
        const nextTitle = this.slides[nextIndex].querySelector('.post-title')?.textContent?.trim() || 'Next post';
        nextBtn.setAttribute('aria-label', `Next post (${nextTitle})`);
      }
    }
  }
  
  // Initialize all rotators on the page
  document.addEventListener('DOMContentLoaded', () => {
    const rotators = document.querySelectorAll('.featured-rotator');
    rotators.forEach(rotator => new FeaturedRotator(rotator as HTMLElement));
  });
</script>
