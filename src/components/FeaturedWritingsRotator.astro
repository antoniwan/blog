---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from './FormattedDate.astro';
import TagDisplay from './TagDisplay.astro';
import DefaultImage from './DefaultImage.astro';
import { calculateReadingTimeFromMarkdown } from '../utils/readingTime';

export interface Props {
  posts: CollectionEntry<'blog'>[];
  autoRotate?: boolean;
  rotationSpeed?: number; // in milliseconds
  showNavigation?: boolean;
  showThumbnails?: boolean;
  className?: string;
}

const {
  posts,
  autoRotate = true,
  rotationSpeed = 6000,
  showNavigation = true,
  showThumbnails = true,
  className = "",
} = Astro.props;

if (!posts || posts.length === 0) {
  return null;
}
---

<section 
  class={`featured-writings-rotator ${className}`} 
  data-auto-rotate={autoRotate} 
  data-rotation-speed={rotationSpeed}
  aria-label="Featured writings carousel"
  role="region"
>
  {/* Screen reader announcement for current slide */}
  <div class="sr-only" aria-live="polite" aria-atomic="true">
    <span class="slide-announcement">
      Featured writing {1} of {posts.length}: {posts[0].data.title}
    </span>
  </div>

  <div class="rotator-container">
    {/* Main post display */}
    <div class="main-post-container" role="group" aria-label="Featured writing slides">
      {posts.map((post, index) => {
        const { data } = post;
        const readingTime = calculateReadingTimeFromMarkdown(post.body || '');
        const isActive = index === 0;
        
        return (
          <article 
            class={`main-post ${isActive ? 'active' : ''}`} 
            data-index={index}
            role="group"
            aria-hidden={!isActive}
            aria-label={`Featured writing ${index + 1} of ${posts.length}`}
            tabindex={isActive ? 0 : -1}
          >
            <div class="post-content">
              {/* Hero Image */}
              <div class="post-hero-image">
                                  {data.heroImage ? (
                    <img 
                      src={data.heroImage} 
                      alt={`Hero image for ${data.title}`}
                      class="hero-image"
                      loading="lazy"
                    />
                  ) : (
                    <DefaultImage 
                      alt={`Default image for ${data.title}`}
                      className="hero-image"
                      loading="lazy"
                    />
                  )}
                
                {/* Enhanced image overlay with better text contrast */}
                <div class="image-overlay" aria-hidden="true">
                  {/* Top gradient for better contrast */}
                  <div class="overlay-top"></div>
                  {/* Bottom gradient for text readability */}
                  <div class="overlay-bottom"></div>
                </div>
              </div>
              
              {/* Post content overlay with enhanced readability */}
              <div class="post-overlay">
                <div class="post-header">
                  <div class="post-meta" aria-label="Post metadata">
                    <time datetime={data.pubDate.toISOString()} class="post-date">
                      <FormattedDate date={data.pubDate} />
                    </time>
                    {readingTime && (
                      <>
                        <span aria-hidden="true" class="separator">•</span>
                        <span class="reading-time">{readingTime}</span>
                      </>
                    )}
                    <span aria-hidden="true" class="separator">•</span>
                    <span class="featured-badge" role="img" aria-label="Featured post">
                      ⭐
                    </span>
                  </div>
                  
                  <h2 class="post-title">
                    <a 
                      href={`/p/${post.id}/`} 
                      class="post-title-link"
                      aria-describedby={`post-desc-${index}`}
                    >
                      {data.title}
                    </a>
                  </h2>
                  
                  {data.description && (
                    <p class="post-description" id={`post-desc-${index}`}>
                      {data.description}
                    </p>
                  )}
                  
                  {/* Tags */}
                  {data.tags && data.tags.length > 0 && (
                    <div class="post-tags" aria-label="Post tags">
                      <TagDisplay 
                        tags={data.tags} 
                        maxVisible={3} 
                        showMoreIndicator={true}
                        compact={true}
                      />
                    </div>
                  )}
                </div>
              </div>
            </div>
          </article>
        );
      })}
      
      {/* Navigation arrows */}
      {showNavigation && posts.length > 1 && (
        <div class="navigation-controls" role="group" aria-label="Carousel navigation">
          <button 
            class="nav-arrow nav-prev" 
            aria-label={`Previous post (${posts[posts.length - 1].data.title})`}
            aria-describedby="nav-instructions"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
            <span class="sr-only">Previous</span>
          </button>
          <button 
            class="nav-arrow nav-next" 
            aria-label={`Next post (${posts[1].data.title})`}
            aria-describedby="nav-instructions"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
            <span class="sr-only">Next</span>
          </button>
        </div>
      )}
      
      {/* Post counter */}
      {posts.length > 1 && (
        <div class="post-counter" aria-label="Slide position">
          <span class="current-index" aria-current="true">1</span>
          <span class="separator" aria-hidden="true">/</span>
          <span class="total-count">{posts.length}</span>
        </div>
      )}
    </div>
    

  </div>

  {/* Accessibility instructions */}
  <div id="nav-instructions" class="sr-only">
    Use left and right arrow keys to navigate between posts, or use the thumbnail buttons below to jump to a specific post.
  </div>
</section>

<style>
  /* Mobile-first base styles */
  .featured-writings-rotator {
    @apply w-full mb-4;
  }
  
  .rotator-container {
    @apply relative;
  }
  
  .main-post-container {
    @apply relative bg-gray-100 dark:bg-gray-800 overflow-hidden shadow-lg rounded-lg;
    aspect-ratio: 3 / 4; /* Mobile-first portrait aspect ratio */
  }
  
  /* Mobile-first post styles */
  .main-post {
    @apply absolute inset-0 transition-opacity duration-500 opacity-0;
  }
  
  .main-post.active {
    @apply opacity-100;
  }
  
  .post-content {
    @apply relative h-full;
  }
  
  .post-hero-image {
    @apply relative h-full;
  }
  
  .hero-image {
    @apply w-full h-full object-cover;
  }
  
  /* Optimized overlay system - only covers text content area */
  .image-overlay {
    @apply absolute inset-0;
  }
  
  .overlay-top {
    @apply absolute top-0 left-0 right-0 h-1/4 bg-gradient-to-b from-black/40 via-black/20 to-transparent;
  }
  
  .overlay-bottom {
    @apply absolute bottom-0 left-0 right-0 h-1/2 bg-gradient-to-t from-black/90 via-black/70 to-transparent;
  }
  
  /* Optimized post overlay - more targeted coverage */
  .post-overlay {
    @apply absolute bottom-0 left-0 right-0 p-4;
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.95) 0%,
      rgba(0, 0, 0, 0.8) 40%,
      rgba(0, 0, 0, 0.5) 70%,
      rgba(0, 0, 0, 0.2) 90%,
      transparent 100%
    );
    z-index: 8;
  }
  
  .post-header {
    @apply space-y-3;
  }
  
  .post-meta {
    @apply flex items-center gap-2 text-sm text-white leading-relaxed flex-wrap;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.9);
  }
  
  .post-date {
    @apply text-yellow-300 font-bold;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.95);
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.8));
  }
  
  .separator {
    @apply text-white/90 font-medium;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.9);
  }
  
  .reading-time {
    @apply text-white font-semibold;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.9);
  }
  
  .featured-badge {
    @apply text-yellow-400 text-base font-bold;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.9);
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.8));
  }
  
  .post-title {
    @apply text-lg font-bold text-white leading-tight;
    text-shadow: 0 3px 6px rgba(0, 0, 0, 0.95);
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.8));
  }
  
  .post-title-link {
    @apply hover:text-yellow-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-yellow-300 focus:ring-offset-2 focus:ring-offset-black/50 rounded;
    text-shadow: 0 3px 6px rgba(0, 0, 0, 0.95);
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.8));
    position: relative;
    z-index: 10;
  }
  
  .post-description {
    @apply text-sm text-white leading-relaxed line-clamp-3 font-medium;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.9);
  }
  
  .post-tags {
    @apply pt-2;
  }
  
  /* Override more tags indicator to match regular tags */
  .post-tags .more-indicator {
    @apply bg-[rgb(var(--color-accent))]/10 border-[rgb(var(--color-accent))]/20 text-[rgb(var(--color-accent))] hover:bg-[rgb(var(--color-accent))]/20;
  }
  
  /* Mobile-first navigation */
  .navigation-controls {
    @apply absolute top-1/2 -translate-y-1/2 left-0 right-0 flex justify-between px-3;
    z-index: 5;
  }
  
  .nav-arrow {
    @apply bg-white/95 dark:bg-gray-800/95 hover:bg-white dark:hover:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full p-3 shadow-lg transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:ring-offset-2 border-2 border-white/20;
    min-width: 48px;
    min-height: 48px;
  }
  
  .nav-arrow svg {
    @apply m-0 p-0;
    margin: 0 !important;
    padding: 0 !important;
    display: block;
    width: 20px;
    height: 20px;
  }
  
  .nav-arrow {
    @apply flex items-center justify-center;
  }
  
  .nav-arrow:active {
    @apply scale-95;
  }
  
  .post-counter {
    @apply absolute top-3 right-3 bg-black/80 text-white px-3 py-1.5 rounded-full text-xs font-medium backdrop-blur-sm border border-white/20;
    z-index: 6;
  }
  

  
  /* Screen reader only content */
  .sr-only {
    @apply absolute w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-0;
    clip: rect(0, 0, 0, 0);
  }
  
  /* Hide scrollbar but keep functionality */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Small tablet styles */
  @media (min-width: 640px) {
    .main-post-container {
      aspect-ratio: 4 / 3;
    }
    
    .post-overlay {
      @apply p-5;
    }
    
    .post-title {
      @apply text-xl;
    }
    
    .post-description {
      @apply text-base line-clamp-3;
    }
    
              .nav-arrow {
       @apply p-3;
       min-width: 52px;
       min-height: 52px;
     }
  }
  
  /* Tablet styles */
  @media (min-width: 768px) {
    .featured-writings-rotator {
      @apply mb-6;
    }
    
    .main-post-container {
      aspect-ratio: 16 / 10;
    }
    
    .post-overlay {
      @apply p-6;
    }
    
    .post-header {
      @apply space-y-4;
    }
    
    .post-title {
      @apply text-2xl;
    }
    
    .post-description {
      @apply text-lg;
    }
    
    .nav-arrow {
      @apply p-4;
      min-width: 56px;
      min-height: 56px;
    }
    
    .post-counter {
      @apply top-4 right-4 px-4 py-2 text-sm;
    }
    

  }
  
  /* Desktop styles */
  @media (min-width: 1024px) {
    .main-post-container {
      aspect-ratio: 16 / 9;
    }
    
    .post-title {
      @apply text-3xl;
    }
    
    .post-description {
      @apply text-xl;
    }
    
    .nav-arrow {
       @apply p-4;
       min-width: 60px;
       min-height: 60px;
    }
    
    .thumbnail-container {
      @apply px-6;
    }
    
    .thumbnail {
      @apply w-40 h-32;
      min-width: 160px;
      min-height: 128px;
    }
    
    .thumbnail-image {
      @apply h-24;
    }
  }
  
  /* Large desktop styles */
  @media (min-width: 1280px) {
    .post-title {
      @apply text-4xl;
    }
    
    .post-description {
      @apply text-2xl;
    }
    
    .nav-arrow {
       @apply p-4;
       min-width: 64px;
       min-height: 64px;
    }
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .nav-arrow {
      @apply border-2 border-gray-800 dark:border-white;
    }
    

    
    .post-title,
    .post-description,
    .post-meta {
      text-shadow: 0 2px 4px rgba(0, 0, 0, 1);
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .main-post,
    .nav-arrow {
      transition: none !important;
    }
    
    .nav-arrow:hover {
      transform: none !important;
    }
  }
  
  /* Focus visible for keyboard navigation */
  .post-title-link:focus-visible,
  .nav-arrow:focus-visible,
  .thumbnail:focus-visible {
    @apply outline-none ring-2 ring-yellow-400 ring-offset-2;
  }
  
  /* Dark mode enhancements */
  @media (prefers-color-scheme: dark) {
    .nav-arrow {
      @apply bg-gray-800/95 hover:bg-gray-700 text-gray-200 border-gray-600/30;
    }
    
    .post-counter {
      @apply bg-gray-900/90 border-gray-600/30;
    }
  }
  
  /* Print styles */
  @media print {
    .featured-writings-rotator {
      @apply break-inside-avoid;
    }
    
    .nav-arrow,
    .post-counter,
    .thumbnail-container {
      @apply hidden;
    }
    
    .main-post-container {
      @apply shadow-none border border-gray-300;
    }
    
    .post-overlay {
      @apply bg-white text-black;
    }
    
    .post-title,
    .post-description,
    .post-meta {
      @apply text-black;
      text-shadow: none;
    }
  }
</style>

<script>
  class FeaturedWritingsRotator {
    private container: HTMLElement;
    private posts: Element[];
    private thumbnails: Element[];
    private currentIndex: number;
    private autoRotate: boolean;
    private rotationSpeed: number;
    private rotationInterval: number | null;
    private isPaused: boolean;
    private announcementElement: HTMLElement | null;
    
    constructor(container: HTMLElement) {
      this.container = container;
      this.posts = Array.from(container.querySelectorAll('.main-post'));
      this.thumbnails = Array.from(container.querySelectorAll('.thumbnail'));
      this.currentIndex = 0;
      this.autoRotate = container.dataset.autoRotate === 'true';
      this.rotationSpeed = parseInt(container.dataset.rotationSpeed || '6000');
      this.rotationInterval = null;
      this.isPaused = false;
      this.announcementElement = container.querySelector('.slide-announcement');
      
      this.init();
    }
    
    private init(): void {
      this.setupNavigation();
      this.setupThumbnails();
      this.setupKeyboardNavigation();
      this.setupAutoRotation();
      this.updateDisplay();
      this.announceCurrentSlide();
    }
    
    private setupNavigation(): void {
      const prevBtn = this.container.querySelector('.nav-prev') as HTMLButtonElement;
      const nextBtn = this.container.querySelector('.nav-next') as HTMLButtonElement;
      
      if (prevBtn) {
        prevBtn.addEventListener('click', () => this.previous());
        prevBtn.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.previous();
          }
        });
      }
      
      if (nextBtn) {
        nextBtn.addEventListener('click', () => this.next());
        nextBtn.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.next();
          }
        });
      }
    }
    
    private setupThumbnails(): void {
      this.thumbnails.forEach((thumbnail: Element, index: number) => {
        const btn = thumbnail as HTMLButtonElement;
        btn.addEventListener('click', () => this.goTo(index));
        btn.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.goTo(index);
          }
        });
      });
    }
    
    private setupKeyboardNavigation(): void {
      this.container.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          this.previous();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          this.next();
        } else if (e.key === 'Home') {
          e.preventDefault();
          this.goTo(0);
        } else if (e.key === 'End') {
          e.preventDefault();
          this.goTo(this.posts.length - 1);
        }
      });
    }
    
    private setupAutoRotation(): void {
      if (this.autoRotate && this.posts.length > 1) {
        this.startAutoRotation();
        
        // Pause auto-rotation on focus and hover
        this.container.addEventListener('focusin', () => this.pauseAutoRotation());
        this.container.addEventListener('focusout', () => this.resumeAutoRotation());
        this.container.addEventListener('mouseenter', () => this.pauseAutoRotation());
        this.container.addEventListener('mouseleave', () => this.resumeAutoRotation());
        
        // Pause on touch devices
        this.container.addEventListener('touchstart', () => this.pauseAutoRotation());
        this.container.addEventListener('touchend', () => this.resumeAutoRotation());
      }
    }
    
    private startAutoRotation(): void {
      if (this.rotationInterval || this.isPaused) return;
      
      this.rotationInterval = window.setInterval(() => {
        this.next();
      }, this.rotationSpeed);
    }
    
    private stopAutoRotation(): void {
      if (this.rotationInterval) {
        clearInterval(this.rotationInterval);
        this.rotationInterval = null;
      }
    }
    
    private pauseAutoRotation(): void {
      this.isPaused = true;
      this.stopAutoRotation();
    }
    
    private resumeAutoRotation(): void {
      this.isPaused = false;
      this.startAutoRotation();
    }
    
    private goTo(index: number): void {
      if (index < 0 || index >= this.posts.length) return;
      
      this.currentIndex = index;
      this.updateDisplay();
      this.announceCurrentSlide();
    }
    
    private next(): void {
      this.currentIndex = (this.currentIndex + 1) % this.posts.length;
      this.updateDisplay();
      this.announceCurrentSlide();
    }
    
    private previous(): void {
      this.currentIndex = this.currentIndex === 0 ? this.posts.length - 1 : this.currentIndex - 1;
      this.updateDisplay();
      this.announceCurrentSlide();
    }
    
    private updateDisplay(): void {
      // Update main posts
      this.posts.forEach((post: Element, index: number) => {
        const isActive = index === this.currentIndex;
        post.classList.toggle('active', isActive);
        post.setAttribute('aria-hidden', (!isActive).toString());
        post.setAttribute('tabindex', isActive ? '0' : '-1');
      });
      
      // Update thumbnails
      this.thumbnails.forEach((thumbnail: Element, index: number) => {
        const isActive = index === this.currentIndex;
        thumbnail.classList.toggle('active', isActive);
        thumbnail.setAttribute('aria-pressed', isActive.toString());
      });
      
      // Update counter
      const counter = this.container.querySelector('.post-counter');
      if (counter) {
        const currentIndexEl = counter.querySelector('.current-index');
        if (currentIndexEl) {
          currentIndexEl.textContent = String(this.currentIndex + 1);
          currentIndexEl.setAttribute('aria-current', 'true');
        }
      }
      
      // Update navigation button labels
      this.updateNavigationLabels();
    }
    
    private updateNavigationLabels(): void {
      const prevBtn = this.container.querySelector('.nav-prev') as HTMLButtonElement;
      const nextBtn = this.container.querySelector('.nav-next') as HTMLButtonElement;
      
      if (prevBtn) {
        const prevIndex = this.currentIndex === 0 ? this.posts.length - 1 : this.currentIndex - 1;
        const prevTitle = this.posts[prevIndex].querySelector('.post-title')?.textContent?.trim() || 'Previous post';
        prevBtn.setAttribute('aria-label', `Previous post (${prevTitle})`);
      }
      
      if (nextBtn) {
        const nextIndex = (this.currentIndex + 1) % this.posts.length;
        const nextTitle = this.posts[nextIndex].querySelector('.post-title')?.textContent?.trim() || 'Next post';
        nextBtn.setAttribute('aria-label', `Next post (${nextTitle})`);
      }
    }
    
    private announceCurrentSlide(): void {
      if (this.announcementElement) {
        const currentPost = this.posts[this.currentIndex];
        const title = currentPost.querySelector('.post-title')?.textContent?.trim() || 'Featured writing';
        this.announcementElement.textContent = `Featured writing ${this.currentIndex + 1} of ${this.posts.length}: ${title}`;
      }
    }
  }
  
  // Initialize all featured writings rotators on the page
  document.addEventListener('DOMContentLoaded', () => {
    const rotators = document.querySelectorAll('.featured-writings-rotator');
    rotators.forEach(rotator => new FeaturedWritingsRotator(rotator as HTMLElement));
  });
</script>
