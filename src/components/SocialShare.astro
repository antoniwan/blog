---
import { generateShareUrls } from '../utils/shareUtils';

interface Props {
  title: string;
  description?: string;
  url?: string;
  variant?: 'floating' | 'horizontal' | 'vertical' | 'button';
  className?: string;
}

const {
  title,
  description = '',
  url = '',
  variant = 'floating',
  className = ''
} = Astro.props;

// Get the current URL - prioritize passed URL, fallback to current page
const currentUrl = url || Astro.url.href;

// Generate share URLs using utility
const platforms = generateShareUrls(title, currentUrl, description);

// Debug: log the URL being used for sharing
console.log('SocialShare Debug:', {
  title,
  currentUrl,
  canonical: Astro.url.href,
  passedUrl: url
});
---

<!-- Floating Action Button (Mobile) -->
{variant === 'floating' && (
  <div class="fixed bottom-6 right-6 z-40 md:hidden">
    <button
      id="share-fab"
      class="flex items-center justify-center w-14 h-14 bg-[rgb(var(--color-accent))] text-white rounded-full shadow-lg hover:bg-[rgb(var(--color-accent-hover))] focus:outline-none focus:ring-2 focus:ring-[rgb(var(--color-accent))] focus:ring-offset-2 theme-transition"
      aria-label="Share this post"
    >
      <span class="text-xl">ðŸ“¤</span>
    </button>
    
    <!-- Share Menu -->
    <div
      id="share-menu"
      class="absolute bottom-16 right-0 hidden bg-[rgb(var(--color-bg))] border border-[rgb(var(--color-border))] rounded-lg shadow-lg p-2 min-w-[200px]"
    >
      <div class="space-y-1">
        {platforms.map(platform => (
          <button
            class={`w-full flex items-center gap-3 px-3 py-2 rounded-md text-left text-sm hover:bg-[rgb(var(--color-bg-alt))] theme-transition ${platform.color}`}
            data-platform={platform.name.toLowerCase()}
            data-url={platform.url}
            data-action={platform.action}
          >
            <span class="text-base">{platform.icon}</span>
            <span>{platform.name}</span>
          </button>
        ))}
      </div>
    </div>
  </div>
)}

<!-- Compact Share Button (Tablet) -->
{variant === 'horizontal' && (
  <div class="hidden md:block lg:hidden my-8">
    <div class="relative">
      <button
        id="horizontal-share-toggle"
        class="flex items-center gap-2 px-4 py-2 bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] hover:bg-[rgb(var(--color-bg-alt))]/80 theme-transition"
        aria-label="Share this post"
      >
        <span class="text-base">ðŸ“¤</span>
        <span class="text-sm font-medium">Share</span>
        <svg class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      
      <!-- Share Menu -->
      <div
        id="horizontal-share-menu"
        class="absolute top-full left-0 mt-2 hidden bg-[rgb(var(--color-bg))] border border-[rgb(var(--color-border))] rounded-lg shadow-lg p-2 min-w-[200px] z-10"
      >
        <div class="grid grid-cols-2 gap-1">
          {platforms.map(platform => (
            <button
              class={`flex items-center gap-2 px-3 py-2 rounded-md text-sm hover:bg-[rgb(var(--color-bg-alt))] theme-transition ${platform.color}`}
              data-platform={platform.name.toLowerCase()}
              data-url={platform.url}
              data-action={platform.action}
              aria-label={`Share on ${platform.name}`}
            >
              <span class="text-base">{platform.icon}</span>
              <span>{platform.name}</span>
            </button>
          ))}
        </div>
      </div>
    </div>
  </div>
)}

<!-- Compact Share Button (Desktop) -->
{variant === 'vertical' && (
  <div class="hidden lg:block">
    <div class="sticky top-8 space-y-3">
      <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
        Share
      </h3>
      <div class="relative">
        <button
          id="vertical-share-toggle"
          class="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left text-sm bg-[rgb(var(--color-bg-alt))] hover:bg-[rgb(var(--color-bg-alt))]/80 theme-transition"
          aria-label="Share this post"
        >
          <span class="text-base">ðŸ“¤</span>
          <span class="flex-1">Share this post</span>
          <svg class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>
        
        <!-- Share Menu -->
        <div
          id="vertical-share-menu"
          class="absolute top-full left-0 mt-2 hidden bg-[rgb(var(--color-bg))] border border-[rgb(var(--color-border))] rounded-lg shadow-lg p-2 min-w-[200px] z-10"
        >
          <div class="space-y-1">
            {platforms.map(platform => (
              <button
                class={`w-full flex items-center gap-3 px-3 py-2 rounded-md text-left text-sm hover:bg-[rgb(var(--color-bg-alt))] theme-transition ${platform.color}`}
                data-platform={platform.name.toLowerCase()}
                data-url={platform.url}
                data-action={platform.action}
                aria-label={`Share on ${platform.name}`}
              >
                <span class="text-base">{platform.icon}</span>
                <span>{platform.name}</span>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<!-- Simple Share Button -->
{variant === 'button' && (
  <button
    id="share-button"
    class={`inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-[rgb(var(--color-bg-alt))] text-[rgb(var(--color-text))] hover:bg-[rgb(var(--color-bg-alt))]/80 focus:outline-none focus:ring-2 focus:ring-[rgb(var(--color-accent))] theme-transition ${className}`}
    aria-label="Share this post"
  >
    <span class="text-base">ðŸ“¤</span>
    <span class="text-sm font-medium">Share</span>
  </button>
)}

<script>
  // Share functionality
  function initializeShare() {
    // Handle floating FAB
    const shareFab = document.getElementById('share-fab');
    const shareMenu = document.getElementById('share-menu');
    
    if (shareFab && shareMenu) {
      shareFab.addEventListener('click', () => {
        shareMenu.classList.toggle('hidden');
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!shareFab.contains(e.target as Node) && !shareMenu.contains(e.target as Node)) {
          shareMenu.classList.add('hidden');
        }
      });
    }
    
    // Handle horizontal share toggle
    const horizontalToggle = document.getElementById('horizontal-share-toggle');
    const horizontalMenu = document.getElementById('horizontal-share-menu');
    
    if (horizontalToggle && horizontalMenu) {
      horizontalToggle.addEventListener('click', () => {
        horizontalMenu.classList.toggle('hidden');
        const arrow = horizontalToggle.querySelector('svg');
        if (arrow) {
          arrow.style.transform = horizontalMenu.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
        }
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!horizontalToggle.contains(e.target as Node) && !horizontalMenu.contains(e.target as Node)) {
          horizontalMenu.classList.add('hidden');
          const arrow = horizontalToggle.querySelector('svg');
          if (arrow) {
            arrow.style.transform = 'rotate(0deg)';
          }
        }
      });
    }
    
    // Handle vertical share toggle
    const verticalToggle = document.getElementById('vertical-share-toggle');
    const verticalMenu = document.getElementById('vertical-share-menu');
    
    if (verticalToggle && verticalMenu) {
      verticalToggle.addEventListener('click', () => {
        verticalMenu.classList.toggle('hidden');
        const arrow = verticalToggle.querySelector('svg');
        if (arrow) {
          arrow.style.transform = verticalMenu.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
        }
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!verticalToggle.contains(e.target as Node) && !verticalMenu.contains(e.target as Node)) {
          verticalMenu.classList.add('hidden');
          const arrow = verticalToggle.querySelector('svg');
          if (arrow) {
            arrow.style.transform = 'rotate(0deg)';
          }
        }
      });
    }
    
    // Handle all share buttons
    const shareButtons = document.querySelectorAll('[data-platform]');
    
    shareButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        
        const platform = (button as HTMLElement).dataset.platform;
        const url = (button as HTMLElement).dataset.url;
        const action = (button as HTMLElement).dataset.action;
        
        if (action === 'copy') {
          await copyToClipboard(window.location.href);
          showToast('Link copied to clipboard!');
        } else if (url && url !== '#') {
          // Debug: log the share URL
          console.log(`Sharing on ${platform}:`, url);
          window.open(url, '_blank', 'noopener,noreferrer');
        }
        
        // Close all menus
        closeAllMenus();
      });
    });
    
    // Handle native share button
    const nativeShareButton = document.getElementById('share-button');
    if (nativeShareButton) {
      nativeShareButton.addEventListener('click', async () => {
        if (navigator.share) {
          try {
            await navigator.share({
              title: document.title,
              text: document.querySelector('meta[name="description"]')?.getAttribute('content') || '',
              url: window.location.href
            });
          } catch (err) {
            console.log('Share cancelled or failed');
          }
        } else {
          // Fallback: copy to clipboard
          await copyToClipboard(window.location.href);
          showToast('Link copied to clipboard!');
        }
      });
    }
  }
  
  function closeAllMenus() {
    const shareMenu = document.getElementById('share-menu');
    const horizontalMenu = document.getElementById('horizontal-share-menu');
    const verticalMenu = document.getElementById('vertical-share-menu');
    
    if (shareMenu) {
      shareMenu.classList.add('hidden');
    }
    if (horizontalMenu) {
      horizontalMenu.classList.add('hidden');
      const arrow = document.getElementById('horizontal-share-toggle')?.querySelector('svg');
      if (arrow) {
        arrow.style.transform = 'rotate(0deg)';
      }
    }
    if (verticalMenu) {
      verticalMenu.classList.add('hidden');
      const arrow = document.getElementById('vertical-share-toggle')?.querySelector('svg');
      if (arrow) {
        arrow.style.transform = 'rotate(0deg)';
      }
    }
  }
  
  async function copyToClipboard(text: string) {
    try {
      await navigator.clipboard.writeText(text);
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
    }
  }
  
  function showToast(message: string) {
    // Create toast notification
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-20 left-1/2 transform -translate-x-1/2 bg-[rgb(var(--color-bg))] border border-[rgb(var(--color-border))] text-[rgb(var(--color-text))] px-4 py-2 rounded-lg shadow-lg z-50 theme-transition';
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    // Remove after 3 seconds
    setTimeout(() => {
      toast.remove();
    }, 3000);
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeShare);
  } else {
    initializeShare();
  }
</script> 