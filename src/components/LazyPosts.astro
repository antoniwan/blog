---
import PostCard from './PostCard.astro';
import Container from './Container.astro';

interface Props {
	posts: any[];
	initialCount?: number;
	loadMoreCount?: number;
}

const { posts, initialCount = 6, loadMoreCount = 6 } = Astro.props;
---

<div class="lazy-posts-container">
	<div 
		class="posts-grid grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8" 
		id="posts-grid"
		data-total-posts={posts.length}
	>
		{posts.map((post, index) => (
			<div 
				class={`post-item ${index < initialCount ? 'visible' : 'hidden'}`}
				data-index={index}
			>
				<PostCard post={post} />
			</div>
		))}
	</div>
	
	{posts.length > initialCount && (
		<div class="load-more-container text-center mt-12" id="load-more-container">
			<div class="progress-indicator mb-4 text-sm text-[rgb(var(--color-text-muted))]" id="progress-indicator">
				Showing {initialCount} of {posts.length} posts
			</div>
			<button 
				class="load-more-btn bg-[rgb(var(--color-primary))] hover:bg-[rgb(var(--color-primary-hover))] text-white font-medium py-3 px-8 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-[rgb(var(--color-primary))] focus:ring-offset-2"
				id="load-more-btn"
				data-total-posts={posts.length}
				data-current-count={initialCount}
				data-load-count={loadMoreCount}
			>
				Load More Posts
			</button>
			<div class="loading-spinner hidden mt-4" id="loading-spinner">
				<div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-[rgb(var(--color-primary))]"></div>
				<span class="ml-2 text-[rgb(var(--color-text-muted))]">Loading...</span>
			</div>
		</div>
	)}
</div>

<script>
	class LazyPosts {
		private postsGrid: HTMLElement | null;
		private loadMoreBtn: HTMLButtonElement | null;
		private loadMoreContainer: HTMLElement | null;
		private loadingSpinner: HTMLElement | null;
		private progressIndicator: HTMLElement | null;
		private isLoading: boolean = false;

		constructor() {
			this.postsGrid = document.getElementById('posts-grid');
			this.loadMoreBtn = document.getElementById('load-more-btn') as HTMLButtonElement;
			this.loadMoreContainer = document.getElementById('load-more-container');
			this.loadingSpinner = document.getElementById('loading-spinner');
			this.progressIndicator = document.getElementById('progress-indicator');
			
			if (this.loadMoreBtn) {
				this.loadMoreBtn.addEventListener('click', () => this.loadMorePosts().catch(console.error));
			}
			
			// Initialize intersection observer for infinite scroll
			this.initInfiniteScroll();
		}
		
		initInfiniteScroll() {
			if (!this.loadMoreContainer) return;
			
			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting && !this.isLoading) {
						this.loadMorePosts().catch(console.error);
					}
				});
			}, {
				rootMargin: '100px'
			});
			
			observer.observe(this.loadMoreContainer);
		}
		
		async loadMorePosts() {
			if (this.isLoading || !this.loadMoreBtn || !this.loadMoreContainer) return;
			
			this.isLoading = true;
			this.showLoading();
			
			const currentCount = parseInt(this.loadMoreBtn.dataset.currentCount || '0');
			const loadCount = parseInt(this.loadMoreBtn.dataset.loadCount || '6');
			const totalPosts = parseInt(this.loadMoreBtn.dataset.totalPosts || '0');
			
			// Simulate loading delay for better UX
			await new Promise(resolve => setTimeout(resolve, 300));
			
			// Show the next batch of posts
			this.showNextPosts(currentCount, loadCount);
			
			// Update the current count
			const newCount = Math.min(currentCount + loadCount, totalPosts);
			this.loadMoreBtn.dataset.currentCount = newCount.toString();
			
			// Update progress indicator
			this.updateProgressIndicator(newCount, totalPosts);
			
			// Hide load more button if all posts are loaded
			if (newCount >= totalPosts) {
				this.loadMoreContainer.style.display = 'none';
			}
			
			this.hideLoading();
			this.isLoading = false;
		}
		
		showNextPosts(currentCount: number, loadCount: number) {
			if (!this.postsGrid) return;
			
			const postItems = this.postsGrid.querySelectorAll('.post-item');
			const endIndex = Math.min(currentCount + loadCount, postItems.length);
			
			// Show the next batch of posts
			for (let i = currentCount; i < endIndex; i++) {
				const postItem = postItems[i] as HTMLElement;
				if (postItem) {
					postItem.classList.remove('hidden');
					postItem.classList.add('visible', 'fade-in');
				}
			}
		}
		
		showLoading() {
			if (this.loadingSpinner) {
				this.loadingSpinner.classList.remove('hidden');
			}
			if (this.loadMoreBtn) {
				this.loadMoreBtn.disabled = true;
				this.loadMoreBtn.textContent = 'Loading...';
			}
		}
		
		hideLoading() {
			if (this.loadingSpinner) {
				this.loadingSpinner.classList.add('hidden');
			}
			if (this.loadMoreBtn) {
				this.loadMoreBtn.disabled = false;
				this.loadMoreBtn.textContent = 'Load More Posts';
			}
		}
		
		updateProgressIndicator(currentCount: number, totalCount: number) {
			if (this.progressIndicator) {
				this.progressIndicator.textContent = `Showing ${currentCount} of ${totalCount} posts`;
			}
		}
	}
	
	// Initialize when DOM is loaded
	document.addEventListener('DOMContentLoaded', () => {
		new LazyPosts();
	});
</script>

<style>
	.line-clamp-3 {
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
	
	.load-more-btn:disabled {
		opacity: 0.6;
		cursor: not-allowed;
	}
	
	/* Post item visibility */
	.post-item.hidden {
		display: none;
	}
	
	.post-item.visible {
		display: block;
	}
	
	/* Fade-in animation for newly shown posts */
	.post-item.fade-in {
		animation: fadeInUp 0.4s ease-out;
	}
	
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
	
	/* Stagger animation for multiple posts */
	.post-item.fade-in:nth-child(1) { animation-delay: 0ms; }
	.post-item.fade-in:nth-child(2) { animation-delay: 50ms; }
	.post-item.fade-in:nth-child(3) { animation-delay: 100ms; }
	.post-item.fade-in:nth-child(4) { animation-delay: 150ms; }
	.post-item.fade-in:nth-child(5) { animation-delay: 200ms; }
	.post-item.fade-in:nth-child(6) { animation-delay: 250ms; }
</style> 