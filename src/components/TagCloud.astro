---
interface Props {
	tags: Array<{
		tag: string;
		count: number;
		size?: number;
	}>;
	showCount?: boolean;
	className?: string;
}

const { tags, showCount = true, className = '' } = Astro.props;

// Generate subtle color variations based on tag name
const getTagColor = (tag: string) => {
	const colors = [
		'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800',
		'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800',
		'bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800',
		'bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800',
		'bg-pink-50 dark:bg-pink-900/20 border-pink-200 dark:border-pink-800',
		'bg-indigo-50 dark:bg-indigo-900/20 border-indigo-200 dark:border-indigo-800',
		'bg-teal-50 dark:bg-teal-900/20 border-teal-200 dark:border-teal-800',
		'bg-amber-50 dark:bg-amber-900/20 border-amber-200 dark:border-amber-800',
	];
	
	// Use tag name to consistently assign colors
	const hash = tag.split('').reduce((a, b) => {
		a = ((a << 5) - a) + b.charCodeAt(0);
		return a & a;
	}, 0);
	
	return colors[Math.abs(hash) % colors.length];
};
---

<div class={`flex flex-wrap gap-3 justify-center items-center ${className}`}>
	{tags.map(({ tag, count, size }) => (
		<a 
			href={`/tag/${tag}/`}
			class={`tag-cloud-item inline-block px-3 py-1.5 rounded-full border transition-all duration-200 cursor-pointer hover:scale-105 ${getTagColor(tag)}`}
			style={size ? `font-size: ${size}rem;` : ''}
			data-count={count}
			data-tag={tag}
		>
			<span class="font-medium text-gray-700 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white transition-colors">
				#{tag}
			</span>
			{showCount && (
				<span class="ml-1.5 text-xs text-gray-500 dark:text-gray-400 font-normal">
					{count}
				</span>
			)}
		</a>
	))}
</div>

<style>
	/* Tag cloud animations */
	.tag-cloud-item {
		transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Focus styles for accessibility */
	.tag-cloud-item:focus {
		outline: 2px solid rgb(var(--color-primary));
		outline-offset: 2px;
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		.tag-cloud-item {
			transition: none !important;
		}
	}

	/* Responsive adjustments */
	@media (max-width: 640px) {
		.tag-cloud-item {
			font-size: 0.875rem !important;
		}
	}
</style> 