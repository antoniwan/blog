---
interface Props {
	code: string;
	language?: string;
	showLineNumbers?: boolean;
	highlightLines?: number[];
}

const { code, language = 'plaintext', showLineNumbers = false, highlightLines = [] } = Astro.props;
---

<div class="code-block group relative rounded-lg overflow-hidden bg-gray-light/20 dark:bg-gray/20 transition-colors duration-300">
	<div class="flex items-center justify-between px-4 py-2 bg-gray-light/30 dark:bg-gray/30 border-b border-gray-light/40 dark:border-gray/40">
		<span class="text-sm font-mono text-gray dark:text-gray-light">{language}</span>
		<button
			class="copy-button p-2 text-gray dark:text-gray-light hover:text-primary dark:hover:text-primary-dark transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 focus:ring-offset-background dark:focus:ring-offset-gray-dark rounded-md"
			aria-label="Copy code"
			title="Copy code"
		>
			<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
			</svg>
		</button>
	</div>
	<pre class="p-4 overflow-x-auto">
		<code class={`language-${language} ${showLineNumbers ? 'line-numbers' : ''}`}>
			{code}
		</code>
	</pre>
</div>

<script>
	// Handle code copying
	const copyButton = document.querySelector('.copy-button');
	if (copyButton) {
		copyButton.addEventListener('click', async () => {
			const code = document.querySelector('code')?.textContent;
			if (code) {
				try {
					await navigator.clipboard.writeText(code);
					
					// Show success feedback
					copyButton.innerHTML = `
						<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-500 dark:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
						</svg>
					`;
					
					setTimeout(() => {
						copyButton.innerHTML = `
							<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
							</svg>
						`;
					}, 2000);
				} catch (err) {
					console.error('Failed to copy code:', err);
				}
			}
		});
	}
</script>

<style>
	/* Syntax highlighting */
	:global(.language-*) {
		color: var(--tw-color-text);
	}

	/* Line numbers */
	:global(.line-numbers) {
		counter-reset: line;
	}

	:global(.line-numbers code) {
		position: relative;
		padding-left: 3.8em;
	}

	:global(.line-numbers code > span) {
		position: relative;
	}

	:global(.line-numbers code > span::before) {
		content: counter(line);
		counter-increment: line;
		position: absolute;
		left: -3.8em;
		width: 3em;
		text-align: right;
		color: var(--tw-color-gray);
		user-select: none;
	}

	/* Highlighted lines */
	:global(.highlight-line) {
		background-color: var(--tw-color-primary)/0.1;
	}

	/* Dark mode syntax highlighting */
	:global(.dark .language-*) {
		color: var(--tw-color-text-dark);
	}

	:global(.dark .line-numbers code > span::before) {
		color: var(--tw-color-gray-light);
	}

	:global(.dark .highlight-line) {
		background-color: var(--tw-color-primary-dark)/0.1;
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		.copy-button {
			transition: none;
		}
	}
</style> 