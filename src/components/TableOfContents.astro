---
interface Props {
  items: {
    text: string;
    slug: string;
    depth: number;
  }[];
}

const { items } = Astro.props;
---

<nav class="toc" aria-label="Table of contents">
  <h2 class="text-lg font-semibold mb-4 text-text dark:text-text-dark">Table of Contents</h2>
  <ul class="space-y-2">
    {items.map((item) => (
      <li class={`pl-${(item.depth - 2) * 4}`}>
        <a
          href={`#${item.slug}`}
          class="text-sm text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors focus-ring"
        >
          {item.text}
        </a>
      </li>
    ))}
  </ul>
</nav>

<style>
  .toc {
    position: sticky;
    top: 2rem;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: var(--tw-color-background-alt);
    border: 1px solid var(--tw-color-border);
  }

  .toc::-webkit-scrollbar {
    width: 0.5rem;
  }

  .toc::-webkit-scrollbar-track {
    background: transparent;
  }

  .toc::-webkit-scrollbar-thumb {
    background-color: var(--tw-color-border);
    border-radius: 0.25rem;
  }

  .toc a {
    display: block;
    padding: 0.25rem 0;
    text-decoration: none;
  }

  .toc a:hover {
    text-decoration: underline;
  }

  /* Active state for current section */
  .toc a.active {
    color: var(--tw-color-primary-500);
    font-weight: 500;
  }

  /* Indentation for nested items */
  .toc li {
    margin-left: 0;
  }

  .toc li[class^="pl-"] {
    margin-left: 1rem;
  }
</style>

<script>
  // Highlight current section in TOC
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const id = entry.target.getAttribute('id');
      const tocLink = document.querySelector(`.toc a[href="#${id}"]`);
      
      if (entry.isIntersecting) {
        tocLink?.classList.add('active');
      } else {
        tocLink?.classList.remove('active');
      }
    });
  }, observerOptions);

  // Observe all headings
  document.querySelectorAll('h2, h3').forEach((heading) => {
    observer.observe(heading);
  });
</script> 