---
import { getCollection } from 'astro:content';

// Get all blog posts for search
const allPosts = await getCollection('blog');
const posts = allPosts
  .filter(post => !post.data.draft && post.data.published)
  .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

// Prepare search data
const searchData = posts.map(post => ({
  slug: post.id,
  title: post.data.title,
  description: post.data.description,
  category: post.data.category,
  tags: post.data.tags,
  heroImage: post.data.heroImage,
  url: `/p/${post.id}/`
}));
---

<div class="relative" id="search-container">
  <!-- Search Input -->
  <div class="relative">
    <input
      type="text"
      placeholder="Search posts..."
      id="search-input"
      class="w-full md:w-64 lg:w-80 px-4 py-2 pl-10 pr-4 text-sm bg-white dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:text-white placeholder-neutral-500 dark:placeholder-neutral-400 theme-transition"
      aria-label="Search posts"
    />
    
    <!-- Search Icon -->
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg class="h-4 w-4 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
      </svg>
    </div>
    
    <!-- Clear Button -->
    <button
      id="clear-search"
      class="absolute inset-y-0 right-0 pr-3 flex items-center text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-300 hidden"
      aria-label="Clear search"
    >
      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  </div>

  <!-- Search Results Dropdown -->
  <div
    id="search-results"
    class="absolute top-full left-0 right-0 mt-2 bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto hidden"
  >
    <!-- Loading State -->
    <div id="search-loading" class="p-4 text-center text-neutral-500 dark:text-neutral-400 hidden">
      <svg class="animate-spin h-5 w-5 mx-auto" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span class="ml-2">Searching...</span>
    </div>

    <!-- No Results -->
    <div id="no-results" class="p-4 text-center text-neutral-500 dark:text-neutral-400 hidden">
      <svg class="h-8 w-8 mx-auto mb-2 text-neutral-300 dark:text-neutral-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33"/>
      </svg>
      <p>No posts found for "<span id="search-query"></span>"</p>
    </div>

    <!-- Results List -->
    <div id="results-list" class="py-2 hidden">
      <!-- Results will be populated by JavaScript -->
    </div>


  </div>
</div>

<!-- Hidden data for search -->
<script id="search-posts-data" type="application/json" set:html={JSON.stringify(searchData)}></script>

<script>
  class SearchComponent {
    private query: string;
    private results: any[];
    private selectedIndex: number;
    private posts: any[];
    private isInitialized: boolean;
    private container: HTMLElement | null;
    private input: HTMLInputElement | null;
    private clearBtn: HTMLButtonElement | null;
    private resultsContainer: HTMLElement | null;
    private loadingEl: HTMLElement | null;
    private noResultsEl: HTMLElement | null;
    private resultsListEl: HTMLElement | null;
    private searchQueryEl: HTMLElement | null;

    constructor() {
      this.query = '';
      this.results = [];
      this.selectedIndex = -1;
      this.posts = [];
      this.isInitialized = false;
      this.container = null;
      this.input = null;
      this.clearBtn = null;
      this.resultsContainer = null;
      this.loadingEl = null;
      this.noResultsEl = null;
      this.resultsListEl = null;
      this.searchQueryEl = null;
      
      this.init();
    }
    
    init() {
      if (this.isInitialized) return;
      
      // Get DOM elements
      this.container = document.getElementById('search-container');
      this.input = document.getElementById('search-input') as HTMLInputElement;
      this.clearBtn = document.getElementById('clear-search') as HTMLButtonElement;
      this.resultsContainer = document.getElementById('search-results');
      this.loadingEl = document.getElementById('search-loading');
      this.noResultsEl = document.getElementById('no-results');
      this.resultsListEl = document.getElementById('results-list');
      this.searchQueryEl = document.getElementById('search-query');
      
      // Load posts data
      const dataEl = document.getElementById('search-posts-data');
      if (dataEl) {
        this.posts = JSON.parse(dataEl.textContent || '[]');
      }
      
      // Add event listeners
      this.input?.addEventListener('input', this.handleInput.bind(this));
      this.input?.addEventListener('focus', this.showResults.bind(this));
      this.input?.addEventListener('keydown', this.handleKeydown.bind(this));
      this.clearBtn?.addEventListener('click', this.clearSearch.bind(this));
      
      // Close results when clicking outside
      document.addEventListener('click', this.handleClickOutside.bind(this));
      
      this.isInitialized = true;
    }
    
    handleInput(e: Event) {
      const target = e.target as HTMLInputElement;
      this.query = target.value;
      this.updateClearButton();
      this.search();
    }
    
    handleKeydown(e: KeyboardEvent) {
      switch (e.key) {
        case 'Escape':
          this.hideResults();
          break;
        case 'ArrowDown':
          e.preventDefault();
          this.selectNext();
          break;
        case 'ArrowUp':
          e.preventDefault();
          this.selectPrevious();
          break;
        case 'Enter':
          e.preventDefault();
          this.selectCurrent();
          break;
      }
    }
    
    handleClickOutside(e: Event) {
      const target = e.target as HTMLElement;
      if (!this.container?.contains(target)) {
        this.hideResults();
      }
    }
    
    search() {
      if (this.query.length < 2) {
        this.results = [];
        this.hideResults();
        return;
      }
      
      this.showLoading();
      
      // Simulate search delay for better UX
      setTimeout(() => {
        const searchTerm = this.query.toLowerCase();
        const filtered = this.posts.filter(post => {
          const searchableText = `${post.title} ${post.description} ${post.tags?.join(' ') || ''}`.toLowerCase();
          return searchableText.includes(searchTerm);
        });
        
        this.results = filtered.slice(0, 8); // Limit to 8 results
        this.selectedIndex = -1;
        this.showResults();
        this.renderResults();
      }, 150);
    }
    
    selectNext() {
      if (this.selectedIndex < this.results.length - 1) {
        this.selectedIndex++;
      } else {
        this.selectedIndex = 0;
      }
      this.updateSelection();
    }
    
    selectPrevious() {
      if (this.selectedIndex > 0) {
        this.selectedIndex--;
      } else {
        this.selectedIndex = this.results.length - 1;
      }
      this.updateSelection();
    }
    
    selectCurrent() {
      if (this.selectedIndex >= 0 && this.results[this.selectedIndex]) {
        window.location.href = this.results[this.selectedIndex].url;
      }
    }
    
    showResults() {
      this.resultsContainer?.classList.remove('hidden');
    }
    
    hideResults() {
      this.resultsContainer?.classList.add('hidden');
      this.selectedIndex = -1;
    }
    
    showLoading() {
      this.loadingEl?.classList.remove('hidden');
      this.noResultsEl?.classList.add('hidden');
      this.resultsListEl?.classList.add('hidden');
    }
    
    renderResults() {
      this.loadingEl?.classList.add('hidden');
      
      if (this.results.length === 0) {
        this.noResultsEl?.classList.remove('hidden');
        this.resultsListEl?.classList.add('hidden');
        if (this.searchQueryEl) {
          this.searchQueryEl.textContent = this.query;
        }
        return;
      }
      
      this.noResultsEl?.classList.add('hidden');
      this.resultsListEl?.classList.remove('hidden');
      
      // Render results
      if (this.resultsListEl) {
        this.resultsListEl.innerHTML = this.results.map((result, index) => `
          <a
            href="${result.url}"
            class="search-result-item block px-4 py-3 hover:bg-neutral-50 dark:hover:bg-neutral-700/50 transition-colors duration-150"
            data-index="${index}"
          >
            <div class="flex items-start space-x-3">
              <div class="flex-shrink-0 w-12 h-12 bg-neutral-100 dark:bg-neutral-700 rounded-lg overflow-hidden">
                ${result.heroImage ? 
                  `<img src="${result.heroImage}" alt="${result.title}" class="w-full h-full object-cover" loading="lazy" />` :
                  `<div class="w-full h-full flex items-center justify-center text-neutral-400 dark:text-neutral-500">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"/>
                    </svg>
                  </div>`
                }
              </div>
              <div class="flex-1 min-w-0">
                <h3 class="text-sm font-medium text-neutral-900 dark:text-white line-clamp-2">${result.title}</h3>
                <p class="text-xs text-neutral-500 dark:text-neutral-400 mt-1 line-clamp-2">${result.description}</p>
                <div class="flex items-center mt-2 space-x-2">
                  ${result.category && result.category.length > 0 ? 
                    `<span class="text-xs bg-neutral-100 dark:bg-neutral-700 text-neutral-600 dark:text-neutral-300 px-2 py-1 rounded">${result.category[0]}</span>` : 
                    ''
                  }
                </div>
              </div>
            </div>
          </a>
        `).join('');
        
        // Add click listeners to results
        const resultItems = this.resultsListEl.querySelectorAll('.search-result-item');
        resultItems.forEach(item => {
          item.addEventListener('click', () => {
            this.hideResults();
          });
        });
      }
    }
    
    updateSelection() {
      const resultItems = this.resultsListEl?.querySelectorAll('.search-result-item');
      resultItems?.forEach((item, index) => {
        if (index === this.selectedIndex) {
          item.classList.add('bg-primary-50', 'dark:bg-primary-900/20');
        } else {
          item.classList.remove('bg-primary-50', 'dark:bg-primary-900/20');
        }
      });
    }
    
    updateClearButton() {
      if (this.query.length > 0) {
        this.clearBtn?.classList.remove('hidden');
      } else {
        this.clearBtn?.classList.add('hidden');
      }
    }
    
    clearSearch() {
      this.query = '';
      this.results = [];
      this.selectedIndex = -1;
      if (this.input) {
        this.input.value = '';
      }
      this.updateClearButton();
      this.hideResults();
      this.input?.focus();
    }
  }
  
  // Initialize search when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new SearchComponent());
  } else {
    new SearchComponent();
  }
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    #search-container {
      width: 100%;
    }
  }
</style> 