---
import { getCollection } from 'astro:content';

interface Props {
	class?: string;
	placeholder?: string;
}

const { class: className = '', placeholder = 'Search posts...' } = Astro.props;

// Get all blog posts for search
const posts = await getCollection('blog', ({ data }) => {
	return import.meta.env.PROD ? !data.draft : true;
});

// Prepare search data
const searchData = posts.map(post => ({
  slug: post.id,
  title: post.data.title,
  description: post.data.description,
  category: post.data.category,
  tags: post.data.tags,
  heroImage: post.data.heroImage,
  url: `/p/${post.id}/`
}));

// Generate unique ID for this search instance
const searchId = `search-${Math.random().toString(36).substr(2, 9)}`;

// Serialize search data for client-side use
const searchDataJson = JSON.stringify(searchData);

// Debug: Log search data info
console.log(`SearchBar: ${posts.length} posts available for search`);
---

<div class={`search-container relative ${className}`}>
	<!-- Search Input -->
	<div class="relative">
		<!-- Search Icon -->
		<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
			<svg class="h-5 w-5 text-[rgb(var(--color-text-muted))]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
			</svg>
		</div>
		
		<!-- Input Field -->
		<input
			type="text"
			id={searchId}
			class="w-full md:w-64 lg:w-80 px-4 py-2 pl-10 pr-10 md:pr-4 text-sm bg-[rgb(var(--color-bg))] border border-[rgb(var(--color-border))] rounded-lg focus:outline-none focus:ring-2 focus:ring-[rgb(var(--color-primary))] focus:border-transparent text-[rgb(var(--color-text))] placeholder-[rgb(var(--color-text-muted))] theme-transition"
			placeholder={placeholder}
			aria-label="Search posts"
		/>
		
		<!-- Clear Button -->
		<button
			id={`${searchId}-clear`}
			class="absolute inset-y-0 right-0 pr-3 flex items-center text-[rgb(var(--color-text-muted))] hover:text-[rgb(var(--color-primary))] hidden"
			aria-label="Clear search"
		>
			<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
			</svg>
		</button>
	</div>
	
	<!-- Search Results Dropdown -->
	<div id={`${searchId}-results`} class="absolute top-full left-0 right-0 mt-2 bg-[rgb(var(--color-bg))] border border-[rgb(var(--color-border))] rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto hidden">
		<!-- Loading State -->
		<div id={`${searchId}-loading`} class="p-4 text-center text-[rgb(var(--color-text-muted))] hidden">
			<svg class="animate-spin h-5 w-5 mx-auto" fill="none" viewBox="0 0 24 24">
				<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
				<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
			</svg>
			<p class="mt-2 text-sm">Searching...</p>
		</div>
		
		<!-- No Results State -->
		<div id={`${searchId}-no-results`} class="p-4 text-center text-[rgb(var(--color-text-muted))] hidden">
			<svg class="h-8 w-8 mx-auto mb-2 text-[rgb(var(--color-text-muted))]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
			</svg>
			<p class="text-sm">No posts found</p>
		</div>
		
		<!-- Results List -->
		<div id={`${searchId}-results-list`} class="py-2"></div>
	</div>
</div>

<script define:vars={{ searchDataJson }}>
	// Make search data globally available
	window.searchData = JSON.parse(searchDataJson);
</script>

<script>
	// Search functionality
	class SearchBar {
		private searchId: string;
		private input: HTMLInputElement | null;
		private results: HTMLElement | null;
		private resultsList: HTMLElement | null;
		private loading: HTMLElement | null;
		private noResults: HTMLElement | null;
		private clearBtn: HTMLButtonElement | null;
		private debounceTimer: ReturnType<typeof setTimeout> | null = null;
		private isSearching = false;

		constructor(searchId: string) {
			this.searchId = searchId;
			this.input = document.getElementById(searchId) as HTMLInputElement;
			this.results = document.getElementById(`${searchId}-results`) as HTMLElement;
			this.resultsList = document.getElementById(`${searchId}-results-list`) as HTMLElement;
			this.loading = document.getElementById(`${searchId}-loading`) as HTMLElement;
			this.noResults = document.getElementById(`${searchId}-no-results`) as HTMLElement;
			this.clearBtn = document.getElementById(`${searchId}-clear`) as HTMLButtonElement;
			
			this.init();
		}
		
		init() {
			if (!this.input) return;
			
			// Input event
			this.input.addEventListener('input', () => {
				this.handleInput();
			});
			
			// Focus events
			this.input?.addEventListener('focus', () => {
				if (this.input?.value.trim()) {
					this.showResults();
				}
			});
			
			// Clear button
			if (this.clearBtn) {
				this.clearBtn.addEventListener('click', () => {
					this.clearSearch();
				});
			}
			
			// Click outside to close
			document.addEventListener('click', (e) => {
				if (!this.input?.contains(e.target as Node) && !this.results?.contains(e.target as Node)) {
					this.hideResults();
				}
			});
			
			// Keyboard navigation
			this.input.addEventListener('keydown', (e) => {
				if (e.key === 'Escape') {
					this.hideResults();
					this.input?.blur();
				}
			});
		}
		
		handleInput() {
			const query = this.input?.value.trim() || '';
			
			// Show/hide clear button
			if (this.clearBtn) {
				this.clearBtn.classList.toggle('hidden', !query);
			}
			
			// Clear previous timer
			if (this.debounceTimer) {
				clearTimeout(this.debounceTimer);
			}
			
			// Debounce search
			this.debounceTimer = setTimeout(() => {
				if (query.length >= 2) {
					this.performSearch(query);
				} else {
					this.hideResults();
				}
			}, 300);
		}
		
		async performSearch(query: string) {
			if (this.isSearching) return;
			
			this.isSearching = true;
			this.showLoading();
			
			try {
				// Simulate search - replace with actual search implementation
				const results = await this.searchPosts(query);
				this.displayResults(results);
			} catch (error) {
				console.error('Search error:', error);
				this.showNoResults();
			} finally {
				this.isSearching = false;
			}
		}
		
		async searchPosts(query: string) {
			// Get the search data from the global variable
			const searchData = (window as any).searchData || [];
			
			console.log(`Searching for "${query}" with ${searchData.length} posts available`);
			
			if (!searchData || searchData.length === 0) {
				console.warn('No search data available');
				return [];
			}
			
			const normalizedQuery = query.toLowerCase().trim();
			
			// Perform search across title, description, category, and tags
			const results = searchData.filter((post: any) => {
				const titleMatch = post.title?.toLowerCase().includes(normalizedQuery);
				const descriptionMatch = post.description?.toLowerCase().includes(normalizedQuery);
				const categoryMatch = post.category?.some((cat: string) => 
					cat.toLowerCase().includes(normalizedQuery)
				);
				const tagsMatch = post.tags?.some((tag: string) => 
					tag.toLowerCase().includes(normalizedQuery)
				);
				
				return titleMatch || descriptionMatch || categoryMatch || tagsMatch;
			});
			
			// Sort results by relevance (title matches first, then description, etc.)
			const sortedResults = results.sort((a: any, b: any) => {
				const aTitleMatch = a.title?.toLowerCase().includes(normalizedQuery);
				const bTitleMatch = b.title?.toLowerCase().includes(normalizedQuery);
				
				// Title matches get priority
				if (aTitleMatch && !bTitleMatch) return -1;
				if (!aTitleMatch && bTitleMatch) return 1;
				
				// If both or neither have title matches, sort by title length (shorter = more relevant)
				return a.title.length - b.title.length;
			});
			
			// Return top 10 results
			return sortedResults.slice(0, 10).map((post: any) => ({
				title: post.title,
				description: post.description,
				url: post.url,
				image: post.heroImage,
				category: post.category
			}));
		}
		
		displayResults(results: any[]) {
			if (!this.resultsList) return;
			
			this.hideLoading();
			this.hideNoResults();
			
			if (results.length === 0) {
				this.showNoResults();
				return;
			}
			
			this.resultsList.innerHTML = results.map(result => `
				<a
					href="${result.url}"
					class="search-result-item block px-4 py-3 hover:bg-[rgb(var(--color-bg-alt))] theme-transition duration-150"
				>
					<div class="flex items-start gap-3">
						<div class="flex-shrink-0 w-12 h-12 bg-[rgb(var(--color-bg-alt))] rounded-lg overflow-hidden">
							${result.image ? 
								`<img src="${result.image}" alt="" class="w-full h-full object-cover">` :
								`<div class="w-full h-full flex items-center justify-center text-[rgb(var(--color-text-muted))]">
									<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
									</svg>
								</div>`
							}
						</div>
						<div class="flex-1 min-w-0">
							<h3 class="text-sm font-medium text-[rgb(var(--color-text))] line-clamp-2">${result.title}</h3>
							<p class="text-xs text-[rgb(var(--color-text-muted))] mt-1 line-clamp-2">${result.description}</p>
							${result.category ? 
								`<span class="text-xs bg-[rgb(var(--color-bg-alt))] text-[rgb(var(--color-text-muted))] px-2 py-1 rounded mt-2 inline-block">${result.category[0]}</span>` :
								''
							}
						</div>
					</div>
				</a>
			`).join('');
			
			this.showResults();
		}
		
		showResults() {
			if (this.results) {
				this.results.classList.remove('hidden');
			}
		}
		
		hideResults() {
			if (this.results) {
				this.results.classList.add('hidden');
			}
		}
		
		showLoading() {
			if (this.loading) this.loading.classList.remove('hidden');
			if (this.noResults) this.noResults.classList.add('hidden');
			if (this.resultsList) this.resultsList.innerHTML = '';
			this.showResults();
		}
		
		hideLoading() {
			if (this.loading) this.loading.classList.add('hidden');
		}
		
		showNoResults() {
			if (this.noResults) this.noResults.classList.remove('hidden');
			if (this.loading) this.loading.classList.add('hidden');
			if (this.resultsList) this.resultsList.innerHTML = '';
			this.showResults();
		}
		
		hideNoResults() {
			if (this.noResults) this.noResults.classList.add('hidden');
		}
		
		clearSearch() {
			if (this.input) {
				this.input.value = '';
				this.input.focus();
			}
			this.hideResults();
			if (this.clearBtn) {
				this.clearBtn.classList.add('hidden');
			}
		}
	}
	
	// Initialize search bars
	document.addEventListener('DOMContentLoaded', () => {
		const searchInputs = document.querySelectorAll('[id^="search-"]');
		searchInputs.forEach(input => {
			const searchId = input.id;
			new SearchBar(searchId);
		});
	});
</script>

<style>
	/* Search result item hover effects */
	.search-result-item {
		transition: background-color 0.2s ease;
	}
	
	.search-result-item:hover {
		background-color: rgb(var(--color-bg-alt));
	}
	
	/* Focus styles */
	.search-result-item:focus {
		outline: 2px solid rgb(var(--color-primary));
		outline-offset: -2px;
	}
	
	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		.search-result-item {
			transition: none !important;
		}
	}
</style> 