---
import { mainNavigation } from '../data/navigation';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<button
  type="button"
  class:list={[
    'inline-flex items-center justify-center p-sm rounded-lg text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 hover:bg-background-alt dark:hover:bg-background-alt-dark transition-colors',
    className
  ]}
  aria-label="Open menu"
  id="mobile-menu-button"
>
  <svg
    class="h-6 w-6"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M4 6h16M4 12h16M4 18h16"
    />
  </svg>
</button>

<div
  id="mobile-menu"
  class="fixed inset-0 z-50 hidden bg-background/95 dark:bg-background-dark/95 backdrop-blur-sm"
>
  <div class="flex min-h-screen flex-col">
    <div class="flex items-center justify-between p-lg">
      <h2 class="text-lg font-semibold">Menu</h2>
      <button
        type="button"
        class="inline-flex items-center justify-center p-sm rounded-lg text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 hover:bg-background-alt dark:hover:bg-background-alt-dark transition-colors"
        aria-label="Close menu"
      >
        <svg
          class="h-6 w-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>
    
    <nav class="flex-1 space-y-sm p-lg">
      {mainNavigation.map((item) => (
        <div class="space-y-sm">
          <a
            href={item.href}
            class="block text-lg text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
            class:list={[
              { 'text-primary-500 dark:text-primary-400': Astro.url.pathname === item.href }
            ]}
          >
            {item.label}
          </a>
          
          {item.dropdown && (
            <div class="pl-lg space-y-sm">
              <div class="text-sm font-medium text-neutral-500 dark:text-neutral-400">
                {item.dropdown.label}
              </div>
              {item.dropdown.items.map((dropdownItem) => (
                <a
                  href={dropdownItem.href}
                  class="block text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
                >
                  {dropdownItem.icon && (
                    <span class="mr-sm">{dropdownItem.icon}</span>
                  )}
                  {dropdownItem.label}
                </a>
              ))}
            </div>
          )}
        </div>
      ))}
    </nav>
  </div>
</div>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const closeButton = mobileMenu?.querySelector('button[aria-label="Close menu"]');
  
  function toggleMenu() {
    mobileMenu?.classList.toggle('hidden');
    document.body.classList.toggle('overflow-hidden');
  }
  
  mobileMenuButton?.addEventListener('click', toggleMenu);
  closeButton?.addEventListener('click', toggleMenu);
  
  // Close menu when clicking outside
  mobileMenu?.addEventListener('click', (e) => {
    if (e.target === mobileMenu) {
      toggleMenu();
    }
  });
  
  // Close menu when pressing Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !mobileMenu?.classList.contains('hidden')) {
      toggleMenu();
    }
  });
</script>

<style>
  /* Hamburger animation */
  #mobile-menu-button[aria-expanded="true"] span:nth-child(1) {
    @apply translate-y-[3px] rotate-45;
  }
  
  #mobile-menu-button[aria-expanded="true"] span:nth-child(2) {
    @apply opacity-0;
  }
  
  #mobile-menu-button[aria-expanded="true"] span:nth-child(3) {
    @apply -translate-y-[3px] -rotate-45;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    #mobile-menu,
    #mobile-menu-overlay,
    #mobile-menu-button span {
      @apply transition-none;
    }
  }
</style> 