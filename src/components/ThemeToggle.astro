---
---

<button
	class="theme-toggle group flex items-center justify-center w-10 h-10 p-2 bg-transparent border-none rounded-full cursor-pointer transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 focus:ring-offset-background dark:focus:ring-offset-gray-dark text-text hover:text-primary active:scale-95"
	aria-label="Switch to dark mode"
	title="Switch to dark mode"
>
	<span class="text-lg leading-none transform transition-all duration-300 group-hover:scale-110" aria-hidden="true">🌙</span>
</button>

<script>
	const theme = {
		light: {
			label: 'Switch to dark mode',
			icon: '🌙'
		},
		dark: {
			label: 'Switch to light mode',
			icon: '☀️'
		}
	};

	// Get current theme from localStorage or system preference
	const getCurrentTheme = () => {
		const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
		if (savedTheme) return savedTheme;
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};

	// Set theme with smooth transition
	const setTheme = (theme: 'light' | 'dark') => {
		document.documentElement.classList.add('theme-transition');
		document.documentElement.classList.toggle('dark', theme === 'dark');
		localStorage.setItem('theme', theme);
		
		// Remove transition class after animation
		setTimeout(() => {
			document.documentElement.classList.remove('theme-transition');
		}, 300);
	};

	// Initialize theme
	const initTheme = () => {
		const currentTheme = getCurrentTheme();
		setTheme(currentTheme);
	};

	// Handle theme toggle with animation
	const handleThemeToggle = () => {
		const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
		const newTheme = currentTheme === 'light' ? 'dark' : 'light';
		setTheme(newTheme);
		
		// Update button attributes with animation
		const button = document.querySelector('.theme-toggle');
		if (button) {
			const newThemeData = theme[newTheme];
			button.setAttribute('aria-label', newThemeData.label);
			button.setAttribute('title', newThemeData.label);
			const icon = button.querySelector('span');
			if (icon) {
				// Add rotation and scale animation
				icon.style.transform = 'rotate(180deg) scale(0.8)';
				setTimeout(() => {
					icon.textContent = newThemeData.icon;
					icon.style.transform = 'rotate(0deg) scale(1)';
				}, 150);
			}
		}
	};

	// Initialize theme on load
	initTheme();

	// Add event listener for theme toggle
	document.addEventListener('DOMContentLoaded', () => {
		const themeToggle = document.querySelector('.theme-toggle');
		if (themeToggle) {
			themeToggle.addEventListener('click', handleThemeToggle);
			
			// Add keyboard navigation support
			themeToggle.addEventListener('keydown', (event) => {
				if ((event as KeyboardEvent).key === 'Enter' || (event as KeyboardEvent).key === ' ') {
					event.preventDefault();
					handleThemeToggle();
				}
			});
		}
	});
</script>

<style>
	/* Add smooth theme transition */
	.theme-transition {
		transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1),
		            color 0.3s cubic-bezier(0.4, 0, 0.2, 1),
		            border-color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Add reduced motion support */
	@media (prefers-reduced-motion: reduce) {
		.theme-transition {
			transition: none;
		}
		
		.theme-toggle span {
			transition: none;
		}
	}
</style> 