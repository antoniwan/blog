---
const theme = typeof document !== 'undefined' 
	? document.documentElement.classList.contains('dark') 
		? 'dark' 
		: 'light' 
	: 'light';
---

<button
	type="button"
	class="inline-flex items-center justify-center p-2 rounded-md text-text dark:text-text-dark hover:text-primary-500 dark:hover:text-primary-400 hover:bg-background-alt dark:hover:bg-background-alt-dark focus-ring transition-colors"
	aria-label="Toggle theme"
>
	<span class="text-base dark:hidden" aria-hidden="true">‚òÄÔ∏è</span>
	<span class="text-base hidden dark:block" aria-hidden="true">üåô</span>
</button>

<script>
	const theme = (() => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme') || 'light';
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark';
		}
		return 'light';
	})();

	if (theme === 'light') {
		document.documentElement.classList.remove('dark');
	} else {
		document.documentElement.classList.add('dark');
	}

	window.localStorage.setItem('theme', theme);

	const handleToggleClick = () => {
		const element = document.documentElement;
		element.classList.toggle('dark');

		const isDark = element.classList.contains('dark');
		localStorage.setItem('theme', isDark ? 'dark' : 'light');
	};

	document.querySelector('button[aria-label="Toggle theme"]')?.addEventListener('click', handleToggleClick);
</script>

<style>
	/* Smooth transitions for dark mode */
	button {
		transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),
					color 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		button {
			transition: none !important;
		}
	}
</style> 