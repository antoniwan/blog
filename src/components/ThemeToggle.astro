---
const theme = typeof document !== 'undefined' 
	? document.documentElement.classList.contains('dark') 
		? 'dark' 
		: 'light' 
	: 'light';
---

<button
	class="group relative inline-flex items-center justify-center p-2 rounded-lg bg-background-alt text-text hover:text-primary-500 dark:hover:text-primary-400 focus:outline-none focus:ring-2 focus:ring-primary-500/50 focus:ring-offset-2 focus:ring-offset-background dark:focus:ring-offset-background transition-all duration-300 hover:scale-110 active:scale-95"
	aria-label="Toggle theme"
	role="switch"
	aria-checked={theme === 'dark'}
>
	<span class="sr-only">Toggle theme</span>
	<span class="relative w-5 h-5">
		<!-- Sun icon -->
		<svg
			class="absolute inset-0 w-full h-full transform transition-transform duration-500 ease-spring dark:scale-0"
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			aria-hidden="true"
		>
			<circle cx="12" cy="12" r="5" />
			<line x1="12" y1="1" x2="12" y2="3" />
			<line x1="12" y1="21" x2="12" y2="23" />
			<line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
			<line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
			<line x1="1" y1="12" x2="3" y2="12" />
			<line x1="21" y1="12" x2="23" y2="12" />
			<line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
			<line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
		</svg>
		<!-- Moon icon -->
		<svg
			class="absolute inset-0 w-full h-full transform transition-transform duration-500 ease-spring scale-0 dark:scale-100"
			xmlns="http://www.w3.org/2000/svg"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			aria-hidden="true"
		>
			<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
		</svg>
	</span>
</button>

<script>
	// Handle theme toggle
	const themeToggle = document.querySelector('button[aria-label="Toggle theme"]');
	const html = document.documentElement;

	if (themeToggle) {
		// Function to set theme
		const setTheme = (theme: 'light' | 'dark') => {
			if (theme === 'dark') {
				html.classList.add('dark');
				themeToggle.setAttribute('aria-checked', 'true');
				document.documentElement.style.colorScheme = 'dark';
			} else {
				html.classList.remove('dark');
				themeToggle.setAttribute('aria-checked', 'false');
				document.documentElement.style.colorScheme = 'light';
			}
			localStorage.setItem('theme', theme);
		};

		// Handle theme toggle click
		themeToggle.addEventListener('click', () => {
			const isDark = html.classList.contains('dark');
			setTheme(isDark ? 'light' : 'dark');
		});

		// Check for saved theme preference or system preference
		const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
		const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

		if (savedTheme) {
			setTheme(savedTheme);
		} else if (systemPrefersDark) {
			setTheme('dark');
		}

		// Listen for system theme changes
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
			if (!localStorage.getItem('theme')) {
				setTheme(e.matches ? 'dark' : 'light');
			}
		});
	}
</script>

<style>
	/* Custom spring animation for theme toggle */
	.ease-spring {
		transition-timing-function: cubic-bezier(0.34, 1.56, 0.64, 1);
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		button,
		svg {
			@apply transition-none;
		}
	}

	/* Focus styles */
	button:focus-visible {
		@apply outline-none ring-2 ring-primary-500/50 ring-offset-2 ring-offset-background;
	}

	/* Hover and active states */
	button:hover {
		@apply bg-background-elevated;
	}

	button:active {
		@apply bg-background-alt;
	}
</style> 