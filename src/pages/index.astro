---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import PostCard from '../components/PostCard.astro';
import { categories } from '../data/categories';

// Get all blog posts and sort by date
const posts = (await getCollection('blog'))
	.filter((post) => !post.data.draft)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Group by translationGroup (or fallback to id)
const grouped: Record<string, CollectionEntry<'blog'>[]> = {};
for (const post of posts) {
	const group = post.data.translationGroup || post.id;
	if (!grouped[group]) grouped[group] = [];
	grouped[group].push(post);
}
const groupedPosts: CollectionEntry<'blog'>[][] = Object.values(grouped);

// Get unique tags and languages
const allTags = new Set<string>();
const allLanguages = new Set<string>();
posts.forEach(post => {
	post.data.tags?.forEach(tag => allTags.add(tag));
	post.data.language?.forEach(lang => allLanguages.add(lang));
});

// Count posts per category
const categoryCounts = new Map<string, number>();
posts.forEach(post => {
	post.data.category?.forEach(cat => {
		categoryCounts.set(cat, (categoryCounts.get(cat) || 0) + 1);
	});
});

// Sort categories by post count
const sortedCategories = [...categories].sort((a, b) => {
	const countA = categoryCounts.get(a.id) || 0;
	const countB = categoryCounts.get(b.id) || 0;
	return countB - countA;
});

// Get language flag emoji
const getLanguageFlag = (lang: string) => {
	const flags: Record<string, string> = {
		'en': 'ðŸ‡ºðŸ‡¸',
		'es': 'ðŸ‡µðŸ‡·'
	};
	return flags[lang] || lang.toUpperCase();
};
---

<BaseLayout title="Home">
	<main class="max-w-5xl mx-auto px-4 md:px-8 py-12">
		<header class="text-center mb-16">
			<h1 class="text-4xl md:text-5xl lg:text-6xl font-bold mb-6 text-text dark:text-text-dark leading-tight tracking-tight">Welcome to the<br />Strong Vault</h1>
			<p class="text-xl md:text-2xl text-neutral-600 dark:text-neutral-400 leading-relaxed max-w-3xl mx-auto">Notes on strength, clarity, ritual, and creation â€” one builder's journey through code, craft, and self-mastery.</p>
		</header>

		{/* Main Content */}
		<section class="grid gap-8 md:gap-12 mb-16" aria-label="Latest posts">
			{groupedPosts.map((translations) => {
				const main = translations[0];
				return (
					<PostCard 
						post={main} 
						translations={translations.map(t => ({
							id: t.id,
							language: t.data.language[0]
						}))}
					/>
				);
			})}
		</section>

		{/* Filtering Sections */}
		<div class="space-y-6">
			{/* Categories Section */}
			<div class="bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 p-4">
				<h2 class="text-base font-semibold mb-3 text-gray-900 dark:text-gray-100">Categories</h2>
				<nav class="flex flex-wrap gap-2">
					{sortedCategories.map(category => {
						const postCount = categoryCounts.get(category.id) || 0;
						return (
							<a 
								href={`/category/${category.id}/`}
								class="flex items-center gap-1.5 text-sm px-3 py-1.5 rounded-full bg-zinc-100 dark:bg-zinc-800 text-gray-700 dark:text-gray-300 hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors"
							>
								<span class="text-base">{category.icon}</span>
								<span>{category.name}</span>
								<span class="text-xs px-1.5 py-0.5 rounded-full bg-zinc-200 dark:bg-zinc-700 text-gray-600 dark:text-gray-400">{postCount}</span>
							</a>
						);
					})}
				</nav>
			</div>

			{/* Tags Section */}
			<div class="bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 p-4">
				<h2 class="text-base font-semibold mb-3 text-gray-900 dark:text-gray-100">Tags</h2>
				<div class="flex flex-wrap gap-2">
					{[...allTags].map(tag => (
						<a 
							href={`/tag/${tag}/`}
							class="text-xs px-2 py-1 rounded-full bg-zinc-100 dark:bg-zinc-800 font-medium text-gray-700 dark:text-gray-300 hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors"
						>
							{tag}
						</a>
					))}
				</div>
			</div>

			{/* Languages Section */}
			<div class="bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 p-4">
				<h2 class="text-base font-semibold mb-3 text-gray-900 dark:text-gray-100">Languages</h2>
				<div class="flex flex-wrap gap-2">
					{[...allLanguages].map(lang => (
						<span class="text-xs px-2 py-1 rounded-full bg-zinc-100 dark:bg-zinc-800 font-medium text-gray-700 dark:text-gray-300">
							{getLanguageFlag(lang)} {lang.toUpperCase()}
						</span>
					))}
				</div>
			</div>
		</div>
	</main>
</BaseLayout>

<style>
	/* Smooth transitions for dark mode */
	main {
		transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),
					color 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		main {
			transition: none !important;
		}
	}

	.hero-section {
		text-align: center;
		margin-bottom: var(--space-8);
		max-width: var(--content-width);
		margin-left: auto;
		margin-right: auto;
	}

	.hero-section h1 {
		font-size: var(--font-size-4xl);
		line-height: 1.2;
		margin: 0 0 var(--space-6) 0;
		font-weight: 800;
		letter-spacing: -0.025em;
		color: var(--text-color);
	}

	.subtitle {
		font-size: var(--font-size-xl);
		line-height: 1.6;
		color: var(--neutral-600);
		margin: 0;
	}

	.posts-grid {
		display: grid;
		gap: var(--space-8);
		max-width: var(--content-width);
		margin: 0 auto;
	}

	.post-card {
		background: var(--background-color);
		border-radius: 12px;
		padding: 2rem;
		transition: all 0.3s ease;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
		border: 1px solid var(--border-color);
	}

	.post-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
		border-color: var(--primary-500);
	}

	.post-title-link {
		text-decoration: none;
		color: inherit;
		display: block;
		margin-bottom: 1rem;
	}

	.post-title-link:hover .post-title {
		color: var(--primary-500);
	}

	.post-meta {
		display: flex;
		align-items: center;
		gap: 1.5rem;
		margin-bottom: 1.25rem;
		font-size: 0.9375rem;
		color: var(--neutral-600);
		flex-wrap: wrap;
	}

	.post-title {
		font-size: 1.75rem;
		margin: 0 0 1rem 0;
		color: var(--text-color);
		line-height: 1.3;
		font-weight: 700;
	}

	.post-excerpt {
		margin: 0 0 1.5rem 0;
		color: var(--neutral-600);
		line-height: 1.6;
		font-size: 1.125rem;
	}

	.post-tags {
		display: flex;
		gap: 0.75rem;
		flex-wrap: wrap;
		margin-top: 1.5rem;
		padding-top: 1rem;
		border-top: 1px solid var(--border-color);
	}

	.tag {
		background: var(--neutral-100);
		color: var(--neutral-700);
		padding: 0.375rem 0.75rem;
		border-radius: 6px;
		font-size: 0.875rem;
		font-weight: 500;
		letter-spacing: 0.01em;
		text-transform: lowercase;
	}

	.category-badge {
		background: var(--primary-500);
		color: white;
		padding: 0.5rem 1rem;
		border-radius: 8px;
		font-size: 0.875rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		text-decoration: none;
		transition: all 0.2s ease;
		box-shadow: 0 2px 4px rgba(var(--primary-500), 0.3);
	}

	.category-badge:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 8px rgba(var(--primary-500), 0.4);
		filter: brightness(1.1);
	}

	.language-badge {
		background: var(--background-color);
		color: var(--neutral-600);
		padding: 0.375rem 0.75rem;
		border-radius: 6px;
		font-size: 0.875rem;
		font-weight: 500;
		border: 1px solid var(--border-color);
	}

	@media (max-width: 768px) {
		.hero-section h1 {
			font-size: var(--font-size-3xl);
		}

		.subtitle {
			font-size: var(--font-size-lg);
		}
	}
</style>
