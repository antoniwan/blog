---
import HomeLayout from '../layouts/HomeLayout.astro';
import PostCard from '../components/PostCard.astro';
import LayoutContainer from '../components/LayoutContainer.astro';
import { getCollection } from 'astro:content';
import { categories } from '../data/categories';

// Get all posts
const posts = await getCollection('blog', ({ data }) => {
	return import.meta.env.PROD ? !data.draft : true;
});

// Sort posts by date
const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get post counts by category
const postCounts = categories.reduce((acc, category) => {
	acc[category.id] = posts.filter(post => post.data.category?.includes(category.id)).length;
	return acc;
}, {} as Record<string, number>);

// Get post counts by tag
const tagCounts = posts.reduce((acc, post) => {
	post.data.tags?.forEach(tag => {
		acc[tag] = (acc[tag] || 0) + 1;
	});
	return acc;
}, {} as Record<string, number>);
---

<HomeLayout
	title="Welcome to the Strong Vault"
	description="Notes on strength, clarity, ritual, and creation ‚Äî one builder's journey through code, craft, and self-mastery."
	container="default"
	spacing="comfortable"
>
	<LayoutContainer type="section" padding="section">
		<h1 class="text-4xl md:text-5xl font-bold text-text dark:text-text-dark leading-tight tracking-tight mb-6">
			Welcome to the Strong Vault
		</h1>
		<p class="text-xl md:text-2xl text-neutral-600 dark:text-neutral-400 leading-relaxed">
			Notes on strength, clarity, ritual, and creation ‚Äî one builder's journey through code, craft, and self-mastery.
		</p>
	</LayoutContainer>

	{/* Latest Posts Section */}
	<LayoutContainer type="section" padding="none" hasBorder>
		<div class="space-y-block">
			{sortedPosts.map(post => (
				<PostCard post={post} />
			))}
		</div>
	</LayoutContainer>


	{/* Popular Tags Section */}
	<LayoutContainer type="section" padding="section">
		<h2 class="text-2xl md:text-3xl font-bold text-text dark:text-text-dark">Popular Tags</h2>
		<div class="flex flex-wrap gap-2">
			{Object.entries(tagCounts)
				.sort(([, a], [, b]) => b - a)
				.slice(0, 10)
				.map(([tag, count]) => (
					<a
						href={`/tag/${tag}/`}
						class="flex items-center gap-1.5 text-sm px-3 py-1.5 rounded-full bg-zinc-100 dark:bg-zinc-800 text-gray-700 dark:text-gray-300 hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors"
					>
						<span>üè∑Ô∏è</span>
						<span>{tag}</span>
						<span class="text-xs px-1.5 py-0.5 rounded-full bg-zinc-200 dark:bg-zinc-700 text-gray-600 dark:text-gray-400">{count}</span>
					</a>
				))}
		</div>
	</LayoutContainer>
</HomeLayout>

<style>
	/* Smooth transitions for dark mode */
	main {
		transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1),
					color 150ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		main {
			transition: none !important;
		}
	}

	@media (max-width: 768px) {
		.hero-section h1 {
			font-size: var(--font-size-3xl);
		}

		.subtitle {
			font-size: var(--font-size-lg);
		}
	}
</style>
