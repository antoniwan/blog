---
import BaseLayout from '../layouts/BaseLayout.astro';
import Container from '../components/Container.astro';
import { getAllTags } from '../data/tags';

// Get existing tags to check for matches
const existingTags = getAllTags();
---

<BaseLayout
  title="404 - Page Not Found"
  description="The page you're looking for doesn't exist or has been moved."
>
  <Container>
    <Container maxWidth="container" padding="none">
      <div class="text-center py-12">
        <div class="max-w-4xl mx-auto">
          <div class="mb-8">
            <div class="text-6xl font-bold text-[rgb(var(--color-primary))] mb-4">
              404
            </div>
            <h1 class="text-heading text-[rgb(var(--color-text))] mb-4">
              Page Not Found
            </h1>
            <p class="text-body-large text-[rgb(var(--color-text-muted))] leading-relaxed mb-8">
              Oops! The page you're looking for doesn't exist or has been moved.
            </p>
          </div>

          <!-- Quote container that will be populated by JavaScript -->
          <div id="quote-container" class="mb-12">
            <div class="relative p-8 sm:p-12 bg-gradient-to-br from-[rgb(var(--color-primary)/0.15)] via-[rgb(var(--color-accent)/0.1)] to-[rgb(var(--color-highlight)/0.05)] border-2 border-[rgb(var(--color-primary)/0.3)] rounded-2xl shadow-xl">
              <div class="absolute inset-0 bg-gradient-to-br from-[rgb(var(--color-primary)/0.05)] to-transparent rounded-2xl"></div>
              
              <div class="relative z-10">
                <!-- Loading state -->
                <div id="quote-loading" class="text-center space-y-6">
                  <div class="flex flex-col items-center space-y-4">
                    <!-- Loading spinner -->
                    <div class="relative">
                      <div class="w-12 h-12 border-4 border-[rgb(var(--color-primary)/0.2)] border-t-[rgb(var(--color-primary))] rounded-full animate-spin"></div>
                      <div class="absolute inset-0 w-12 h-12 border-4 border-transparent border-t-[rgb(var(--color-accent)/0.3)] rounded-full animate-spin" style="animation-direction: reverse; animation-duration: 1.5s;"></div>
                    </div>
                    
                    <!-- Loading text -->
                    <div class="space-y-2">
                      <p class="text-lg font-medium text-[rgb(var(--color-text))]">Finding wisdom for you...</p>
                      <p class="text-sm text-[rgb(var(--color-text-muted))]">Loading a thoughtful quote</p>
                    </div>
                    
                    <!-- Skeleton content -->
                    <div class="w-full max-w-2xl space-y-4">
                      <div class="animate-pulse space-y-3">
                        <div class="h-6 bg-[rgb(var(--color-text-muted)/0.15)] rounded-full"></div>
                        <div class="h-6 bg-[rgb(var(--color-text-muted)/0.15)] rounded-full w-5/6 mx-auto"></div>
                        <div class="h-6 bg-[rgb(var(--color-text-muted)/0.15)] rounded-full w-4/6 mx-auto"></div>
                      </div>
                      <div class="flex justify-center space-x-2">
                        <div class="h-4 w-16 bg-[rgb(var(--color-text-muted)/0.15)] rounded-full animate-pulse"></div>
                        <div class="h-4 w-20 bg-[rgb(var(--color-text-muted)/0.15)] rounded-full animate-pulse"></div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Error state -->
                <div id="quote-error" class="hidden text-center space-y-6">
                  <div class="flex flex-col items-center space-y-4">
                    <!-- Error icon -->
                    <div class="w-16 h-16 bg-[rgb(var(--color-accent)/0.1)] rounded-full flex items-center justify-center">
                      <svg class="w-8 h-8 text-[rgb(var(--color-accent))]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                      </svg>
                    </div>
                    
                    <!-- Error message -->
                    <div class="space-y-2">
                      <h3 class="text-xl font-semibold text-[rgb(var(--color-text))]">Unable to load quote</h3>
                      <p class="text-[rgb(var(--color-text-muted))]">We couldn't fetch a quote right now, but here's some wisdom to consider:</p>
                    </div>
                    
                    <!-- Fallback quote -->
                    <div class="max-w-2xl">
                      <blockquote class="text-center space-y-4">
                        <p class="text-2xl sm:text-3xl font-medium text-[rgb(var(--color-text))] italic leading-relaxed">
                          "The obstacle is the way."
                        </p>
                        <footer>
                          <cite class="text-lg font-semibold text-[rgb(var(--color-primary))] not-italic">
                            — Marcus Aurelius
                          </cite>
                        </footer>
                      </blockquote>
                    </div>
                    
                    <!-- Retry button -->
                    <button 
                      id="retry-button" 
                      class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-[rgb(var(--color-accent))] bg-[rgb(var(--color-accent)/0.1)] border border-[rgb(var(--color-accent)/0.2)] rounded-lg hover:bg-[rgb(var(--color-accent)/0.15)] focus:outline-none focus:ring-2 focus:ring-[rgb(var(--color-accent))] focus:ring-offset-2 transition-all duration-200"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                      Try Again
                    </button>
                  </div>
                </div>
                
                <!-- Quote content (hidden initially) -->
                <div id="quote-content" class="hidden">
                  <blockquote class="text-center space-y-6">
                    <div class="relative">
                      <div class="absolute -top-6 -left-6 text-8xl text-[rgb(var(--color-primary)/0.2)] font-serif leading-none">
                        "
                      </div>
                      <p id="quote-text" class="text-3xl sm:text-4xl md:text-5xl font-bold text-[rgb(var(--color-text))] leading-tight italic px-8">
                      </p>
                      <div class="absolute -bottom-6 -right-6 text-8xl text-[rgb(var(--color-primary)/0.2)] font-serif leading-none">
                        "
                      </div>
                    </div>
                    
                    <footer class="space-y-2">
                      <cite id="quote-author" class="text-2xl sm:text-3xl font-black text-[rgb(var(--color-primary))] not-italic tracking-tight">
                      </cite>
                      <div id="quote-work" class="text-lg sm:text-xl text-[rgb(var(--color-text-muted))] font-medium">
                      </div>
                    </footer>
                  </blockquote>
                  
                  <div id="quote-themes" class="mt-8 pt-8 border-t-2 border-[rgb(var(--color-primary)/0.2)]">
                    <div class="flex flex-wrap justify-center gap-3">
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="space-y-4">
            <a
              href="/"
              class="inline-flex items-center justify-center px-6 py-3 text-base font-medium rounded-md text-white bg-[rgb(var(--color-accent))] hover:bg-[rgb(var(--color-accent-hover))] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[rgb(var(--color-accent))] theme-transition leading-relaxed"
            >
              Return Home
            </a>
            
            <div class="text-base text-body-muted leading-relaxed">
              <a href="/category" class="link">
                Browse Categories
              </a>
              <span class="mx-2">•</span>
              <a href="/tag" class="link">
                Explore Tags
              </a>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </Container>
</BaseLayout>

<script define:vars={{ existingTags }}>
  // Client-side script to fetch and display the quote
  
  let retryCount = 0;
  const maxRetries = 3;
  const retryDelay = 2000; // 2 seconds
  
  function showLoading() {
    const loadingElement = document.getElementById('quote-loading');
    const contentElement = document.getElementById('quote-content');
    const errorElement = document.getElementById('quote-error');
    
    if (loadingElement) loadingElement.classList.remove('hidden');
    if (contentElement) contentElement.classList.add('hidden');
    if (errorElement) errorElement.classList.add('hidden');
  }
  
  function showError() {
    const loadingElement = document.getElementById('quote-loading');
    const contentElement = document.getElementById('quote-content');
    const errorElement = document.getElementById('quote-error');
    
    if (loadingElement) loadingElement.classList.add('hidden');
    if (contentElement) contentElement.classList.add('hidden');
    if (errorElement) errorElement.classList.remove('hidden');
  }
  
  function showContent() {
    const loadingElement = document.getElementById('quote-loading');
    const contentElement = document.getElementById('quote-content');
    const errorElement = document.getElementById('quote-error');
    
    if (loadingElement) loadingElement.classList.add('hidden');
    if (contentElement) contentElement.classList.remove('hidden');
    if (errorElement) errorElement.classList.add('hidden');
  }
  
  async function fetchAndDisplayQuote() {
    try {
      showLoading();
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      const response = await fetch('/api/quotes', {
        signal: controller.signal,
        headers: {
          'Accept': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      const quote = data.quote;
      
      if (!quote || !quote.text || !quote.author) {
        throw new Error('Invalid quote data received');
      }
      
      // Populate quote text and author
      const textElement = document.getElementById('quote-text');
      const authorElement = document.getElementById('quote-author');
      if (textElement && authorElement) {
        textElement.textContent = quote.text;
        authorElement.textContent = `— ${quote.author}`;
      }
      
      // Populate work and book info
      const workElement = document.getElementById('quote-work');
      if (workElement) {
        if (quote.work) {
          workElement.textContent = quote.book ? `${quote.work}, ${quote.book}` : quote.work;
        } else {
          workElement.style.display = 'none';
        }
      }
      
      // Populate themes
      const themesElement = document.getElementById('quote-themes');
      const themesContainer = themesElement?.querySelector('.flex');
      if (themesContainer && quote.themes && quote.themes.length > 0) {
        quote.themes.forEach(theme => {
          const isExistingTag = existingTags.includes(theme);
          const themeElement = document.createElement(isExistingTag ? 'a' : 'span');
          
          themeElement.className = `inline-flex items-center gap-2 text-base sm:text-lg px-4 py-2 rounded-full font-bold transition-all duration-200 ${
            isExistingTag 
              ? 'bg-[rgb(var(--color-primary))] text-white hover:bg-[rgb(var(--color-primary-hover))] hover:scale-105 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-[rgb(var(--color-primary))] focus:ring-offset-2' 
              : 'bg-[rgb(var(--color-accent))]/20 border-2 border-[rgb(var(--color-accent))]/30 text-[rgb(var(--color-accent))]'
          }`;
          
          if (isExistingTag && themeElement.tagName === 'A') {
            themeElement.href = `/tag/${theme}/`;
          }
          
          themeElement.innerHTML = `
            <span aria-hidden="true">🏷️</span>
            <span>#${theme}</span>
          `;
          
          themesContainer.appendChild(themeElement);
        });
      } else if (themesElement) {
        themesElement.style.display = 'none';
      }
      
      showContent();
      retryCount = 0; // Reset retry count on success
      
    } catch (error) {
      console.error('Failed to fetch quote:', error);
      retryCount++;
      
      if (retryCount < maxRetries) {
        // Auto-retry with exponential backoff
        const delay = retryDelay * Math.pow(2, retryCount - 1);
        console.log(`Retrying in ${delay}ms... (attempt ${retryCount}/${maxRetries})`);
        setTimeout(fetchAndDisplayQuote, delay);
      } else {
        // Show error state after max retries
        showError();
      }
    }
  }
  
  // Set up retry button
  function setupRetryButton() {
    const retryButton = document.getElementById('retry-button');
    if (retryButton) {
      retryButton.addEventListener('click', () => {
        retryCount = 0; // Reset retry count
        fetchAndDisplayQuote();
      });
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      fetchAndDisplayQuote();
      setupRetryButton();
    });
  } else {
    fetchAndDisplayQuote();
    setupRetryButton();
  }
</script> 