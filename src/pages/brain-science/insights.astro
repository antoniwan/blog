---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Container from '../../components/Container.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { getCollection } from 'astro:content';
import { categories } from '../../data/categories';
import { getTagWeight, MASLOW_CATEGORIES } from '../../data/tags';
import { format } from 'date-fns';
import { generateDynamicInsights } from '../../utils/insightGenerator';

// Get all published posts
const posts = await getCollection('blog', ({ data }) => {
	return import.meta.env.PROD ? !data.draft && data.published : true;
});

// Sort posts by date
const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Content analysis
const contentAnalysis = posts.map(post => {
	const content = post.body || '';
	const wordCount = content.split(/\s+/).length;
	const paragraphCount = content.split('\n\n').length;
	const sentenceCount = content.split(/[.!?]+/).length - 1;
	
	// Calculate emotional intensity (simple proxy based on exclamation marks and emotional words)
	const exclamationCount = (content.match(/!/g) || []).length;
	const emotionalWords = ['love', 'hate', 'fear', 'joy', 'sadness', 'anger', 'peace', 'anxiety', 'hope', 'despair', 'gratitude', 'frustration', 'excited', 'worried', 'confused', 'inspired', 'overwhelmed', 'content', 'restless', 'fulfilled'];
	const emotionalWordCount = emotionalWords.reduce((count, word) => {
		const regex = new RegExp(`\\b${word}\\b`, 'gi');
		return count + (content.match(regex) || []).length;
	}, 0);
	
	const emotionalIntensity = exclamationCount + emotionalWordCount;
	
	// Calculate vulnerability indicators
	const vulnerabilityWords = ['struggle', 'difficult', 'challenge', 'pain', 'hurt', 'broken', 'healing', 'recovery', 'vulnerable', 'afraid', 'scared', 'nervous', 'uncertain', 'doubt', 'question', 'wonder', 'maybe', 'perhaps', 'sometimes', 'often'];
	const vulnerabilityCount = vulnerabilityWords.reduce((count, word) => {
		const regex = new RegExp(`\\b${word}\\b`, 'gi');
		return count + (content.match(regex) || []).length;
	}, 0);
	
	// Calculate confidence indicators
	const confidenceWords = ['know', 'believe', 'certain', 'sure', 'confident', 'clear', 'understand', 'realize', 'discover', 'learn', 'grow', 'improve', 'better', 'stronger', 'wiser', 'experience', 'practice', 'master', 'achieve', 'succeed'];
	const confidenceCount = confidenceWords.reduce((count, word) => {
		const regex = new RegExp(`\\b${word}\\b`, 'gi');
		return count + (content.match(regex) || []).length;
	}, 0);
	
	return {
		title: post.data.title,
		slug: post.id,
		date: post.data.pubDate,
		wordCount,
		paragraphCount,
		sentenceCount,
		emotionalIntensity,
		vulnerabilityScore: vulnerabilityCount,
		confidenceScore: confidenceCount,
		readingTime: post.data.readingTime || Math.ceil(wordCount / 200),
		tags: post.data.tags || [],
		categories: post.data.category || []
	};
});

// Most emotionally intense posts
const emotionalPosts = contentAnalysis
	.sort((a, b) => b.emotionalIntensity - a.emotionalIntensity)
	.slice(0, 10);

// Most vulnerable posts
const vulnerablePosts = contentAnalysis
	.sort((a, b) => b.vulnerabilityScore - a.vulnerabilityScore)
	.slice(0, 10);

// Most confident posts
const confidentPosts = contentAnalysis
	.sort((a, b) => b.confidenceScore - a.confidenceScore)
	.slice(0, 10);

// Creative energy analysis (posts with most words as proxy for creative energy)
const creativeEnergyPosts = contentAnalysis
	.sort((a, b) => b.wordCount - a.wordCount)
	.slice(0, 10);

// Personal growth indicators
const growthIndicators = posts.filter(post => {
	const tags = post.data.tags || [];
	const title = post.data.title.toLowerCase();
	const content = post.body || '';
	
	// Look for growth-related indicators
	const growthTags = ['personal-growth', 'transformation', 'healing', 'self-improvement', 'learning', 'consciousness', 'mindfulness', 'awareness'];
	const growthKeywords = ['growth', 'change', 'transform', 'learn', 'evolve', 'improve', 'heal', 'discover', 'realize', 'understand', 'accept', 'forgive', 'let go', 'move forward', 'new perspective'];
	
	const hasGrowthTags = growthTags.some(tag => tags.includes(tag));
	const hasGrowthKeywords = growthKeywords.some(keyword => 
		title.includes(keyword) || content.toLowerCase().includes(keyword)
	);
	
	return hasGrowthTags || hasGrowthKeywords;
}).map(post => ({
	title: post.data.title,
	slug: post.id,
	date: post.data.pubDate,
	wordCount: (post.body || '').split(/\s+/).length,
	tags: post.data.tags || [],
	reason: 'growth-related'
}));

// Knowledge area expansion
const knowledgeAreas = MASLOW_CATEGORIES.map(category => {
	const categoryPosts = posts.filter(post => 
		post.data.tags?.some(tag => category.tags.includes(tag))
	);
	
	const earlyPosts = categoryPosts.filter(post => {
		const postIndex = sortedPosts.findIndex(p => p.id === post.id);
		return postIndex >= sortedPosts.length * 0.7; // Last 30% of posts
	});
	
	const recentPosts = categoryPosts.filter(post => {
		const postIndex = sortedPosts.findIndex(p => p.id === post.id);
		return postIndex < sortedPosts.length * 0.3; // First 30% of posts
	});
	
	return {
		...category,
		totalPosts: categoryPosts.length,
		earlyPosts: earlyPosts.length,
		recentPosts: recentPosts.length,
		expansion: recentPosts.length - earlyPosts.length,
		expansionRate: earlyPosts.length > 0 ? ((recentPosts.length - earlyPosts.length) / earlyPosts.length) * 100 : recentPosts.length > 0 ? 100 : 0
	};
}).filter(area => area.totalPosts > 0);

// Writing voice evolution
const voiceEvolution = contentAnalysis
	.sort((a, b) => a.date.valueOf() - b.date.valueOf())
	.map((post, index) => ({
		...post,
		period: index < contentAnalysis.length / 3 ? 'Early' : index < (contentAnalysis.length * 2) / 3 ? 'Middle' : 'Recent',
		voiceMaturity: post.wordCount + (post.emotionalIntensity * 10) + (post.paragraphCount * 5)
	}));

const voicePeriods = voiceEvolution.reduce((acc, post) => {
	const period = post.period;
	if (!acc[period]) {
		acc[period] = [];
	}
	acc[period].push(post);
	return acc;
}, {} as Record<string, typeof voiceEvolution>);

const voiceStats = Object.entries(voicePeriods).map(([period, posts]) => ({
	period,
	avgWordCount: Math.round(posts.reduce((sum, post) => sum + post.wordCount, 0) / posts.length),
	avgEmotionalIntensity: Math.round(posts.reduce((sum, post) => sum + post.emotionalIntensity, 0) / posts.length),
	avgVulnerabilityScore: Math.round(posts.reduce((sum, post) => sum + post.vulnerabilityScore, 0) / posts.length),
	avgConfidenceScore: Math.round(posts.reduce((sum, post) => sum + post.confidenceScore, 0) / posts.length),
	avgVoiceMaturity: Math.round(posts.reduce((sum, post) => sum + post.voiceMaturity, 0) / posts.length),
	postCount: posts.length
}));

// Personal discoveries
const personalDiscoveries = [
	{
		insight: "Writing serves as emotional processing",
		evidence: `${emotionalPosts.length} highly emotional posts`,
		impact: "High",
		reflection: "What emotions do you find yourself processing most through writing?"
	},
	{
		insight: "Growth-focused content dominates your thinking",
		evidence: `${growthIndicators.length} growth-related posts`,
		impact: "High",
		reflection: "How has your understanding of personal growth evolved over time?"
	},
	{
		insight: "Creative energy varies significantly",
		evidence: `${creativeEnergyPosts[0]?.wordCount} words in longest post vs ${creativeEnergyPosts[creativeEnergyPosts.length - 1]?.wordCount} in shortest`,
		impact: "Medium",
		reflection: "What conditions help you access your deepest creative energy?"
	},
	{
		insight: "Knowledge areas are expanding",
		evidence: `${knowledgeAreas.filter(area => area.expansionRate > 0).length} areas growing vs ${knowledgeAreas.filter(area => area.expansionRate < 0).length} declining`,
		impact: "High",
		reflection: "Which new areas of knowledge are you most excited to explore?"
	}
];

// Emotional processing patterns
const emotionalPatterns = {
	totalEmotionalPosts: emotionalPosts.length,
	totalVulnerablePosts: vulnerablePosts.length,
	totalConfidentPosts: confidentPosts.length,
	avgEmotionalIntensity: Math.round(contentAnalysis.reduce((sum, post) => sum + post.emotionalIntensity, 0) / contentAnalysis.length),
	avgVulnerabilityScore: Math.round(contentAnalysis.reduce((sum, post) => sum + post.vulnerabilityScore, 0) / contentAnalysis.length),
	avgConfidenceScore: Math.round(contentAnalysis.reduce((sum, post) => sum + post.confidenceScore, 0) / contentAnalysis.length)
};

// Generate dynamic insights
const insightData = {
	totalPosts: posts.length,
	totalWords: posts.reduce((sum, post) => sum + (post.body || '').split(/\s+/).length, 0),
	avgWordsPerPost: Math.round(posts.reduce((sum, post) => sum + (post.body || '').split(/\s+/).length, 0) / posts.length),
	topTags: Object.entries(posts.reduce((acc, post) => {
		post.data.tags?.forEach(tag => {
			acc[tag] = (acc[tag] || 0) + 1;
		});
		return acc;
	}, {} as Record<string, number>))
		.sort(([,a], [,b]) => b - a)
		.slice(0, 5)
		.map(([tag, count]) => ({ tag, count })),
	emotionalPosts: emotionalPosts.length,
	growthPosts: growthIndicators.length,
	complexityTrend: 'stable' as const, // Not calculated for insights
	productivityTrend: 'stable' as const, // Not calculated for insights
	knowledgeAreas: knowledgeAreas.map(area => ({
		title: area.title,
		postCount: area.totalPosts,
		trend: area.expansionRate > 0 ? 'growing' as const : area.expansionRate < 0 ? 'declining' as const : 'stable' as const
	})),
	writingStreaks: [],
	drySpells: []
};

const { insights, summary } = generateDynamicInsights(insightData, 'insights');
---

<BaseLayout
	title="Emotional Processing Analytics - Brain Science"
	description="Quantitative analysis of emotional patterns, vulnerability indicators, and confidence metrics in writing. Data-driven insights into emotional processing."
	path="/brain-science/insights"
	structuredDataType="website"
>
	<Container>
		<Container maxWidth="container" padding="none">
			{/* Breadcrumbs */}
			<div class="mb-6 hidden md:block">
				<Breadcrumbs 
					items={[
						{ label: "Home", href: "/" },
						{ label: "Brain Science", href: "/brain-science" },
						{ label: "Personal Insights" }
					]} 
				/>
			</div>

			<div class="py-6 md:py-8 lg:py-12">
				{/* Header */}
				<div class="mb-8 md:mb-12">
					<h1 class="text-display text-[rgb(var(--color-text))] mb-4 md:mb-6" transition:name="page-title">
						💡 <span class="highlight-accent">Emotional Processing Analytics</span>
					</h1>
					<p class="text-body-large text-[rgb(var(--color-text-muted))] leading-relaxed" transition:name="page-description">
						Quantitative analysis of emotional patterns, vulnerability indicators, and confidence metrics in writing. 
						Data-driven insights into emotional processing and psychological patterns.
					</p>
				</div>

			{/* Emotional Processing Overview */}
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-6 border border-[rgb(var(--color-border))]">
					<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Posts with high emotional intensity (exclamation marks and emotional keywords)">{emotionalPatterns.totalEmotionalPosts}</div>
					<div class="text-sm text-[rgb(var(--color-text-muted))]">Emotional Writings</div>
					<div class="text-xs text-purple-500 mt-1">💜 Heart Processing</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-6 border border-[rgb(var(--color-border))]">
					<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Posts with high vulnerability indicators (struggle, challenge, pain, etc.)">{emotionalPatterns.totalVulnerablePosts}</div>
					<div class="text-sm text-[rgb(var(--color-text-muted))]">Vulnerable Writings</div>
					<div class="text-xs text-pink-500 mt-1">🫂 Raw Honesty</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-6 border border-[rgb(var(--color-border))]">
					<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Posts with high confidence indicators (know, believe, certain, etc.)">{emotionalPatterns.totalConfidentPosts}</div>
					<div class="text-sm text-[rgb(var(--color-text-muted))]">Confident Writings</div>
					<div class="text-xs text-green-500 mt-1">💪 Inner Strength</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-6 border border-[rgb(var(--color-border))]">
					<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Posts focused on personal growth, transformation, or self-improvement">{growthIndicators.length}</div>
					<div class="text-sm text-[rgb(var(--color-text-muted))]">Growth Writings</div>
					<div class="text-xs text-blue-500 mt-1">🌱 Evolution</div>
				</div>
			</div>

			{/* Personal Discoveries with Reflection Prompts */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">🔍 Key Discoveries About Yourself</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					{personalDiscoveries.map((discovery, index) => (
						<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center gap-3 mb-3">
								<div class="text-lg font-bold text-[rgb(var(--color-accent))]">#{index + 1}</div>
								<span class={`text-xs px-2 py-1 rounded ${
									discovery.impact === 'High' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' :
									discovery.impact === 'Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
									'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400'
								}`}>
									{discovery.impact} Impact
								</span>
							</div>
							<div class="text-sm font-medium text-[rgb(var(--color-text))] mb-2">
								{discovery.insight}
							</div>
							<div class="text-xs text-[rgb(var(--color-text-muted))] mb-3">
								{discovery.evidence}
							</div>
							<div class="text-xs text-[rgb(var(--color-accent))] font-medium">
								💭 {discovery.reflection}
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Emotional Processing Deep Dive */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">💜 Your Emotional Processing Patterns</h3>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
					<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg text-center">
						<div class="text-2xl font-bold text-purple-500 mb-2">{emotionalPatterns.avgEmotionalIntensity}</div>
						<div class="text-sm text-[rgb(var(--color-text-muted))]">Avg Emotional Intensity</div>
						<div class="text-xs text-purple-600 dark:text-purple-400 mt-1">How deeply you feel</div>
					</div>
					<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg text-center">
						<div class="text-2xl font-bold text-pink-500 mb-2">{emotionalPatterns.avgVulnerabilityScore}</div>
						<div class="text-sm text-[rgb(var(--color-text-muted))]">Avg Vulnerability Score</div>
						<div class="text-xs text-pink-600 dark:text-pink-400 mt-1">How open you are</div>
					</div>
					<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg text-center">
						<div class="text-2xl font-bold text-green-500 mb-2">{emotionalPatterns.avgConfidenceScore}</div>
						<div class="text-sm text-[rgb(var(--color-text-muted))]">Avg Confidence Score</div>
						<div class="text-xs text-green-600 dark:text-green-400 mt-1">How sure you feel</div>
					</div>
				</div>
				
				{/* Reflection Questions */}
				<div class="bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg p-6 border border-purple-500/20">
					<h4 class="text-md font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
						<span class="text-purple-500">🤔</span>
						Reflect on Your Emotional Patterns
					</h4>
					<div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-[rgb(var(--color-text-muted))]">
						<div>
							<p class="mb-2">• When do you feel most emotionally intense?</p>
							<p class="mb-2">• What makes you feel vulnerable in your writing?</p>
							<p class="mb-2">• How does your confidence fluctuate over time?</p>
						</div>
						<div>
							<p class="mb-2">• What emotions do you process most through writing?</p>
							<p class="mb-2">• How has your emotional expression evolved?</p>
							<p class="mb-2">• What patterns do you notice in your emotional cycles?</p>
						</div>
					</div>
				</div>
			</div>

			{/* Most Emotionally Intense Posts */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">💜 Your Most Emotional Writings</h3>
				<div class="space-y-4">
					{emotionalPosts.map((post, index) => (
						<div class="flex items-center justify-between p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center gap-4">
								<div class={`text-lg font-bold ${
									index === 0 ? 'text-purple-500' : 
									index === 1 ? 'text-pink-500' : 
									index === 2 ? 'text-indigo-500' : 'text-[rgb(var(--color-accent))]'
								}`}>
									{index === 0 ? '💜' : index === 1 ? '💖' : index === 2 ? '💙' : `#${index + 1}`}
								</div>
								<div>
									<div class="text-sm font-medium text-[rgb(var(--color-text))]">
										{post.title}
									</div>
									<div class="text-xs text-[rgb(var(--color-text-muted))]">
										{format(post.date, 'MMM d, yyyy')} • {post.wordCount} words
									</div>
								</div>
							</div>
							<div class="text-right">
								<div class="text-sm font-medium text-[rgb(var(--color-text))]" title={`Emotional intensity score: ${post.emotionalIntensity} (exclamation marks + emotional keywords)`}>{post.emotionalIntensity}</div>
								<div class="text-xs text-[rgb(var(--color-text-muted))]">emotional intensity</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Most Vulnerable Posts */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">🫂 Your Most Vulnerable Writings</h3>
				<div class="space-y-4">
					{vulnerablePosts.map((post, index) => (
						<div class="flex items-center justify-between p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center gap-4">
								<div class={`text-lg font-bold ${
									index === 0 ? 'text-pink-500' : 
									index === 1 ? 'text-rose-500' : 
									index === 2 ? 'text-red-500' : 'text-[rgb(var(--color-accent))]'
								}`}>
									{index === 0 ? '🫂' : index === 1 ? '💔' : index === 2 ? '🩹' : `#${index + 1}`}
								</div>
								<div>
									<div class="text-sm font-medium text-[rgb(var(--color-text))]">
										{post.title}
									</div>
									<div class="text-xs text-[rgb(var(--color-text-muted))]">
										{format(post.date, 'MMM d, yyyy')} • {post.wordCount} words
									</div>
								</div>
							</div>
							<div class="text-right">
								<div class="text-sm font-medium text-[rgb(var(--color-text))]" title={`Vulnerability score: ${post.vulnerabilityScore} (struggle, challenge, pain, etc.)`}>{post.vulnerabilityScore}</div>
								<div class="text-xs text-[rgb(var(--color-text-muted))]">vulnerability score</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Writing Voice Evolution */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">🎭 How Your Voice Has Evolved</h3>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
					{voiceStats.map(period => (
						<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4">{period.period} Voice</div>
							<div class="space-y-3">
								<div class="flex justify-between">
									<span class="text-sm text-[rgb(var(--color-text-muted))]">Avg Words:</span>
									<span class="text-sm font-medium text-[rgb(var(--color-text))]" title={`Average word count per post in ${period.period} period`}>{period.avgWordCount}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-sm text-[rgb(var(--color-text-muted))]">Emotional Intensity:</span>
									<span class="text-sm font-medium text-[rgb(var(--color-text))]" title={`Average emotional intensity score in ${period.period} period`}>{period.avgEmotionalIntensity}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-sm text-[rgb(var(--color-text-muted))]">Vulnerability:</span>
									<span class="text-sm font-medium text-[rgb(var(--color-text))]" title={`Average vulnerability score in ${period.period} period`}>{period.avgVulnerabilityScore}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-sm text-[rgb(var(--color-text-muted))]">Confidence:</span>
									<span class="text-sm font-medium text-[rgb(var(--color-text))]" title={`Average confidence score in ${period.period} period`}>{period.avgConfidenceScore}</span>
								</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Knowledge Area Evolution */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">📚 How Your Interests Have Grown</h3>
				<div class="space-y-4">
					{knowledgeAreas
						.sort((a, b) => Math.abs(b.expansionRate) - Math.abs(a.expansionRate))
						.slice(0, 10)
						.map((area, index) => (
							<div class="flex items-center justify-between p-4 bg-[rgb(var(--color-bg))] rounded-lg">
								<div class="flex items-center gap-4">
									<div class={`text-lg font-bold ${
										area.expansionRate > 0 ? 'text-green-500' : 
										area.expansionRate < 0 ? 'text-red-500' : 'text-[rgb(var(--color-accent))]'
									}`}>
										{area.expansionRate > 0 ? '📈' : area.expansionRate < 0 ? '📉' : '➡️'}
									</div>
									<div class="flex items-center gap-2">
										<span class="text-lg">{area.icon}</span>
										<div>
											<div class="text-sm font-medium text-[rgb(var(--color-text))]">{area.title}</div>
											<div class="text-xs text-[rgb(var(--color-text-muted))]">
												{area.earlyPosts} → {area.recentPosts} posts
											</div>
										</div>
									</div>
								</div>
								<div class="text-right">
									<div class={`text-sm font-medium ${area.expansionRate > 0 ? 'text-green-500' : area.expansionRate < 0 ? 'text-red-500' : 'text-[rgb(var(--color-text-muted))]'}`} title={`${area.expansionRate > 0 ? 'Growth' : area.expansionRate < 0 ? 'Decline' : 'Stable'} rate: ${Math.round(area.expansionRate)}% change from early to recent periods`}>
										{area.expansionRate > 0 ? '+' : ''}{Math.round(area.expansionRate)}%
									</div>
									<div class="text-xs text-[rgb(var(--color-text-muted))]">
										{area.expansionRate > 0 ? 'growing' : area.expansionRate < 0 ? 'declining' : 'stable'}
									</div>
								</div>
							</div>
						))}
				</div>
			</div>

			{/* Personal Reflection Section */}
			<div class="bg-gradient-to-r from-[rgb(var(--color-accent))]/10 to-[rgb(var(--color-accent))]/5 rounded-lg p-6 border border-[rgb(var(--color-accent))]/20 mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
					<span class="text-[rgb(var(--color-accent))]">🤔</span>
					Deep Reflection Questions
				</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-[rgb(var(--color-text-muted))]">
					<div>
						<h4 class="font-medium text-[rgb(var(--color-text))] mb-3">About Your Emotional Processing:</h4>
						<p class="mb-2">• What patterns do you notice in your most emotional writings?</p>
						<p class="mb-2">• How has your relationship with vulnerability changed?</p>
						<p class="mb-2">• What triggers your deepest emotional responses?</p>
						<p class="mb-2">• How do you use writing to process difficult emotions?</p>
					</div>
					<div>
						<h4 class="font-medium text-[rgb(var(--color-text))] mb-3">About Your Growth Journey:</h4>
						<p class="mb-2">• Which areas of knowledge are you most passionate about?</p>
						<p class="mb-2">• How has your confidence evolved over time?</p>
						<p class="mb-2">• What themes consistently appear in your growth writings?</p>
						<p class="mb-2">• How does writing help you understand yourself better?</p>
					</div>
				</div>
			</div>

			{/* Analysis Conclusion */}
			<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-6 border border-[rgb(var(--color-border))]">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4">💡 Personal Insights Summary</h3>
				<div class="space-y-4">
					{/* Dynamic Insights */}
					<div class="space-y-2">
						{insights.map((insight, index) => (
							<div class={`flex items-center gap-2 ${insight.color}`}>
								<span class="text-sm">
									{insight.type === 'positive' ? '✅' : 
									 insight.type === 'negative' ? '❌' : 
									 insight.type === 'warning' ? '⚠️' : 'ℹ️'}
								</span>
								<span class="text-sm" set:html={insight.text}></span>
							</div>
						))}
					</div>
					
					{/* Summary */}
					<div class="pt-4 border-t border-[rgb(var(--color-border))]">
						<p class="text-sm text-[rgb(var(--color-text-muted))]" set:html={summary}></p>
					</div>
				</div>
			</div>
		</Container>
	</Container>
</BaseLayout> 