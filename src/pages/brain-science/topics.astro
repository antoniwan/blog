---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Container from '../../components/Container.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { getCollection } from 'astro:content';
import { categories } from '../../data/categories';
import { getTagWeight, MASLOW_CATEGORIES, getTagCategory, getTagMetadata } from '../../data/tags';
import { format } from 'date-fns';
import { generateDynamicInsights, calculateObjectiveMetrics, scoreToLetterGrade, letterGradeToColor } from '../../utils/insightGenerator';

// Get all published posts
const posts = await getCollection('blog', ({ data }) => {
	return import.meta.env.PROD ? !data.draft && data.published : true;
});

// Sort posts by date
const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Tag analysis
const tagFrequency = posts.reduce((acc, post) => {
	post.data.tags?.forEach(tag => {
		acc[tag] = (acc[tag] || 0) + 1;
	});
	return acc;
}, {} as Record<string, number>);

const topTags = Object.entries(tagFrequency)
	.sort(([,a], [,b]) => b - a)
	.map(([tag, count]) => ({ 
		tag, 
		count, 
		weight: getTagWeight(tag),
		category: getTagCategory(tag),
		metadata: getTagMetadata(tag)
	}));

// Category analysis
const categoryFrequency = posts.reduce((acc, post) => {
	post.data.category?.forEach(cat => {
		acc[cat] = (acc[cat] || 0) + 1;
	});
	return acc;
}, {} as Record<string, number>);

const categoryStats = categories.map(category => ({
	...category,
	count: categoryFrequency[category.id] || 0,
	percentage: Math.round(((categoryFrequency[category.id] || 0) / posts.length) * 100)
})).filter(cat => cat.count > 0);

// Maslow hierarchy analysis
const maslowAnalysis = MASLOW_CATEGORIES.map(category => {
	const categoryPosts = posts.filter(post => 
		post.data.tags?.some(tag => category.tags.includes(tag))
	).length;
	return {
		...category,
		postCount: categoryPosts,
		percentage: Math.round((categoryPosts / posts.length) * 100)
	};
}).filter(cat => cat.postCount > 0);

// Tag co-occurrence analysis
const tagCooccurrence: Record<string, Record<string, number>> = {};
posts.forEach(post => {
	const postTags = post.data.tags || [];
	postTags.forEach(tag1 => {
		if (!tagCooccurrence[tag1]) {
			tagCooccurrence[tag1] = {};
		}
		postTags.forEach(tag2 => {
			if (tag1 !== tag2) {
				tagCooccurrence[tag1][tag2] = (tagCooccurrence[tag1][tag2] || 0) + 1;
			}
		});
	});
});

// Find strongest tag relationships
const tagRelationships = Object.entries(tagCooccurrence)
	.flatMap(([tag1, relationships]) => 
		Object.entries(relationships).map(([tag2, count]) => ({
			tag1,
			tag2,
			count,
			strength: count / Math.min(tagFrequency[tag1], tagFrequency[tag2])
		}))
	)
	.sort((a, b) => b.strength - a.strength)
	.slice(0, 20);

// Topic evolution over time (by quarters)
const quarters = [];
const currentYear = new Date().getFullYear();
const startYear = sortedPosts[sortedPosts.length - 1]?.data.pubDate.getFullYear() || currentYear;

for (let year = startYear; year <= currentYear; year++) {
	for (let quarter = 1; quarter <= 4; quarter++) {
		const quarterStart = new Date(year, (quarter - 1) * 3, 1);
		const quarterEnd = new Date(year, quarter * 3, 0);
		
		const quarterPosts = posts.filter(post => 
			post.data.pubDate >= quarterStart && post.data.pubDate <= quarterEnd
		);
		
		if (quarterPosts.length > 0) {
			const quarterTags = quarterPosts.reduce((acc, post) => {
				post.data.tags?.forEach(tag => {
					acc[tag] = (acc[tag] || 0) + 1;
				});
				return acc;
			}, {} as Record<string, number>);
			
			quarters.push({
				year,
				quarter,
				label: `Q${quarter} ${year}`,
				posts: quarterPosts.length,
				topTags: Object.entries(quarterTags)
					.sort(([,a], [,b]) => b - a)
					.slice(0, 5)
					.map(([tag, count]) => ({ tag, count, weight: getTagWeight(tag) }))
			});
		}
	}
}

// Personal insights about topics
const topicInsights = [
	{
		insight: "Your core interests are deeply personal",
		evidence: `${topTags[0]?.count || 0} writings about "${topTags[0]?.tag || 'your top topic'}"`,
		impact: "High",
		reflection: "What makes this topic so meaningful to you?"
	},
	{
		insight: "You explore diverse life areas",
		evidence: `${maslowAnalysis.length} different life areas represented`,
		impact: "High",
		reflection: "How do these different areas connect in your life?"
	},
	{
		insight: "Your interests have strong connections",
		evidence: `${tagRelationships.length} strong topic relationships`,
		impact: "Medium",
		reflection: "What patterns do you see in how your interests relate?"
	},
	{
		insight: "You focus on what matters most",
		evidence: `${Math.round((topTags.slice(0, 5).reduce((sum, tag) => sum + tag.count, 0) / posts.length) * 100)}% of writings in top 5 topics`,
		impact: "High",
		reflection: "Why do these topics consistently draw your attention?"
	}
];

// Topic clusters (grouping related topics)
const topicClusters = [
	{
		name: "Personal Growth",
		topics: topTags.filter(tag => 
			['personal-growth', 'transformation', 'healing', 'self-improvement', 'learning', 'consciousness', 'mindfulness'].includes(tag.tag)
		),
		color: "text-green-500",
		icon: "üå±"
	},
	{
		name: "Technical & Creative",
		topics: topTags.filter(tag => 
			['programming', 'technology', 'design', 'art', 'creativity', 'code', 'development'].includes(tag.tag)
		),
		color: "text-blue-500",
		icon: "üíª"
	},
	{
		name: "Life & Relationships",
		topics: topTags.filter(tag => 
			['parenting', 'family', 'relationships', 'love', 'life', 'daily-life', 'parenting'].includes(tag.tag)
		),
		color: "text-purple-500",
		icon: "üíú"
	},
	{
		name: "Philosophy & Reflection",
		topics: topTags.filter(tag => 
			['philosophy', 'reflection', 'thinking', 'thoughts', 'ideas', 'metaspace', 'consciousness'].includes(tag.tag)
		),
		color: "text-yellow-500",
		icon: "ü§î"
	}
].filter(cluster => cluster.topics.length > 0);

// Calculate objective metrics
const objectiveMetrics = calculateObjectiveMetrics(posts);

// Generate dynamic insights
const insightData = {
	totalPosts: posts.length,
	totalWords: posts.reduce((sum, post) => sum + (post.body || '').split(/\s+/).length, 0),
	avgWordsPerPost: Math.round(posts.reduce((sum, post) => sum + (post.body || '').split(/\s+/).length, 0) / posts.length),
	topTags: topTags.slice(0, 5).map(({ tag, count }) => ({ tag, count })),
	emotionalPosts: 0, // Not calculated for topics
	growthPosts: 0, // Not calculated for topics
	complexityTrend: 'stable' as const, // Not calculated for topics
	productivityTrend: 'stable' as const, // Not calculated for topics
	knowledgeAreas: maslowAnalysis.map(area => ({
		title: area.title,
		postCount: area.postCount,
		trend: 'stable' as const
	})),
	writingStreaks: [],
	drySpells: [],
	// Add objective metrics
	...objectiveMetrics
};

const { insights, summary, balancedAnalysis } = generateDynamicInsights(insightData, 'topics');
---

<BaseLayout
	title="Topic Analysis Analytics - Brain Science"
	description="Quantitative analysis of writing themes, topic relationships, and interest patterns. Data-driven insights into content focus and thematic evolution."
	path="/brain-science/topics"
	structuredDataType="website"
>
	<Container>
		<Container maxWidth="container" padding="none">
			{/* Breadcrumbs */}
			<div class="mb-4 md:mb-6 hidden md:block">
				<Breadcrumbs 
					items={[
						{ label: "Home", href: "/" },
						{ label: "Brain Science", href: "/brain-science" },
						{ label: "Core Themes" }
					]} 
				/>
			</div>

			<div class="py-4 md:py-6 lg:py-8">
				{/* Header */}
				<div class="mb-6 md:mb-8 lg:mb-10">
					<h1 class="text-display text-[rgb(var(--color-text))] mb-3 md:mb-4 lg:mb-5" transition:name="page-title">
						üè∑Ô∏è <span class="highlight-accent">Topic Analysis Analytics</span>
					</h1>
					<p class="text-body-large text-[rgb(var(--color-text-muted))] leading-relaxed max-w-4xl" transition:name="page-description">
						Quantitative analysis of writing themes, topic relationships, and interest patterns. 
						Data-driven insights into content focus and thematic evolution over time.
					</p>
				</div>

			{/* Topic Overview Metrics */}
			<div class="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8 md:mb-10 lg:mb-12">
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Total number of unique topics you've written about">{Object.keys(tagFrequency).length}</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Unique Topics</div>
					<div class="text-xs text-blue-500 mt-1">üéØ Areas of Interest</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Number of life areas you explore in your writing">{maslowAnalysis.length}</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Life Areas</div>
					<div class="text-xs text-green-500 mt-1">üåç Life Dimensions</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Number of strong topic relationships identified">{tagRelationships.length}</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Topic Connections</div>
					<div class="text-xs text-purple-500 mt-1">üîó Interest Networks</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Percentage of writings in your top 5 topics">{Math.round((topTags.slice(0, 5).reduce((sum, tag) => sum + tag.count, 0) / posts.length) * 100)}%</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Core Focus</div>
					<div class="text-xs text-yellow-500 mt-1">‚≠ê Primary Interests</div>
				</div>
			</div>

			{/* Personal Insights About Your Topics */}
			<div class="mb-6 md:mb-8">
				<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">üîç Insights About What Matters to You</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
					{topicInsights.map((insight, index) => (
						<div class="p-4 bg-[rgb(var(--color-bg-secondary))] rounded-lg border border-[rgb(var(--color-border))]">
							<div class="flex items-center gap-3 mb-3">
								<div class="text-base md:text-lg font-bold text-[rgb(var(--color-accent))]">#{index + 1}</div>
								<span class={`text-xs px-2 py-1 rounded ${
									insight.impact === 'High' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' :
									insight.impact === 'Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
									'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400'
								}`}>
									{insight.impact} Impact
								</span>
							</div>
							<div class="text-sm font-medium text-[rgb(var(--color-text))] mb-2">
								{insight.insight}
							</div>
							<div class="text-xs text-[rgb(var(--color-text-muted))] mb-3">
								{insight.evidence}
							</div>
							<div class="text-xs text-[rgb(var(--color-accent))] font-medium">
								üí≠ {insight.reflection}
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Your Core Topics */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">‚≠ê Your Most Important Topics</h3>
				<div class="space-y-4">
					{topTags.slice(0, 10).map((tag, index) => (
						<div class="flex items-center justify-between p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center gap-4">
								<div class={`text-lg font-bold ${
									index === 0 ? 'text-yellow-500' : 
									index === 1 ? 'text-gray-400' : 
									index === 2 ? 'text-amber-600' : 'text-[rgb(var(--color-accent))]'
								}`}>
									{index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `#${index + 1}`}
								</div>
								<div>
									<div class="text-sm font-medium text-[rgb(var(--color-text))]">{tag.tag}</div>
									<div class="text-xs text-[rgb(var(--color-text-muted))]">
										{tag.category || 'Uncategorized'} ‚Ä¢ Weight: {tag.weight}
									</div>
								</div>
							</div>
							<div class="text-right">
								<div class="text-sm font-medium text-[rgb(var(--color-text))]" title={`${tag.count} writings tagged with "${tag.tag}"`}>{tag.count}</div>
								<div class="text-xs text-[rgb(var(--color-text-muted))]">
									{Math.round((tag.count / posts.length) * 100)}% of writings
								</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Topic Clusters */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">üéØ Your Interest Clusters</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					{topicClusters.map(cluster => (
						<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center gap-3 mb-4">
								<span class="text-2xl">{cluster.icon}</span>
								<div>
									<div class="text-lg font-semibold text-[rgb(var(--color-text))]">{cluster.name}</div>
									<div class="text-sm text-[rgb(var(--color-text-muted))]">
										{cluster.topics.length} topics ‚Ä¢ {cluster.topics.reduce((sum, tag) => sum + tag.count, 0)} writings
									</div>
								</div>
							</div>
							<div class="space-y-2">
								{cluster.topics.map(tag => (
									<div class="flex justify-between items-center">
										<span class="text-sm text-[rgb(var(--color-text))]">{tag.tag}</span>
										<div class="flex items-center gap-2">
											<div class="w-16 bg-[rgb(var(--color-border))] rounded-full h-2">
												<div 
													class={`h-2 rounded-full ${cluster.color.replace('text-', 'bg-')}`}
													style={`width: ${(tag.count / Math.max(...cluster.topics.map(t => t.count))) * 100}%`}
												></div>
											</div>
											<span class="text-xs text-[rgb(var(--color-text-muted))] w-8 text-right">{tag.count}</span>
										</div>
									</div>
								))}
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Life Areas Focus */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">üåç Your Life Areas Focus</h3>
				<div class="space-y-4">
					{maslowAnalysis.map(category => (
						<div class="flex items-center justify-between p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center gap-4">
								<span class="text-2xl">{category.icon}</span>
								<div>
									<div class="text-sm font-medium text-[rgb(var(--color-text))]">{category.title}</div>
									<div class="text-xs text-[rgb(var(--color-text-muted))]">
										{category.description}
									</div>
								</div>
							</div>
							<div class="text-right">
								<div class="text-sm font-medium text-[rgb(var(--color-text))]" title={`${category.postCount} writings in ${category.title} category`}>{category.postCount}</div>
								<div class="text-xs text-[rgb(var(--color-text-muted))]">
									{category.percentage}% of writings
								</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Strongest Topic Relationships */}
			<div class="mb-8">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-6">üîó How Your Interests Connect</h3>
				<div class="space-y-4">
					{tagRelationships.slice(0, 10).map((relationship, index) => (
						<div class="flex items-center justify-between p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center gap-4">
								<div class="text-lg font-bold text-[rgb(var(--color-accent))]">#{index + 1}</div>
								<div>
									<div class="text-sm font-medium text-[rgb(var(--color-text))]">
										{relationship.tag1} ‚Üî {relationship.tag2}
									</div>
									<div class="text-xs text-[rgb(var(--color-text-muted))]">
										Strength: {Math.round(relationship.strength * 100)}%
									</div>
								</div>
							</div>
							<div class="text-right">
								<div class="text-sm font-medium text-[rgb(var(--color-text))]" title={`${relationship.count} writings contain both "${relationship.tag1}" and "${relationship.tag2}"`}>{relationship.count}</div>
								<div class="text-xs text-[rgb(var(--color-text-muted))]">co-occurrences</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Core Themes Formulas */}
			<div class="mt-12">
				<h3 class="text-xl font-semibold text-[rgb(var(--color-text))] mb-8 flex items-center gap-3">
					<span class="text-[rgb(var(--color-accent))] text-2xl">üìä</span>
					Core Themes Formulas
				</h3>
				<div class="space-y-12">
					<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-blue-500">üè∑Ô∏è</span>
								Topic Analysis
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Topic Frequency:</strong> Posts per tag / Total posts</p>
								<p><strong class="text-[rgb(var(--color-text))]">Top Topic Concentration:</strong> <code class="font-mono text-xs md:text-sm">Most frequent tag / Total posts √ó 100</code></p>
								<p><strong class="text-[rgb(var(--color-text))]">Topic Diversity:</strong> Number of unique tags used</p>
								<p><strong class="text-[rgb(var(--color-text))]">Topic Balance:</strong> <code class="font-mono text-xs md:text-sm">Stable areas / Total areas √ó 100</code></p>
							</div>
						</div>
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-green-500">üìà</span>
								Topic Trends
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Growth Areas:</strong> Topics with increasing post frequency</p>
								<p><strong class="text-[rgb(var(--color-text))]">Declining Areas:</strong> Topics with decreasing post frequency</p>
								<p><strong class="text-[rgb(var(--color-text))]">Stable Areas:</strong> Topics with consistent post frequency</p>
								<p><strong class="text-[rgb(var(--color-text))]">Trend Distribution:</strong> Growing/Declining/Stable topic counts</p>
							</div>
						</div>
					</div>

					<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-purple-500">üîó</span>
								Topic Relationships
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Co-occurrence Strength:</strong> Shared posts / Total posts with either tag</p>
								<p><strong class="text-[rgb(var(--color-text))]">Relationship Percentage:</strong> <code class="font-mono text-xs md:text-sm">Co-occurrence count / Total posts √ó 100</code></p>
								<p><strong class="text-[rgb(var(--color-text))]">Topic Clusters:</strong> Groups of frequently co-occurring tags</p>
								<p><strong class="text-[rgb(var(--color-text))]">Cross-pollination:</strong> Tags that appear together across different posts</p>
							</div>
						</div>
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-orange-500">üéØ</span>
								Life Areas Focus
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Maslow Distribution:</strong> <code class="font-mono text-xs md:text-sm">Posts per life area / Total posts √ó 100</code></p>
								<p><strong class="text-[rgb(var(--color-text))]">Area Concentration:</strong> Most focused life area percentage</p>
								<p><strong class="text-[rgb(var(--color-text))]">Balance Score:</strong> Evenness of distribution across life areas</p>
								<p><strong class="text-[rgb(var(--color-text))]">Growth Trajectory:</strong> Life area focus trends over time</p>
							</div>
						</div>
					</div>
				</div>
			</div>

			{/* Analysis Conclusion */}
			<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-6 border border-[rgb(var(--color-border))]">
				<h3 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4">üè∑Ô∏è Core Themes Summary</h3>
				<div class="space-y-4">
					{/* Dynamic Insights */}
					<div class="space-y-2">
						{insights.map((insight, index) => (
							<div class={`flex items-center gap-2 ${insight.color}`}>
								<span class="text-sm">
									{insight.type === 'positive' ? '‚úÖ' : 
									 insight.type === 'negative' ? '‚ùå' : 
									 insight.type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è'}
								</span>
								<span class="text-sm" set:html={insight.text}></span>
							</div>
						))}
					</div>
					
					{/* Summary */}
					<div class="pt-4">
						<p class="text-sm text-[rgb(var(--color-text-muted))]" set:html={summary}></p>
					</div>
				</div>
			</div>
		</Container>
	</Container>
</BaseLayout> 