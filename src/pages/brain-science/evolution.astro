---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Container from '../../components/Container.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { getCollection } from 'astro:content';
import { categories } from '../../data/categories';
import { getTagWeight, MASLOW_CATEGORIES } from '../../data/tags';
import { format, startOfMonth, endOfMonth, eachMonthOfInterval } from 'date-fns';
import { generateDynamicInsights, calculateObjectiveMetrics, scoreToLetterGrade, letterGradeToColor } from '../../utils/insightGenerator';

// Get all published posts
const posts = await getCollection('blog', ({ data }) => {
	return import.meta.env.PROD ? !data.draft && data.published : true;
});

// Sort posts by date
const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Content evolution analysis
const contentEvolution = posts.map(post => {
	const content = post.body || '';
	const wordCount = content.split(/\s+/).length;
	const paragraphCount = content.split('\n\n').length;
	const sentenceCount = content.split(/[.!?]+/).length - 1;
	const averageSentenceLength = sentenceCount > 0 ? Math.round(wordCount / sentenceCount) : 0;
	
	// Calculate complexity score
	const syllableCount = content.toLowerCase()
		.replace(/[^a-z]/g, '')
		.split('')
		.filter(char => 'aeiou'.includes(char)).length;
	const fleschScore = sentenceCount > 0 ? Math.round(206.835 - (1.015 * (wordCount / sentenceCount)) - (84.6 * (syllableCount / wordCount))) : 0;
	
	// Calculate intellectual depth indicators
	const intellectualWords = ['because', 'therefore', 'however', 'although', 'nevertheless', 'furthermore', 'moreover', 'consequently', 'thus', 'hence', 'accordingly', 'similarly', 'conversely', 'meanwhile', 'subsequently', 'previously', 'initially', 'ultimately', 'fundamentally', 'essentially'];
	const intellectualWordCount = intellectualWords.reduce((count, word) => {
		const regex = new RegExp(`\\b${word}\\b`, 'gi');
		return count + (content.match(regex) || []).length;
	}, 0);
	
	// Calculate curiosity indicators
	const curiosityWords = ['wonder', 'curious', 'question', 'explore', 'discover', 'investigate', 'examine', 'analyze', 'study', 'research', 'learn', 'understand', 'figure out', 'find out', 'look into', 'dive into', 'explore', 'uncover', 'reveal', 'unveil'];
	const curiosityCount = curiosityWords.reduce((count, word) => {
		const regex = new RegExp(`\\b${word}\\b`, 'gi');
		return count + (content.match(regex) || []).length;
	}, 0);
	
	// Calculate wisdom indicators
	const wisdomWords = ['experience', 'learned', 'realized', 'understood', 'discovered', 'found', 'came to', 'figured out', 'worked out', 'determined', 'concluded', 'decided', 'chose', 'opted', 'selected', 'preferred', 'valued', 'appreciated', 'recognized', 'acknowledged'];
	const wisdomCount = wisdomWords.reduce((count, word) => {
		const regex = new RegExp(`\\b${word}\\b`, 'gi');
		return count + (content.match(regex) || []).length;
	}, 0);
	
	return {
		title: post.data.title,
		slug: post.id,
		date: post.data.pubDate,
		body: content,
		wordCount,
		paragraphCount,
		sentenceCount,
		averageSentenceLength,
		fleschScore,
		intellectualWordCount,
		curiosityCount,
		wisdomCount,
		readingTime: (() => {
			if (post.data.minutesRead && typeof post.data.minutesRead === 'string') {
				// Extract minutes from "X min read" format
				const match = post.data.minutesRead.match(/(\d+)/);
				return match ? parseInt(match[1]) : Math.ceil(wordCount / 200);
			}
			return Math.ceil(wordCount / 200);
		})(),
		tags: post.data.tags || [],
		categories: post.data.category || [],
		complexityScore: fleschScore + (wordCount / 100) + (paragraphCount * 2),
		intellectualDepth: intellectualWordCount + curiosityCount + wisdomCount + (wordCount / 50)
	};
});

// Topic progression over time (by quarters)
const quarters = [];
const currentYear = new Date().getFullYear();
const startYear = sortedPosts[sortedPosts.length - 1]?.data.pubDate.getFullYear() || currentYear;

for (let year = startYear; year <= currentYear; year++) {
	for (let quarter = 1; quarter <= 4; quarter++) {
		const quarterStart = new Date(year, (quarter - 1) * 3, 1);
		const quarterEnd = new Date(year, quarter * 3, 0);
		
		const quarterPosts = posts.filter(post => 
			post.data.pubDate >= quarterStart && post.data.pubDate <= quarterEnd
		);
		
		if (quarterPosts.length > 0) {
			const quarterTags = quarterPosts.reduce((acc, post) => {
				post.data.tags?.forEach(tag => {
					acc[tag] = (acc[tag] || 0) + 1;
				});
				return acc;
			}, {} as Record<string, number>);
			
			const quarterCategories = quarterPosts.reduce((acc, post) => {
				post.data.category?.forEach(cat => {
					acc[cat] = (acc[cat] || 0) + 1;
				});
				return acc;
			}, {} as Record<string, number>);
			
			quarters.push({
				year,
				quarter,
				label: `Q${quarter} ${year}`,
				posts: quarterPosts.length,
				topTags: Object.entries(quarterTags)
					.sort(([,a], [,b]) => b - a)
					.slice(0, 5)
					.map(([tag, count]) => ({ tag, count, weight: getTagWeight(tag) })),
				topCategories: Object.entries(quarterCategories)
					.sort(([,a], [,b]) => b - a)
					.slice(0, 3)
					.map(([cat, count]) => ({ cat, count })),
				avgWordCount: Math.round(quarterPosts.reduce((sum, post) => sum + (post.body || '').split(/\s+/).length, 0) / quarterPosts.length),
				avgComplexity: Math.round(quarterPosts.reduce((sum, post) => {
					const content = post.body || '';
					const wordCount = content.split(/\s+/).length;
					const sentenceCount = content.split(/[.!?]+/).length - 1;
					const syllableCount = content.toLowerCase().replace(/[^a-z]/g, '').split('').filter(char => 'aeiou'.includes(char)).length;
					const fleschScore = sentenceCount > 0 ? Math.round(206.835 - (1.015 * (wordCount / sentenceCount)) - (84.6 * (syllableCount / wordCount))) : 0;
					return sum + fleschScore;
				}, 0) / quarterPosts.length)
			});
		}
	}
}

// Writing style evolution
const styleEvolution = contentEvolution
	.sort((a, b) => a.date.valueOf() - b.date.valueOf())
	.map((post, index) => ({
		...post,
		trendIndex: index,
		period: index < contentEvolution.length / 3 ? 'Early' : index < (contentEvolution.length * 2) / 3 ? 'Middle' : 'Recent'
	}));

// Topic diversity evolution
const topicDiversity = quarters.map(quarter => ({
	...quarter,
	topicDiversity: quarter.topTags.length,
	avgTagWeight: Math.round(quarter.topTags.reduce((sum, tag) => sum + tag.weight, 0) / quarter.topTags.length)
}));

// Category evolution
const categoryEvolution = quarters.map(quarter => ({
	...quarter,
	categoryDiversity: quarter.topCategories.length,
	primaryCategory: quarter.topCategories[0]?.cat || 'None'
}));

// Complexity trends
const complexityTrends = styleEvolution.reduce((acc, post) => {
	const period = post.period;
	if (!acc[period]) {
		acc[period] = [];
	}
	acc[period].push(post);
	return acc;
}, {} as Record<string, typeof styleEvolution>);

const periodStats = Object.entries(complexityTrends).map(([period, posts]) => ({
	period,
	avgWordCount: Math.round(posts.reduce((sum, post) => sum + post.wordCount, 0) / posts.length),
	avgComplexity: Math.round(posts.reduce((sum, post) => sum + post.fleschScore, 0) / posts.length),
	avgIntellectualDepth: Math.round(posts.reduce((sum, post) => sum + post.intellectualDepth, 0) / posts.length),
	avgCuriosityCount: Math.round(posts.reduce((sum, post) => sum + post.curiosityCount, 0) / posts.length),
	avgWisdomCount: Math.round(posts.reduce((sum, post) => sum + post.wisdomCount, 0) / posts.length),
	avgReadingTime: Math.round(posts.reduce((sum, post) => sum + post.readingTime, 0) / posts.length),
	postCount: posts.length
}));

// Most evolved topics (topics that have grown in frequency over time)
interface TopicGrowth {
	tag: string;
	earlyCount: number;
	recentCount: number;
	growth: number;
	growthRate: number;
}

const topicGrowth: Record<string, TopicGrowth> = {};
const earlyQuarters = quarters.slice(0, Math.floor(quarters.length / 3));
const recentQuarters = quarters.slice(-Math.floor(quarters.length / 3));

// Compare early vs recent topic frequency
const allTags = new Set<string>();
quarters.forEach(quarter => quarter.topTags.forEach(tag => allTags.add(tag.tag)));

allTags.forEach(tag => {
	const earlyCount = earlyQuarters.reduce((sum, quarter) => 
		sum + (quarter.topTags.find(t => t.tag === tag)?.count || 0), 0);
	const recentCount = recentQuarters.reduce((sum, quarter) => 
		sum + (quarter.topTags.find(t => t.tag === tag)?.count || 0), 0);
	
	if (earlyCount > 0 || recentCount > 0) {
		topicGrowth[tag] = {
			tag,
			earlyCount,
			recentCount,
			growth: recentCount - earlyCount,
			growthRate: earlyCount > 0 ? ((recentCount - earlyCount) / earlyCount) * 100 : recentCount > 0 ? 100 : 0
		};
	}
});

const growingTopics = Object.values(topicGrowth)
	.sort((a, b) => b.growthRate - a.growthRate)
	.slice(0, 10);

const decliningTopics = Object.values(topicGrowth)
	.sort((a, b) => a.growthRate - b.growthRate)
	.slice(0, 10);

// Writing maturity indicators
const maturityIndicators = contentEvolution.map(post => {
	const content = post.body || '';
	const hasCode = /```[\s\S]*```/.test(content) || /`[^`]+`/.test(content);
	const hasLinks = /\[.*\]\(https?:\/\/.*\)/.test(content) || /https?:\/\/[^\s]+/.test(content);
	const hasImages = /!\[.*\]\(.*\)/.test(content);
	const hasQuotes = />\s+.+/.test(content);
	const hasQuestions = /\?/g.test(content);
	const hasExamples = /for example|such as|like|including|e\.g\.|i\.e\./gi.test(content);
	
	return {
		...post,
		hasCode,
		hasLinks,
		hasImages,
		hasQuotes,
		hasQuestions,
		hasExamples,
		maturityScore: (hasCode ? 2 : 0) + (hasLinks ? 1 : 0) + (hasImages ? 1 : 0) + (hasQuotes ? 1 : 0) + (hasQuestions ? 1 : 0) + (hasExamples ? 1 : 0) + (post.wordCount > 1000 ? 2 : 0) + (post.intellectualDepth > 10 ? 2 : 0)
	};
});

const avgMaturityScore = Math.round(maturityIndicators.reduce((sum, post) => sum + post.maturityScore, 0) / maturityIndicators.length);

// Intellectual growth insights
const intellectualInsights = [
	{
		insight: "Your intellectual depth has evolved significantly",
		evidence: `${periodStats[periodStats.length - 1]?.avgIntellectualDepth || 0} vs ${periodStats[0]?.avgIntellectualDepth || 0} intellectual depth score`,
		impact: "High",
		reflection: "How has your way of thinking about complex topics changed?"
	},
	{
		insight: "Curiosity drives your learning",
		evidence: `${periodStats[periodStats.length - 1]?.avgCuriosityCount || 0} curiosity indicators per post`,
		impact: "High",
		reflection: "What questions are you most passionate about exploring?"
	},
	{
		insight: "Wisdom comes from experience",
		evidence: `${periodStats[periodStats.length - 1]?.avgWisdomCount || 0} wisdom indicators per post`,
		impact: "Medium",
		reflection: "What experiences have taught you the most?"
	},
	{
		insight: "Your knowledge areas are expanding",
		evidence: `${growingTopics.length} topics growing vs ${decliningTopics.length} declining`,
		impact: "High",
		reflection: "Which new areas of knowledge excite you most?"
	}
];

// Calculate objective metrics
const objectiveMetrics = calculateObjectiveMetrics(posts);

// Generate dynamic insights
const insightData = {
	totalPosts: posts.length,
	totalWords: posts.reduce((sum, post) => sum + (post.body || '').split(/\s+/).length, 0),
	avgWordsPerPost: Math.round(posts.reduce((sum, post) => sum + (post.body || '').split(/\s+/).length, 0) / posts.length),
	topTags: Object.entries(posts.reduce((acc, post) => {
		post.data.tags?.forEach((tag: string) => {
			acc[tag] = (acc[tag] || 0) + 1;
		});
		return acc;
	}, {} as Record<string, number>))
		.sort(([,a], [,b]) => b - a)
		.slice(0, 5)
		.map(([tag, count]) => ({ tag, count })),
	emotionalPosts: 0, // Not calculated for evolution
	growthPosts: 0, // Not calculated for evolution
	complexityTrend: periodStats[periodStats.length - 1]?.avgComplexity > periodStats[0]?.avgComplexity ? 'increasing' as const : 'decreasing' as const,
	productivityTrend: 'stable' as const, // Not calculated for evolution
	knowledgeAreas: [],
	writingStreaks: [],
	drySpells: [],
	// Add objective metrics
	...objectiveMetrics
};

const { insights, summary, balancedAnalysis } = generateDynamicInsights(insightData, 'evolution');
---

<BaseLayout
	title="Intellectual Growth Analytics - Brain Science"
	description="Quantitative analysis of thinking style evolution, knowledge progression, and intellectual depth metrics over time."
	path="/brain-science/evolution"
	structuredDataType="website"
>
	<Container>
		<Container maxWidth="container" padding="none">
			{/* Breadcrumbs */}
			<div class="mb-4 md:mb-6 hidden md:block">
				<Breadcrumbs 
					items={[
						{ label: "Home", href: "/" },
						{ label: "Brain Science", href: "/brain-science" },
						{ label: "Intellectual Growth" }
					]} 
				/>
			</div>

			<div class="py-4 md:py-6 lg:py-8">
				{/* Header */}
				<div class="mb-6 md:mb-8 lg:mb-10">
					<h1 class="text-display text-[rgb(var(--color-text))] mb-3 md:mb-4 lg:mb-5" transition:name="page-title">
						📈 <span class="highlight-accent">Intellectual Growth Analytics</span>
					</h1>
					<p class="text-body-large text-[rgb(var(--color-text-muted))] leading-relaxed max-w-4xl" transition:name="page-description">
						Quantitative analysis of thinking style evolution, knowledge progression, and intellectual depth metrics over time. 
						Data-driven insights into cognitive development patterns.
					</p>
				</div>

			{/* Intellectual Growth Metrics */}
			<div class="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8 md:mb-10 lg:mb-12">
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Number of quarters analyzed (3-month periods with published posts)">{quarters.length}</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Quarters Analyzed</div>
					<div class="text-xs text-blue-500 mt-1">📊 Time Periods</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Average maturity score across all posts (based on code, links, images, quotes, and word count)">{avgMaturityScore}</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Avg Maturity Score</div>
					<div class="text-xs text-green-500 mt-1">🧠 Intellectual Growth</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Number of topics that have increased in frequency over time">{growingTopics.length}</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Growing Topics</div>
					<div class="text-xs text-green-500 mt-1">📈 Expanding Interests</div>
				</div>
				<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
					<div class="text-xl md:text-2xl font-bold text-[rgb(var(--color-text))] mb-1 md:mb-2" title="Number of topics that have decreased in frequency over time">{decliningTopics.length}</div>
					<div class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Declining Topics</div>
					<div class="text-xs text-red-500 mt-1">📉 Shifting Focus</div>
				</div>
			</div>

			{/* Intellectual Growth Insights */}
			<div class="mb-6 md:mb-8 lg:mb-10">
				<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">🔍 Key Insights About Your Intellectual Growth</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
					{intellectualInsights.map((insight, index) => (
						<div class="p-4 bg-[rgb(var(--color-bg-secondary))] rounded-lg border border-[rgb(var(--color-border))]">
							<div class="flex items-center gap-3 mb-3">
								<div class="text-base md:text-lg font-bold text-[rgb(var(--color-accent))]">#{index + 1}</div>
								<span class={`text-xs px-2 py-1 rounded ${
									insight.impact === 'High' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' :
									insight.impact === 'Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
									'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400'
								}`}>
									{insight.impact} Impact
								</span>
							</div>
							<div class="text-sm font-medium text-[rgb(var(--color-text))] mb-2">
								{insight.insight}
							</div>
							<div class="text-xs text-[rgb(var(--color-text-muted))] mb-3">
								{insight.evidence}
							</div>
							<div class="text-xs text-[rgb(var(--color-accent))] font-medium">
								💭 {insight.reflection}
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Thinking Style Evolution */}
			<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))] mb-6 md:mb-8 lg:mb-10">
				<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">🧠 How Your Thinking Style Has Evolved</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
					{periodStats.map(period => (
						<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg border border-[rgb(var(--color-border))]">
							<div class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-3 md:mb-4">{period.period} Period</div>
							<div class="space-y-2 md:space-y-3">
								<div class="flex justify-between">
									<span class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Avg Words:</span>
									<span class="text-xs md:text-sm font-medium text-[rgb(var(--color-text))]" title={`Average word count per post in ${period.period} period`}>{period.avgWordCount}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Complexity:</span>
									<span class={`text-xs md:text-sm font-medium ${
										period.avgComplexity >= Math.max(...periodStats.map(p => p.avgComplexity)) * 0.8 ? 'text-green-500' :
										period.avgComplexity >= Math.max(...periodStats.map(p => p.avgComplexity)) * 0.5 ? 'text-blue-500' :
										period.avgComplexity >= Math.max(...periodStats.map(p => p.avgComplexity)) * 0.2 ? 'text-yellow-500' : 'text-red-500'
									}`} title={`Average Flesch reading ease score in ${period.period} period (higher = easier to read)`}>
										{period.avgComplexity}
									</span>
								</div>
								<div class="flex justify-between">
									<span class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Intellectual Depth:</span>
									<span class="text-xs md:text-sm font-medium text-[rgb(var(--color-text))]" title={`Average intellectual depth score in ${period.period} period`}>{period.avgIntellectualDepth}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Curiosity:</span>
									<span class="text-xs md:text-sm font-medium text-[rgb(var(--color-text))]" title={`Average curiosity indicators per post in ${period.period} period`}>{period.avgCuriosityCount}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Wisdom:</span>
									<span class="text-xs md:text-sm font-medium text-[rgb(var(--color-text))]" title={`Average wisdom indicators per post in ${period.period} period`}>{period.avgWisdomCount}</span>
								</div>
								<div class="flex justify-between">
									<span class="text-xs md:text-sm text-[rgb(var(--color-text-muted))]">Writings:</span>
									<span class="text-xs md:text-sm font-medium text-[rgb(var(--color-text))]" title={`Number of writings in ${period.period} period`}>{period.postCount}</span>
								</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Topic Growth vs Decline Analysis */}
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8 mb-6 md:mb-8 lg:mb-10">
				<div>
					<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">📈 Topics You're Exploring More</h3>
					<div class="space-y-4">
						{growingTopics.map((topic, index) => (
							<div class="flex items-center justify-between p-3 bg-[rgb(var(--color-bg))] rounded-lg">
								<div class="flex items-center gap-3">
									<div class={`text-lg font-bold ${
										index === 0 ? 'text-yellow-500' : 
										index === 1 ? 'text-gray-400' : 
										index === 2 ? 'text-amber-600' : 'text-green-500'
									}`}>
										{index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `#${index + 1}`}
									</div>
									<div>
										<div class="text-sm font-medium text-[rgb(var(--color-text))]">{topic.tag}</div>
										<div class="text-xs text-[rgb(var(--color-text-muted))]">
											{topic.earlyCount} → {topic.recentCount} writings
										</div>
									</div>
								</div>
								<div class="text-sm font-medium text-green-500" title={`Growth rate: ${Math.round(topic.growthRate)}% increase from early to recent periods`}>
									+{Math.round(topic.growthRate)}%
								</div>
							</div>
						))}
					</div>
				</div>

				<div>
					<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">📉 Topics You're Focusing Less On</h3>
					<div class="space-y-4">
						{decliningTopics.map((topic, index) => (
							<div class="flex items-center justify-between p-3 bg-[rgb(var(--color-bg))] rounded-lg">
								<div class="flex items-center gap-3">
									<div class="text-lg font-bold text-red-500">#{index + 1}</div>
									<div>
										<div class="text-sm font-medium text-[rgb(var(--color-text))]">{topic.tag}</div>
										<div class="text-xs text-[rgb(var(--color-text-muted))]">
											{topic.earlyCount} → {topic.recentCount} writings
										</div>
									</div>
								</div>
								<div class="text-sm font-medium text-red-500" title={`Decline rate: ${Math.round(topic.growthRate)}% decrease from early to recent periods`}>
									{Math.round(topic.growthRate)}%
								</div>
							</div>
						))}
					</div>
				</div>
			</div>

			{/* Topic Evolution Timeline */}
			<div class="mb-6 md:mb-8 lg:mb-10">
				<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">📅 Your Intellectual Journey Timeline</h3>
				<div class="space-y-6">
					{quarters.slice(-8).map(quarter => (
						<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg">
							<div class="flex items-center justify-between mb-3">
								<h4 class="text-sm font-medium text-[rgb(var(--color-text))]">{quarter.label}</h4>
								<div class="text-xs text-[rgb(var(--color-text-muted))]" title={`${quarter.posts} writings with average ${quarter.avgWordCount} words and ${quarter.avgComplexity} complexity score`}>
									{quarter.posts} writings • {quarter.avgWordCount} avg words • {quarter.avgComplexity} complexity
								</div>
							</div>
							<div class="mb-3">
								<div class="text-xs text-[rgb(var(--color-text-muted))] mb-2">Top Topics:</div>
								<div class="flex flex-wrap gap-2">
									{quarter.topTags.map(tag => (
										<span class="text-xs bg-[rgb(var(--color-accent))] text-white px-2 py-1 rounded" title={`${tag.count} writings tagged with "${tag.tag}" in ${quarter.label}`}>
											{tag.tag} ({tag.count})
										</span>
									))}
								</div>
							</div>
							<div>
								<div class="text-xs text-[rgb(var(--color-text-muted))] mb-2">Categories:</div>
								<div class="flex flex-wrap gap-2">
									{quarter.topCategories.map(cat => (
										<span class="text-xs bg-[rgb(var(--color-bg-secondary))] text-[rgb(var(--color-text))] px-2 py-1 rounded border" title={`${cat.count} writings in "${cat.cat}" category in ${quarter.label}`}>
											{cat.cat} ({cat.count})
										</span>
									))}
								</div>
							</div>
						</div>
					))}
				</div>
			</div>

			{/* Writing Maturity */}
			<div class="mb-6 md:mb-8 lg:mb-10">
				<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">🎓 Your Writing Maturity Indicators</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
					<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg text-center">
						<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Writings containing code blocks or inline code">
							{maturityIndicators.filter(post => post.hasCode).length}
						</div>
						<div class="text-sm text-[rgb(var(--color-text-muted))]">Writings with Code</div>
						<div class="text-xs text-blue-500 mt-1">💻 Technical Depth</div>
					</div>
					<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg text-center">
						<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Writings containing external links or URLs">
							{maturityIndicators.filter(post => post.hasLinks).length}
						</div>
						<div class="text-sm text-[rgb(var(--color-text-muted))]">Writings with Links</div>
						<div class="text-xs text-green-500 mt-1">🔗 Research Quality</div>
					</div>
					<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg text-center">
						<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Writings containing questions">
							{maturityIndicators.filter(post => post.hasQuestions).length}
						</div>
						<div class="text-sm text-[rgb(var(--color-text-muted))]">Writings with Questions</div>
						<div class="text-xs text-purple-500 mt-1">❓ Curiosity</div>
					</div>
					<div class="p-4 bg-[rgb(var(--color-bg))] rounded-lg text-center">
						<div class="text-2xl font-bold text-[rgb(var(--color-text))] mb-2" title="Writings with more than 1000 words">
							{maturityIndicators.filter(post => post.wordCount > 1000).length}
						</div>
						<div class="text-sm text-[rgb(var(--color-text-muted))]">Long-form Writings</div>
						<div class="text-xs text-yellow-500 mt-1">📝 Depth of Thought</div>
					</div>
				</div>
			</div>

			{/* Intellectual Growth Formulas */}
			<div class="mb-6 md:mb-8 lg:mb-10">
				<h3 class="text-lg md:text-xl font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6 flex items-center gap-3">
					<span class="text-[rgb(var(--color-accent))] text-2xl">📊</span>
					Intellectual Growth Formulas
				</h3>
				<div class="space-y-6 md:space-y-8">
					<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8">
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-blue-500">🧠</span>
								Complexity Analysis
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Writing Complexity Trend:</strong> Increasing/Decreasing/Stable over time</p>
								<p><strong class="text-[rgb(var(--color-text))]">Content Depth:</strong> Average words per post</p>
								<p><strong class="text-[rgb(var(--color-text))]">Technical Depth:</strong> Posts with code blocks / Total posts</p>
								<p><strong class="text-[rgb(var(--color-text))]">Research Quality:</strong> Posts with external links / Total posts</p>
							</div>
						</div>
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-purple-500">📚</span>
								Knowledge Area Evolution
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Topic Diversity:</strong> Number of distinct knowledge areas</p>
								<p><strong class="text-[rgb(var(--color-text))]">Growth Trends:</strong> Growing/Declining/Stable topic areas</p>
								<p><strong class="text-[rgb(var(--color-text))]">Focus Concentration:</strong> Top topic percentage of total posts</p>
								<p><strong class="text-[rgb(var(--color-text))]">Exploration Depth:</strong> Average posts per knowledge area</p>
							</div>
						</div>
					</div>

					<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8">
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-green-500">🎓</span>
								Maturity Indicators
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Long-form Content:</strong> Posts >1000 words / Total posts</p>
								<p><strong class="text-[rgb(var(--color-text))]">Curiosity Level:</strong> Posts with questions / Total posts</p>
								<p><strong class="text-[rgb(var(--color-text))]">Technical Integration:</strong> Code-containing posts / Total posts</p>
								<p><strong class="text-[rgb(var(--color-text))]">Research Integration:</strong> Link-containing posts / Total posts</p>
							</div>
						</div>
						<div>
							<h4 class="text-lg font-semibold text-[rgb(var(--color-text))] mb-4 flex items-center gap-2">
								<span class="text-orange-500">📈</span>
								Learning Trajectory
							</h4>
							<div class="space-y-3 text-[rgb(var(--color-text-muted))]">
								<p><strong class="text-[rgb(var(--color-text))]">Quarterly Growth:</strong> Post count and word count per quarter</p>
								<p><strong class="text-[rgb(var(--color-text))]">Topic Evolution:</strong> Category distribution over time periods</p>
								<p><strong class="text-[rgb(var(--color-text))]">Depth Progression:</strong> Average post length trend</p>
								<p><strong class="text-[rgb(var(--color-text))]">Complexity Progression:</strong> Technical content frequency trend</p>
							</div>
						</div>
					</div>
				</div>
			</div>

			{/* Analysis Conclusion */}
			<div class="bg-[rgb(var(--color-bg-secondary))] rounded-lg p-4 md:p-6 border border-[rgb(var(--color-border))]">
				<h3 class="text-base md:text-lg font-semibold text-[rgb(var(--color-text))] mb-4 md:mb-6">📈 Intellectual Growth Summary</h3>
				<div class="space-y-4">
					{/* Dynamic Insights */}
					<div class="space-y-2">
						{insights.map((insight, index) => (
							<div class={`flex items-center gap-2 ${insight.color}`}>
								<span class="text-sm">
									{insight.type === 'positive' ? '✅' : 
									 insight.type === 'negative' ? '❌' : 
									 insight.type === 'warning' ? '⚠️' : 'ℹ️'}
								</span>
								<span class="text-sm" set:html={insight.text}></span>
							</div>
						))}
					</div>
					
					{/* Summary */}
					<div class="pt-4">
						<p class="text-sm text-[rgb(var(--color-text-muted))]" set:html={summary}></p>
					</div>
				</div>
			</div>

			{/* Navigation Links */}
			<div class="mt-8 md:mt-12 pt-6 md:pt-8 border-t border-[rgb(var(--color-border))]">
				<div class="flex flex-wrap gap-4 md:gap-6 justify-center">
					<a href="/brain-science" class="text-sm text-[rgb(var(--color-accent))] hover:text-[rgb(var(--color-accent-hover))] transition-colors">
						🏠 Brain Science Dashboard
					</a>
					<a href="/brain-science/insights" class="text-sm text-[rgb(var(--color-accent))] hover:text-[rgb(var(--color-accent-hover))] transition-colors">
						📊 Emotional Processing Analytics
					</a>
					<a href="/brain-science/topics" class="text-sm text-[rgb(var(--color-accent))] hover:text-[rgb(var(--color-accent-hover))] transition-colors">
						🏷️ Core Themes Analysis
					</a>
					<a href="/brain-science/cadence" class="text-sm text-[rgb(var(--color-accent))] hover:text-[rgb(var(--color-accent-hover))] transition-colors">
						📅 Writing Cadence Patterns
					</a>
					<a href="/brain-science/patterns" class="text-sm text-[rgb(var(--color-accent))] hover:text-[rgb(var(--color-accent-hover))] transition-colors">
						🌀 Pattern Recognition
					</a>
					<a href="/brain-science/meta" class="text-sm text-[rgb(var(--color-accent))] hover:text-[rgb(var(--color-accent-hover))] transition-colors">
						🔍 Meta Analysis
					</a>
				</div>
			</div>
		</Container>
	</Container>
</BaseLayout> 
