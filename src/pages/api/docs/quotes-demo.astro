---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Container from '../../../components/Container.astro';
import PageHeader from '../../../components/PageHeader.astro';
import { SITE_TITLE } from '../../../consts';
---

<BaseLayout 
  title={`Quotes API Demo - ${SITE_TITLE}`}
  description="Interactive demo of the Stoic Quotes API with examples and usage patterns"
  path="/api/docs/quotes-demo"
>
  <Container>
    <Container maxWidth="container" padding="none">
      <PageHeader 
        title="Quotes API Demo"
        description="Test and explore the Stoic Quotes API with interactive examples"
      />
      
      {/* API Overview */}
      <div class="bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] p-6 mb-8">
        <h3 class="text-xl font-semibold mb-4 text-[rgb(var(--color-text))]">API Overview</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 class="font-medium mb-2 text-[rgb(var(--color-text))]">Base URL</h4>
            <code class="bg-[rgb(var(--color-bg))] px-3 py-2 rounded text-sm font-mono">/api/quotes</code>
            <p class="text-sm text-[rgb(var(--color-text-muted))] mt-2">
              30 curated Stoic philosophy quotes with rich metadata and filtering capabilities.
            </p>
          </div>
          <div>
            <h4 class="font-medium mb-2 text-[rgb(var(--color-text))]">Key Features</h4>
            <ul class="space-y-1 text-sm text-[rgb(var(--color-text-muted))]">
              <li>• Random quote generation</li>
              <li>• Filter by author, theme, category</li>
              <li>• Difficulty and length filtering</li>
              <li>• Rich metadata and context</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Interactive Demo */}
      <div class="grid md:grid-cols-2 gap-8 mb-8">
        <!-- Random Quote Section -->
        <div class="bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] p-6">
          <h3 class="text-lg font-semibold mb-4 text-[rgb(var(--color-text))]">Random Quote</h3>
          <div class="mb-4">
            <code class="bg-[rgb(var(--color-bg))] px-3 py-2 rounded text-sm font-mono block mb-2">
              GET /api/quotes?action=random
            </code>
            <button 
              id="getRandomQuote" 
              class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded text-sm font-medium transition-colors"
            >
              Try It
            </button>
          </div>
          <div id="randomQuoteResult" class="bg-[rgb(var(--color-bg))] p-4 rounded min-h-[150px] border border-[rgb(var(--color-border))]/30">
            <p class="text-[rgb(var(--color-text-muted))] text-sm">Click "Try It" to get a random quote...</p>
          </div>
        </div>

        <!-- Quote by ID Section -->
        <div class="bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] p-6">
          <h3 class="text-lg font-semibold mb-4 text-[rgb(var(--color-text))]">Quote by ID</h3>
          <div class="mb-4">
            <code class="bg-[rgb(var(--color-bg))] px-3 py-2 rounded text-sm font-mono block mb-2">
              GET /api/quotes?action=id&id=&#123;id&#125;
            </code>
            <div class="flex gap-2">
              <input 
                type="number" 
                id="quoteId" 
                min="1" 
                max="30" 
                value="1"
                class="border border-[rgb(var(--color-border))] rounded px-3 py-2 flex-1 text-sm bg-[rgb(var(--color-bg))]"
                placeholder="ID (1-30)"
              >
              <button 
                id="getQuoteById" 
                class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded text-sm font-medium transition-colors"
              >
                Try It
              </button>
            </div>
          </div>
          <div id="quoteByIdResult" class="bg-[rgb(var(--color-bg))] p-4 rounded min-h-[150px] border border-[rgb(var(--color-border))]/30">
            <p class="text-[rgb(var(--color-text-muted))] text-sm">Enter an ID and click "Try It"...</p>
          </div>
        </div>

        <!-- Quotes by Author Section -->
        <div class="bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] p-6">
          <h3 class="text-lg font-semibold mb-4 text-[rgb(var(--color-text))]">Quotes by Author</h3>
          <div class="mb-4">
            <code class="bg-[rgb(var(--color-bg))] px-3 py-2 rounded text-sm font-mono block mb-2">
              GET /api/quotes?action=author&author=&#123;name&#125;
            </code>
            <div class="flex gap-2">
              <select id="authorSelect" class="border border-[rgb(var(--color-border))] rounded px-3 py-2 flex-1 text-sm bg-[rgb(var(--color-bg))]">
                <option value="">Select author...</option>
                <option value="Marcus Aurelius">Marcus Aurelius</option>
                <option value="Epictetus">Epictetus</option>
                <option value="Seneca">Seneca</option>
              </select>
              <button 
                id="getQuotesByAuthor" 
                class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded text-sm font-medium transition-colors"
              >
                Try It
              </button>
            </div>
          </div>
          <div id="quotesByAuthorResult" class="bg-[rgb(var(--color-bg))] p-4 rounded min-h-[150px] border border-[rgb(var(--color-border))]/30">
            <p class="text-[rgb(var(--color-text-muted))] text-sm">Select an author and click "Try It"...</p>
          </div>
        </div>

        <!-- Quotes by Theme Section -->
        <div class="bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] p-6">
          <h3 class="text-lg font-semibold mb-4 text-[rgb(var(--color-text))]">Quotes by Theme</h3>
          <div class="mb-4">
            <code class="bg-[rgb(var(--color-bg))] px-3 py-2 rounded text-sm font-mono block mb-2">
              GET /api/quotes?action=theme&theme=&#123;theme&#125;
            </code>
            <div class="flex gap-2">
              <select id="themeSelect" class="border border-[rgb(var(--color-border))] rounded px-3 py-2 flex-1 text-sm bg-[rgb(var(--color-bg))]">
                <option value="">Select theme...</option>
                <option value="wisdom">Wisdom</option>
                <option value="virtue">Virtue</option>
                <option value="resilience">Resilience</option>
                <option value="acceptance">Acceptance</option>
                <option value="mindfulness">Mindfulness</option>
                <option value="control">Control</option>
                <option value="happiness">Happiness</option>
              </select>
              <button 
                id="getQuotesByTheme" 
                class="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded text-sm font-medium transition-colors"
              >
                Try It
              </button>
            </div>
          </div>
          <div id="quotesByThemeResult" class="bg-[rgb(var(--color-bg))] p-4 rounded min-h-[150px] border border-[rgb(var(--color-border))]/30">
            <p class="text-[rgb(var(--color-text-muted))] text-sm">Select a theme and click "Try It"...</p>
          </div>
        </div>
      </div>

      {/* Code Examples */}
      <div class="bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] p-6 mb-8">
        <h3 class="text-xl font-semibold mb-4 text-[rgb(var(--color-text))]">Code Examples</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 class="font-medium mb-2 text-[rgb(var(--color-text))]">JavaScript/Fetch</h4>
                         <pre class="bg-[rgb(var(--color-bg))] p-4 rounded text-sm overflow-x-auto border border-[rgb(var(--color-border))]/30"><code>// Get a random quote
 const response = await fetch('/api/quotes?action=random');
 const &#123;data&#125; = await response.json();
 console.log(&#123;data&#125;.quote.text);

 // Get quotes by theme
 const wisdomQuotes = await fetch('/api/quotes?action=theme&theme=wisdom');
 const wisdomData = await wisdomQuotes.json();
 console.log(wisdomData.quotes);</code></pre>
          </div>
          <div>
            <h4 class="font-medium mb-2 text-[rgb(var(--color-text))]">Python/Requests</h4>
                         <pre class="bg-[rgb(var(--color-bg))] p-4 rounded text-sm overflow-x-auto border border-[rgb(var(--color-border))]/30"><code>import requests
 
 # Get a random quote
 response = requests.get('https://your-site.com/api/quotes?action=random')
 &#123;data&#125; = response.json()
 print(&#123;data&#125;['quote']['text'])
 
 # Get quotes by author
 response = requests.get('https://your-site.com/api/quotes?action=author&author=Marcus%20Aurelius')
 &#123;data&#125; = response.json()
 print(f"Found &#123;data&#125;['count'] quotes")</code></pre>
          </div>
        </div>
      </div>

      {/* Integration Ideas */}
      <div class="bg-[rgb(var(--color-bg-alt))] rounded-lg border border-[rgb(var(--color-border))] p-6">
        <h3 class="text-xl font-semibold mb-4 text-[rgb(var(--color-text))]">Integration Ideas</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div class="p-3 bg-[rgb(var(--color-bg))] rounded border border-[rgb(var(--color-border))]/30">
            <h4 class="font-medium mb-1 text-[rgb(var(--color-text))]">Daily Quote Widget</h4>
            <p class="text-sm text-[rgb(var(--color-text-muted))]">Use random quotes for daily inspiration</p>
          </div>
          <div class="p-3 bg-[rgb(var(--color-bg))] rounded border border-[rgb(var(--color-border))]/30">
            <h4 class="font-medium mb-1 text-[rgb(var(--color-text))]">Theme-based Learning</h4>
            <p class="text-sm text-[rgb(var(--color-text-muted))]">Filter quotes by themes for focused study</p>
          </div>
          <div class="p-3 bg-[rgb(var(--color-bg))] rounded border border-[rgb(var(--color-border))]/30">
            <h4 class="font-medium mb-1 text-[rgb(var(--color-text))]">Difficulty Progression</h4>
            <p class="text-sm text-[rgb(var(--color-text-muted))]">Start with beginner quotes and progress</p>
          </div>
          <div class="p-3 bg-[rgb(var(--color-bg))] rounded border border-[rgb(var(--color-border))]/30">
            <h4 class="font-medium mb-1 text-[rgb(var(--color-text))]">Author Studies</h4>
            <p class="text-sm text-[rgb(var(--color-text-muted))]">Explore quotes by specific philosophers</p>
          </div>
          <div class="p-3 bg-[rgb(var(--color-bg))] rounded border border-[rgb(var(--color-border))]/30">
            <h4 class="font-medium mb-1 text-[rgb(var(--color-text))]">Contextual Applications</h4>
            <p class="text-sm text-[rgb(var(--color-text-muted))]">Use modernRelevance for practical apps</p>
          </div>
          <div class="p-3 bg-[rgb(var(--color-bg))] rounded border border-[rgb(var(--color-border))]/30">
            <h4 class="font-medium mb-1 text-[rgb(var(--color-text))]">Quote Collections</h4>
            <p class="text-sm text-[rgb(var(--color-text-muted))]">Build curated lists using filters</p>
          </div>
        </div>
      </div>

      {/* Documentation Link */}
      <div class="text-center">
        <a 
          href="/docs/QUOTES_API.md" 
          class="inline-flex items-center gap-2 text-blue-500 hover:text-blue-600 underline"
          target="_blank"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
          </svg>
          View Full API Documentation
        </a>
      </div>
    </Container>
  </Container>
</BaseLayout>

<script>
  // Utility function to display quote results with proper error handling
  function displayQuote(containerId: string, data: any) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    if (data.error) {
      container.innerHTML = `<p class="text-red-500 text-sm">Error: ${data.message}</p>`;
      return;
    }

    if (data.quotes && Array.isArray(data.quotes)) {
      // Multiple quotes
      const quotesHtml = data.quotes.map((quote: any) => `
        <div class="mb-3 p-3 bg-[rgb(var(--color-bg-alt))] rounded border-l-4 border-blue-500">
          <p class="italic mb-1 text-sm">"${quote.text || 'No text available'}"</p>
          <p class="text-xs text-[rgb(var(--color-text-muted))]">— ${quote.author || 'Unknown'}, ${quote.work || 'Unknown work'}</p>
          <p class="text-xs text-[rgb(var(--color-text-muted))] mt-1">ID: ${quote.id || 'N/A'} | Difficulty: ${quote.difficulty || 'N/A'}</p>
        </div>
      `).join('');
      
      container.innerHTML = `
        <p class="text-xs text-[rgb(var(--color-text-muted))] mb-2">Found ${data.count || 0} quote(s):</p>
        ${quotesHtml}
      `;
    } else if (data.quote) {
      // Single quote
      const quote = data.quote;
      container.innerHTML = `
        <div class="p-3 bg-[rgb(var(--color-bg-alt))] rounded border-l-4 border-blue-500">
          <p class="italic mb-2 text-sm">"${quote.text || 'No text available'}"</p>
          <p class="text-xs text-[rgb(var(--color-text-muted))]">— ${quote.author || 'Unknown'}, ${quote.work || 'Unknown work'}</p>
          <p class="text-xs text-[rgb(var(--color-text-muted))] mt-1">ID: ${quote.id || 'N/A'} | Difficulty: ${quote.difficulty || 'N/A'} | Themes: ${(quote.themes && Array.isArray(quote.themes) ? quote.themes.join(', ') : 'N/A')}</p>
          ${quote.context || quote.modernRelevance ? `
            <details class="mt-2">
              <summary class="text-xs text-blue-500 cursor-pointer">Show context</summary>
              ${quote.context ? `<p class="text-xs text-[rgb(var(--color-text-muted))] mt-1">${quote.context}</p>` : ''}
              ${quote.modernRelevance ? `<p class="text-xs text-[rgb(var(--color-text-muted))] mt-1"><strong>Modern relevance:</strong> ${quote.modernRelevance}</p>` : ''}
            </details>
          ` : ''}
        </div>
      `;
    } else {
      container.innerHTML = `<p class="text-[rgb(var(--color-text-muted))] text-sm">No data received</p>`;
    }
  }

  // Random quote functionality
  document.getElementById('getRandomQuote')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/quotes?action=random');
      const data = await response.json();
      displayQuote('randomQuoteResult', data);
    } catch (error) {
      const container = document.getElementById('randomQuoteResult');
      if (container) {
        container.innerHTML = `<p class="text-red-500 text-sm">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>`;
      }
    }
  });

  // Quote by ID functionality
  document.getElementById('getQuoteById')?.addEventListener('click', async () => {
    const idInput = document.getElementById('quoteId') as HTMLInputElement;
    const id = idInput?.value;
    if (!id) {
      const container = document.getElementById('quoteByIdResult');
      if (container) {
        container.innerHTML = '<p class="text-red-500 text-sm">Please enter a quote ID</p>';
      }
      return;
    }

    try {
      const response = await fetch(`/api/quotes?action=id&id=${id}`);
      const data = await response.json();
      displayQuote('quoteByIdResult', data);
    } catch (error) {
      const container = document.getElementById('quoteByIdResult');
      if (container) {
        container.innerHTML = `<p class="text-red-500 text-sm">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>`;
      }
    }
  });

  // Quotes by author functionality
  document.getElementById('getQuotesByAuthor')?.addEventListener('click', async () => {
    const authorSelect = document.getElementById('authorSelect') as HTMLSelectElement;
    const author = authorSelect?.value;
    if (!author) {
      const container = document.getElementById('quotesByAuthorResult');
      if (container) {
        container.innerHTML = '<p class="text-red-500 text-sm">Please select an author</p>';
      }
      return;
    }

    try {
      const response = await fetch(`/api/quotes?action=author&author=${encodeURIComponent(author)}`);
      const data = await response.json();
      displayQuote('quotesByAuthorResult', data);
    } catch (error) {
      const container = document.getElementById('quotesByAuthorResult');
      if (container) {
        container.innerHTML = `<p class="text-red-500 text-sm">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>`;
      }
    }
  });

  // Quotes by theme functionality
  document.getElementById('getQuotesByTheme')?.addEventListener('click', async () => {
    const themeSelect = document.getElementById('themeSelect') as HTMLSelectElement;
    const theme = themeSelect?.value;
    if (!theme) {
      const container = document.getElementById('quotesByThemeResult');
      if (container) {
        container.innerHTML = '<p class="text-red-500 text-sm">Please select a theme</p>';
      }
      return;
    }

    try {
      const response = await fetch(`/api/quotes?action=theme&theme=${encodeURIComponent(theme)}`);
      const data = await response.json();
      displayQuote('quotesByThemeResult', data);
    } catch (error) {
      const container = document.getElementById('quotesByThemeResult');
      if (container) {
        container.innerHTML = `<p class="text-red-500 text-sm">Error: ${error instanceof Error ? error.message : 'Unknown error'}</p>`;
      }
    }
  });

  // Load a random quote on page load
  window.addEventListener('load', () => {
    document.getElementById('getRandomQuote')?.click();
  });
</script> 