---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard.astro';
import { categories } from '../../data/categories';
import { getCollection, type CollectionEntry } from 'astro:content';

export const prerender = true;

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	const uniqueCategories = [...new Set(posts.flatMap(post => post.data.category || []))];
	
	return uniqueCategories.map(category => ({
		params: { category },
		props: { category }
	}));
}

const { category: categoryParam } = Astro.props;
const posts = await getCollection('blog', post => post.data.category?.includes(categoryParam));
const categoryData = categories.find(cat => cat.id === categoryParam);

// If category doesn't exist, redirect to category listing
if (!categoryData) {
	return Astro.redirect('/categories');
}

// Get all blog posts for this category and sort by date
const sortedPosts = posts
	.filter((post) => !post.data.draft)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Group by translationGroup (or fallback to id)
const grouped: Record<string, CollectionEntry<'blog'>[]> = {};
for (const post of sortedPosts) {
	const group = post.data.translationGroup || post.id;
	if (!grouped[group]) grouped[group] = [];
	grouped[group].push(post);
}
const groupedPosts: CollectionEntry<'blog'>[][] = Object.values(grouped);
---

<BaseLayout title={`${categoryData.name} - StrongVault`}>
	<main class="max-w-5xl mx-auto px-4 md:px-8 py-12">
		<header class="text-center mb-16">
			<nav aria-label="Breadcrumb" class="flex justify-center">
				<a href="/category" class="inline-flex items-center gap-1.5 text-neutral-600 dark:text-neutral-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors duration-300">
					<span class="text-lg">‚Üê</span>
					<span class="text-base font-medium">Back to Categories</span>
				</a>
			</nav>
			<h1 class="text-4xl md:text-5xl font-bold mb-4 text-text dark:text-text-dark">{categoryData.icon} {categoryData.name}</h1>
			<p class="text-xl text-neutral-600 dark:text-neutral-400">{categoryData.description}</p>
		</header>

		<section class="grid gap-8 md:gap-12" aria-label="Posts in this category">
			{groupedPosts.map((translations) => {
				const main = translations[0];
				return (
					<PostCard 
						post={main} 
						translations={translations.map(t => ({
							id: t.id,
							language: t.data.language[0]
						}))}
					/>
				);
			})}
		</section>
	</main>
</BaseLayout>

<style>
	/* Smooth transitions for dark mode */
	main {
		transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),
					color 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Respect reduced motion preferences */
	@media (prefers-reduced-motion: reduce) {
		main {
			transition: none !important;
		}
	}
</style> 