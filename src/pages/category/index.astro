---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageHeader from '../../components/PageHeader.astro';
import CategoryCard from '../../components/CategoryCard.astro';
import Container from '../../components/Container.astro';
import { getCollection } from 'astro:content';
import { categories } from '../../data/categories';

// Get all posts
const posts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Get post counts by category
const postCounts = categories.reduce((acc, category) => {
  acc[category.id] = posts.filter(post => post.data.category?.includes(category.id)).length;
  return acc;
}, {} as Record<string, number>);

// Sort categories by post count (most popular first)
const sortedCategories = categories
  .filter(category => postCounts[category.id] > 0)
  .sort((a, b) => postCounts[b.id] - postCounts[a.id]);
---

<BaseLayout
  title="Categories"
  description="Browse writings by category"
  path="/category"
  structuredDataType="website"
>
  <Container>
    <Container maxWidth="container" padding="none">
      <PageHeader 
        title="Categories"
        description="Browse writings by category"
      />
      
      {/* Categories Grid */}
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mt-12">
        {sortedCategories.map((category, index) => (
          <CategoryCard 
            category={category}
            postCount={postCounts[category.id]}
            featured={index < 3}
          />
        ))}
      </div>
      
      {/* Empty State */}
      {sortedCategories.length === 0 && (
        <div class="text-center py-16">
          <div class="max-w-md mx-auto">
            <div class="text-4xl mb-4">üìÅ</div>
            <h3 class="text-xl font-semibold text-[rgb(var(--color-text))] mb-2">
              No categories found
            </h3>
            <p class="text-[rgb(var(--color-text-muted))]">
              Categories will appear here once writings are published.
            </p>
          </div>
        </div>
      )}
    </Container>
  </Container>
</BaseLayout>

<style>
  /* Smooth transitions for dark mode */
  main {
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    main {
      transition: none !important;
    }
  }
</style> 