---
import BaseLayout from '../../layouts/BaseLayout.astro';
import LayoutContainer from '../../components/LayoutContainer.astro';
import { categories } from '../../data/categories';
import { getCollection } from 'astro:content';

// Get all posts
const posts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Get post counts by category
const postCounts = categories.reduce((acc, category) => {
  acc[category.id] = posts.filter(post => post.data.category?.includes(category.id)).length;
  return acc;
}, {} as Record<string, number>);
---

<BaseLayout
  title="Categories"
  description="Browse posts by category"
  fullWidth={true}
  containerPadding="xl"
  contentMaxWidth="container"
>
  {/* Page Header */}
  <LayoutContainer padding="none" maxWidth="prose-wide" class="mb-16">
		<h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-text dark:text-text-dark leading-tight tracking-tight mb-6">
      Categories
    </h1>
		<p class="text-xl md:text-2xl text-neutral-600 dark:text-neutral-400 leading-relaxed">
      Browse posts by category
    </p>
  </LayoutContainer>

  {/* Categories Grid */}
  <LayoutContainer padding="none" maxWidth="container">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {categories.map(category => {
        const postCount = postCounts[category.id] || 0;
        return (
          <a
            href={`/category/${category.id}/`}
            class="flex items-center justify-between p-4 rounded-lg bg-background-alt hover:bg-background-alt/80 transition-colors"
          >
            <div class="flex items-center gap-3">
              <span class="text-2xl" aria-hidden="true">{category.icon}</span>
              <span class="font-medium text-text dark:text-text-dark">{category.name}</span>
            </div>
            <span class="text-sm text-text-muted">{postCount} {postCount === 1 ? 'post' : 'posts'}</span>
          </a>
        );
      })}
    </div>
  </LayoutContainer>
</BaseLayout>

<style>
  /* Smooth transitions for dark mode */
  main {
    transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),
                color 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    main {
      transition: none !important;
    }
  }
</style> 