---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard.astro';
import SearchBar from '../../components/SearchBar.astro';
import { getCollection } from 'astro:content';

// Get the search query from URL parameters
const searchParams = Astro.url.searchParams;
const searchQuery = searchParams.get('q')?.toLowerCase() || '';

// Get all blog posts
const allPosts = await getCollection('blog');
const posts = allPosts.filter(post => !post.data.draft);

// Search through posts
const searchResults = posts.filter(post => {
  const searchableContent = [
    post.data.title,
    post.data.description,
    post.data.tags?.join(' '),
    post.data.category?.join(' '),
    post.data.subcategory
  ].filter(Boolean).join(' ').toLowerCase();

  // Split search query into words and check if all words are present
  const searchWords = searchQuery.split(/\s+/).filter(Boolean);
  return searchWords.every(word => searchableContent.includes(word));
});

// Sort results by date
const sortedResults = searchResults.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Group by translationGroup (or fallback to id)
const grouped = {};
for (const post of sortedResults) {
  const group = post.data.translationGroup || post.id;
  if (!grouped[group]) grouped[group] = [];
  grouped[group].push(post);
}
const groupedResults = Object.values(grouped);

const pageTitle = `Search Results${searchQuery ? ` for \"${searchQuery}\"` : ''} - StrongVault`;
const hasResults = searchQuery && groupedResults.length > 0;
---

<BaseLayout title={pageTitle}>
  <main class="max-w-5xl mx-auto px-4 md:px-8 py-12">
    <header class="text-center mb-16">
      <h1 class="text-4xl md:text-5xl font-bold mb-4 text-text dark:text-text-dark">Search</h1>
      <!-- Search Form -->
      <div class="max-w-md mx-auto mb-8">
        <SearchBar value={searchQuery} />
      </div>
      {searchQuery && (
        <p class="text-xl text-neutral-600 dark:text-neutral-400">
          Found {groupedResults.length} {groupedResults.length === 1 ? 'result' : 'results'} for "{searchQuery}"
        </p>
      )}
    </header>

    {hasResults && (
      <section class="grid gap-8 md:gap-12" aria-label="Search results">
        {groupedResults.map((translations) => {
          const main = translations[0];
          return (
            <PostCard 
              post={main} 
              translations={translations.map(t => ({
                id: t.id,
                language: t.data.language[0]
              }))}
            />
          );
        })}
      </section>
    )}
    {!hasResults && searchQuery && (
      <div class="text-center">
        <p class="text-xl text-neutral-600 dark:text-neutral-400">
          No results found for "{searchQuery}"
        </p>
      </div>
    )}
    {!searchQuery && (
      <div class="text-center">
        <p class="text-xl text-neutral-600 dark:text-neutral-400">
          Enter a search term to find content on the site.
        </p>
      </div>
    )}
  </main>
</BaseLayout>

<style>
  /* Smooth transitions for dark mode */
  main {
    transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),
                color 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    main {
      transition: none !important;
    }
  }
</style> 