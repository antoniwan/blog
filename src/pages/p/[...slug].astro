---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogLayout from '../../layouts/BlogLayout.astro';
import { render } from 'astro:content';
import { generateKeywords, generateImageAlt } from '../../utils/seo';
import { AUTHOR } from '../../consts';

export const prerender = true;

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await render(post);

// Auto-generate keywords from tags and categories
const keywords = generateKeywords(
	post.data.tags || [],
	post.data.category || []
);

// Auto-generate image alt text
const imageAlt = generateImageAlt(post.data.title);

// Use author from post data or fall back to default author from consts
const author = post.data.author || AUTHOR.name;

// Generate table of contents from headings
const headings = post.body?.match(/<h[2-3][^>]*>.*?<\/h[2-3]>/g) || [];
const tableOfContents = headings.map(heading => {
	const text = heading.replace(/<[^>]+>/g, '');
	const level = parseInt(heading.match(/<h([2-3])/)?.[1] || '2');
	const slug = text.toLowerCase().replace(/[^a-z0-9]+/g, '-');
	return { text, slug, level };
});
---

<BlogLayout 
	title={post.data.title}
	description={post.data.description}
	pubDate={post.data.pubDate}
	updatedDate={post.data.updatedDate}
	heroImage={post.data.heroImage}
	readingTime={post.data.readingTime}
	tags={post.data.tags}
	category={post.data.category}
	path={`/p/${post.id}`}
	imageAlt={imageAlt}
	author={author}
	keywords={keywords}
	tableOfContents={tableOfContents}
	showComments={post.data.showComments}
>
	<Content />
</BlogLayout> 