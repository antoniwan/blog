---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogLayout from '../../layouts/BlogLayout.astro';
import { render } from 'astro:content';
import { generateKeywords, generateImageAlt } from '../../utils/seo';
import { getTranslationData } from '../../utils/translationUtils';
import { calculateReadingTimeFromMarkdown } from '../../utils/readingTime';
import { AUTHOR } from '../../consts';
import { categories } from '../../data/categories';

export const prerender = true;

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.id.split('/').pop() }, // Extract just the filename without year folder
		props: { post, allPosts: posts },
	}));
}
interface Props {
	post: CollectionEntry<'blog'>;
	allPosts: CollectionEntry<'blog'>[];
}

const { post, allPosts } = Astro.props;
const { Content } = await render(post);

// Calculate reading time from post content
const readingTime = calculateReadingTimeFromMarkdown(post.body || '');

// Auto-generate keywords from tags and categories
const keywords = generateKeywords(
	post.data.tags || [],
	post.data.category || []
);

// Auto-generate image alt text
const imageAlt = generateImageAlt(post.data.title);

// Use author from post data or fall back to default author from consts
const author = post.data.author || AUTHOR.name;

// Get category name from category ID
const categoryName = post.data.category && post.data.category.length > 0 
  ? categories.find(cat => cat.id === post.data.category![0])?.name || post.data.category![0]
  : null;

// Generate table of contents from headings
const headings = post.body?.match(/<h[2-3][^>]*>.*?<\/h[2-3]>/g) || [];
const tableOfContents = headings.map(heading => {
	const text = heading.replace(/<[^>]+>/g, '');
	const level = parseInt(heading.match(/<h([2-3])/)?.[1] || '2');
	const slug = text.toLowerCase().replace(/[^a-z0-9]+/g, '-');
	return { text, slug, level };
});

// Get translation data
const translationData = await getTranslationData(post, allPosts);
---

<BlogLayout 
	title={post.data.title}
	description={post.data.description}
	pubDate={post.data.pubDate}
	updatedDate={post.data.updatedDate}
	heroImage={post.data.heroImage}
	minutesRead={readingTime}
	tags={post.data.tags}
	category={post.data.category}
	categoryName={categoryName}
	path={`/p/${post.id.split('/').pop()}`}
	imageAlt={imageAlt}
	author={author}
	keywords={keywords}
	tableOfContents={tableOfContents}
	showComments={post.data.showComments}
	translationData={translationData}
>
	<Content />
</BlogLayout> 