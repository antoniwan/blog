---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageHeader from '../../components/PageHeader.astro';
import TagCloud from '../../components/TagCloud.astro';
import Container from '../../components/Container.astro';
import { getCollection } from 'astro:content';

// Get all posts
const posts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Get post counts by tag
const tagCounts = posts.reduce((acc, post) => {
  post.data.tags?.forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// Sort tags by post count
const sortedTags = Object.entries(tagCounts)
  .sort(([, a], [, b]) => b - a)
  .map(([tag]) => tag);

// Calculate tag sizes for cloud view
const maxCount = Math.max(...Object.values(tagCounts));
const minCount = Math.min(...Object.values(tagCounts));
const tagSizes = Object.entries(tagCounts).reduce((acc, [tag, count]) => {
  // Scale font size between 0.875rem (14px) and 2.5rem (40px)
  const size = 0.875 + (count - minCount) / (maxCount - minCount) * 1.625;
  acc[tag] = Math.max(0.875, Math.min(2.5, size));
  return acc;
}, {} as Record<string, number>);

// Prepare tags data for TagCloud component
const tagsData = sortedTags.map(tag => ({
  tag,
  count: tagCounts[tag],
  size: tagSizes[tag]
}));
---

<BaseLayout
  title="Tags"
  description="Browse posts by tag"
  path="/tag"
  structuredDataType="website"
>
  <Container>
    <Container maxWidth="container" padding="none">
      <PageHeader 
        title="Tags"
        description="Browse posts by tag"
      />
      
      {/* Tag Cloud */}
      <div class="mt-12">
        <TagCloud tags={tagsData} />
      </div>
      
      {/* Empty State */}
      {sortedTags.length === 0 && (
        <div class="text-center py-12">
          <p class="text-[rgb(var(--color-text-muted))]">
            No tags found yet.
          </p>
        </div>
      )}
    </Container>
  </Container>
</BaseLayout>

<style>
  /* Smooth transitions for dark mode */
  main {
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    main {
      transition: none !important;
    }
  }
</style> 