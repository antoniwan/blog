---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageHeader from '../../components/PageHeader.astro';
import { getCollection } from 'astro:content';
import { generateStructuredData } from '../../utils/structuredData';
import { generateKeywords } from '../../utils/seo';

// Get all posts
const posts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Get post counts by tag
const tagCounts = posts.reduce((acc, post) => {
  post.data.tags?.forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// Sort tags by post count
const sortedTags = Object.entries(tagCounts)
  .sort(([, a], [, b]) => b - a)
  .map(([tag]) => tag);

// Generate structured data for tags page
const structuredData = generateStructuredData({
  title: 'Tags',
  description: 'Browse posts by tag',
  path: '/tag',
  type: 'website',
  author: 'Antoniwan'
});

// Auto-generate keywords
const keywords = generateKeywords(sortedTags, []);
---

<BaseLayout
  title="Tags"
  description="Browse posts by tag"
  path="/tag"
  keywords={keywords}
>
  <!-- Structured Data -->
  {Array.isArray(structuredData) ? 
    structuredData.map((schema, index) => (
      <script type="application/ld+json" set:html={JSON.stringify(schema)} />
    ))
    :
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  }
  
  <div class="w-full px-4 md:px-6 lg:px-8 xl:px-12">
    <div class="max-w-container mx-auto">
      <PageHeader 
        title="Tags"
        description="Browse posts by tag"
      />
      
      {/* Tags Grid */}
      <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3 mt-12">
        {sortedTags.map(tag => (
          <a 
            href={`/tag/${tag}/`}
            class="block p-4 bg-neutral-50 dark:bg-neutral-900 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
          >
            <h3 class="text-lg font-semibold mb-2">#{tag}</h3>
            <div class="flex items-center justify-between">
              <span class="text-sm text-neutral-500 dark:text-neutral-500">
                {tagCounts[tag]} posts
              </span>
              <span class="text-primary-500 dark:text-primary-400">â†’</span>
            </div>
          </a>
        ))}
      </div>
      
      {/* Empty State */}
      {sortedTags.length === 0 && (
        <div class="text-center py-12">
          <p class="text-neutral-600 dark:text-neutral-400">
            No tags found yet.
          </p>
        </div>
      )}
    </div>
  </div>
</BaseLayout>

<style>
  /* Smooth transitions for dark mode */
  main {
    transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),
        color 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    main {
      transition: none !important;
    }
  }
</style> 