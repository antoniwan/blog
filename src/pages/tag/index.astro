---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageHeader from '../../components/PageHeader.astro';
import TagCard from '../../components/TagCard.astro';
import Container from '../../components/Container.astro';
import { getCollection } from 'astro:content';

// Get all posts and calculate tag counts
const posts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Calculate tag counts
const tagCounts: Record<string, number> = {};
posts.forEach((post) => {
  post.data.tags?.forEach((tag) => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});

// Sort tags by count (most popular first)
const sortedTagCounts = Object.entries(tagCounts)
  .sort(([,a], [,b]) => b - a)
  .map(([tag, count]) => ({ tag, count }));

// Get top tags for quick access
const topTags = sortedTagCounts.slice(0, 12);
---

<BaseLayout
  title="Tags"
  description="Browse all tags to discover content by topic. Find posts about parenting, mental health, technology, philosophy, and more."
  path="/tag"
  structuredDataType="website"
>
  <Container>
    <Container maxWidth="container" padding="none">
      <PageHeader 
        title="Tags"
        description="Browse all tags to discover content by topic. Find posts about parenting, mental health, technology, philosophy, and more."
      />
      
      {/* Popular Tags */}
      {topTags.length > 0 && (
        <section class="mb-12">
          <h2 class="text-heading text-[rgb(var(--color-text))] mb-6">Popular Tags</h2>
          <div class="flex flex-wrap gap-2">
            {topTags.map(({ tag, count }) => (
              <TagCard tag={tag} count={count} size="lg" showCount={true} />
            ))}
          </div>
        </section>
      )}

      {/* All Tags */}
      <section>
        <h2 class="text-heading text-[rgb(var(--color-text))] mb-6">All Tags</h2>
        <div class="bg-[rgb(var(--color-bg-alt))]/5 rounded-lg p-6">
          <div class="flex flex-wrap gap-2">
            {sortedTagCounts.map(({ tag, count }) => (
              <TagCard tag={tag} count={count} size="md" variant="subtle" showCount={true} />
            ))}
          </div>
        </div>
      </section>

      {/* Empty State */}
      {Object.keys(tagCounts).length === 0 && (
        <div class="text-center py-12">
          <p class="text-body-large text-[rgb(var(--color-text-muted))]">
            No tags found yet.
          </p>
        </div>
      )}
    </Container>
  </Container>
</BaseLayout>

<style>
  main {
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  @media (prefers-reduced-motion: reduce) {
    main {
      transition: none !important;
    }
  }
</style> 
