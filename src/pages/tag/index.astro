---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageHeader from '../../components/PageHeader.astro';
import { getCollection } from 'astro:content';
import { generateStructuredData } from '../../utils/structuredData';
import { generateCanonicalUrl } from '../../utils/seo';

// Get all posts
const posts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Get post counts by tag
const tagCounts = posts.reduce((acc, post) => {
  post.data.tags?.forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// Sort tags by post count
const sortedTags = Object.entries(tagCounts)
  .sort(([, a], [, b]) => b - a)
  .map(([tag]) => tag);

// Generate canonical URL
const canonical = generateCanonicalUrl('/tag');

// Generate structured data for tags page
const structuredData = generateStructuredData({
  title: 'Tags',
  description: 'Browse posts by tag',
  url: canonical,
  type: 'website',
  author: 'Antoniwan'
});
---

<BaseLayout
  title="Tags"
  description="Browse posts by tag"
  canonicalUrl={canonical}
>
  <!-- Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  
  <div class="w-full px-4 md:px-6 lg:px-8 xl:px-12">
    {/* Page Header */}
    <div class="max-w-container mx-auto">
      <PageHeader 
        title="Tags"
        description="Browse posts by tag"
      />
    </div>

    {/* Tags Grid */}
    <div class="max-w-container mx-auto">
      <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {sortedTags.map((tag) => (
          <a
            href={`/tag/${tag}/`}
            class="group block p-4 rounded-lg border border-neutral-200 dark:border-neutral-700 hover:border-primary-300 dark:hover:border-primary-600 transition-colors"
          >
            <div class="flex items-center justify-between">
              <span class="font-medium text-text dark:text-text-dark group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
                #{tag}
              </span>
              <span class="text-sm text-neutral-500 dark:text-neutral-500">
                {tagCounts[tag]}
              </span>
            </div>
          </a>
        ))}
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Smooth transitions for dark mode */
  main {
    transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1),
        color 300ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    main {
      transition: none !important;
    }
  }
</style> 