---
import PageLayout from '../layouts/PageLayout.astro';
import Container from '../components/Container.astro';
import Chapter from '../components/Chapter.astro';
import { getCollection } from 'astro:content';

// Get all published posts
const allPosts = await getCollection('blog', ({ data }) => {
	return import.meta.env.PROD ? !data.draft : true;
});

// Define seasonal chapter structure
interface SeasonalChapter {
	id: string;
	title: string;
	year: number;
	season: string;
	startDate: Date;
	endDate: Date;
	posts: any[];
}

// Helper function to determine season based on date
function getSeason(date: Date): string {
	const month = date.getMonth();
	if (month >= 2 && month <= 4) return 'Spring';
	if (month >= 5 && month <= 7) return 'Summer';
	if (month >= 8 && month <= 10) return 'Fall';
	return 'Winter';
}

// Helper function to get season start and end dates
function getSeasonDates(year: number, season: string): { startDate: Date; endDate: Date } {
	switch (season) {
		case 'Spring':
			return {
				startDate: new Date(year, 2, 1), // March 1
				endDate: new Date(year, 5, 31)   // May 31
			};
		case 'Summer':
			return {
				startDate: new Date(year, 5, 1), // June 1
				endDate: new Date(year, 8, 31)   // August 31
			};
		case 'Fall':
			return {
				startDate: new Date(year, 8, 1), // September 1
				endDate: new Date(year, 11, 30)  // November 30
			};
		case 'Winter':
			return {
				startDate: new Date(year, 11, 1), // December 1
				endDate: new Date(year + 1, 2, 28) // February 28/29
			};
		default:
			return {
				startDate: new Date(year, 0, 1),
				endDate: new Date(year, 11, 31)
			};
	}
}

// Generate seasonal chapters
function generateSeasonalChapters(posts: typeof allPosts): SeasonalChapter[] {
	const chapters: SeasonalChapter[] = [];
	const currentDate = new Date();
	const currentYear = currentDate.getFullYear();
	const currentSeason = getSeason(currentDate);
	
	// Get the earliest post date to determine how far back to go
	const sortedPosts = posts.sort((a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf());
	const earliestPostDate = sortedPosts[0]?.data.pubDate || currentDate;
	const earliestYear = earliestPostDate.getFullYear();
	
	// Create chapters from current season backwards to earliest post
	const seasons = ['Winter', 'Spring', 'Summer', 'Fall'];
	
	for (let year = currentYear; year >= earliestYear; year--) {
		// For current year, start from current season
		// For past years, include all seasons
		const startSeasonIndex = year === currentYear ? seasons.indexOf(currentSeason) : 0;
		
		for (let i = startSeasonIndex; i < seasons.length; i++) {
			const season = seasons[i];
			const { startDate, endDate } = getSeasonDates(year, season);
			
			// Skip future seasons
			if (startDate > currentDate) continue;
			
			// Skip seasons before earliest post
			if (endDate < earliestPostDate) continue;
			
			const chapterId = `${season.toLowerCase()}-${year}`;
			const chapterTitle = `${season} ${year}`;
			
			chapters.push({
				id: chapterId,
				title: chapterTitle,
				year,
				season,
				startDate,
				endDate,
				posts: []
			});
		}
	}
	
	return chapters;
}

// Generate the seasonal chapters
const seasonalChapters = generateSeasonalChapters(allPosts);

// Filter posts for each seasonal chapter
seasonalChapters.forEach(chapter => {
	chapter.posts = allPosts.filter(post => {
		const postDate = post.data.pubDate;
		return postDate >= chapter.startDate && postDate <= chapter.endDate;
	}).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
});

// Remove empty chapters
const nonEmptyChapters = seasonalChapters.filter(chapter => chapter.posts.length > 0);
---

<PageLayout
	title="Seasonal Reading Path - Curious Chaos Journal"
	description="A journey through thoughts and ideas organized by the natural rhythm of seasons."
	path="/guided-path"
>
	<Container>
		<div class="guided-path">
			<div class="path-intro">
				<h1>Seasonal Reading Path</h1>
				<p class="intro-text">
					Welcome to a new way of reading online publications. Instead of endless scrolling through 
					chronological feeds, here you'll find thoughts and ideas organized by the natural rhythm 
					of seasons. Each chapter represents a season of a year, allowing you to say "I already 
					read Fall 2023" or "I'm currently in Spring 2024."
				</p>
				<p class="intro-text">
					This approach respects the cyclical nature of growth and reflection, mirroring how we 
					experience life through changing seasons. Start with the current season and work your 
					way through the chapters that resonate with where you are in your journey.
				</p>
			</div>
			
			<div class="chapters">
				{nonEmptyChapters.map((chapter, index) => (
					<Chapter 
						posts={chapter.posts} 
						chapterTitle={chapter.title}
						chapterId={chapter.id}
						defaultExpanded={index === 0}
					/>
				))}
			</div>
			
			<div class="total-progress-summary">
				<div class="progress-header">
					<h3>Your Reading Journey</h3>
					<div class="total-progress" id="total-progress">
						<div class="total-progress-bar">
							<div class="total-progress-fill" id="total-progress-fill"></div>
						</div>
						<span class="total-progress-text" id="total-progress-text">0%</span>
					</div>
				</div>
				<div class="progress-stats" id="progress-stats">
					<div class="stat">
						<span class="stat-number" id="total-posts">0</span>
						<span class="stat-label">Total Posts</span>
					</div>
					<div class="stat">
						<span class="stat-number" id="read-posts">0</span>
						<span class="stat-label">Read</span>
					</div>
					<div class="stat">
						<span class="stat-number" id="remaining-posts">0</span>
						<span class="stat-label">Remaining</span>
					</div>
					<div class="stat">
						<span class="stat-number" id="completed-chapters">0</span>
						<span class="stat-label">Completed Seasons</span>
					</div>
				</div>
				<div class="completion-message" id="completion-message" style="display: none;">
					<div class="celebration">
						üéâ <strong>Congratulations!</strong> üéâ
					</div>
					<p>You've completed the entire Seasonal Reading Path! You've journeyed through all the thoughts and ideas, experiencing the full cycle of seasons and growth. This is a remarkable achievement that reflects your commitment to personal development and intellectual exploration.</p>
					<p>Consider revisiting your favorite seasons or exploring new themes that emerged during your reading journey. The path is always here for you to return to.</p>
				</div>
			</div>
			
			<div class="reading-philosophy">
				<h3>Reading Philosophy</h3>
				<p>
					This seasonal approach transforms reading from a linear consumption into a cyclical journey. 
					Each season brings different themes, moods, and insights that naturally align with the 
					rhythms of life and nature.
				</p>
				
				<div class="seasonal-themes">
					<div class="theme">
						<h4>üå± Spring</h4>
						<p>New beginnings, growth, and fresh perspectives</p>
					</div>
					<div class="theme">
						<h4>‚òÄÔ∏è Summer</h4>
						<p>Peak energy, exploration, and outward expression</p>
					</div>
					<div class="theme">
						<h4>üçÇ Fall</h4>
						<p>Reflection, harvest, and preparation for change</p>
					</div>
					<div class="theme">
						<h4>‚ùÑÔ∏è Winter</h4>
						<p>Introspection, rest, and inner transformation</p>
					</div>
				</div>
				
				<p>
					<strong>Your reading journey is tracked locally in your browser</strong> ‚Äî completely private 
					and under your control. This helps you see patterns in your thinking and track your growth 
					through these seasonal cycles of ideas and insights.
				</p>
			</div>
		</div>
	</Container>
</PageLayout>

<script>
	// Total progress tracking
	class TotalProgressTracker {
		constructor() {
			this.init();
		}

		private updateTotalProgress(): void {
			const totalProgressFill = document.getElementById('total-progress-fill') as HTMLElement;
			const totalProgressText = document.getElementById('total-progress-text') as HTMLElement;
			const totalPostsElement = document.getElementById('total-posts') as HTMLElement;
			const readPostsElement = document.getElementById('read-posts') as HTMLElement;
			const remainingPostsElement = document.getElementById('remaining-posts') as HTMLElement;
			const completedChaptersElement = document.getElementById('completed-chapters') as HTMLElement;
			const completionMessage = document.getElementById('completion-message') as HTMLElement;

			if (!totalProgressFill || !totalProgressText) return;

			// Calculate totals
			const allPosts = document.querySelectorAll('.post-item');
			const readPosts = document.querySelectorAll('.post-item .read-status.read');
			const completedChapters = document.querySelectorAll('.chapter-progress.completed');

			const totalPosts = allPosts.length;
			const readCount = readPosts.length;
			const remainingCount = totalPosts - readCount;
			const completedChaptersCount = completedChapters.length;
			const percentage = totalPosts > 0 ? Math.round((readCount / totalPosts) * 100) : 0;

			// Update progress bar
			totalProgressFill.style.width = `${percentage}%`;

			// Update text elements
			if (totalProgressText) totalProgressText.textContent = `${percentage}%`;
			if (totalPostsElement) totalPostsElement.textContent = totalPosts.toString();
			if (readPostsElement) readPostsElement.textContent = readCount.toString();
			if (remainingPostsElement) remainingPostsElement.textContent = remainingCount.toString();
			if (completedChaptersElement) completedChaptersElement.textContent = completedChaptersCount.toString();

			// Show/hide completion message
			if (completionMessage) {
				if (percentage === 100) {
					completionMessage.style.display = 'block';
					totalProgressFill.style.background = 'rgb(34, 197, 94)';
					totalProgressText.style.color = 'rgb(34, 197, 94)';
					totalProgressText.style.fontWeight = '600';
				} else {
					completionMessage.style.display = 'none';
					totalProgressFill.style.background = 'rgb(var(--color-primary))';
					totalProgressText.style.color = 'rgb(var(--color-text-muted))';
					totalProgressText.style.fontWeight = '500';
				}
			}
		}

		private init(): void {
			// Update on page load
			this.updateTotalProgress();

			// Listen for progress updates
			window.addEventListener('post-read', () => {
				setTimeout(() => this.updateTotalProgress(), 100);
			});

			window.addEventListener('read-posts-cleared', () => {
				setTimeout(() => this.updateTotalProgress(), 100);
			});
		}
	}

	// Initialize when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			new TotalProgressTracker();
		});
	} else {
		new TotalProgressTracker();
	}
</script>

<style>
	.guided-path {
		padding: 2rem 0;
	}

	.path-intro {
		max-width: 800px;
		margin: 0 auto 3rem;
		text-align: center;
	}

	.path-intro h1 {
		font-size: 2.5rem;
		font-weight: 700;
		margin-bottom: 1.5rem;
		color: rgb(var(--color-text));
	}

	.intro-text {
		font-size: 1.125rem;
		line-height: 1.7;
		color: rgb(var(--color-text-muted));
		margin-bottom: 1rem;
	}

	.chapters {
		max-width: 800px;
		margin: 0 auto;
	}

	.total-progress-summary {
		max-width: 800px;
		margin: 3rem auto;
		padding: 2rem;
		background: rgb(var(--color-bg-alt));
		border-radius: 12px;
		border: 1px solid rgb(var(--color-border));
	}

	.progress-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin-bottom: 1.5rem;
	}

	.progress-header h3 {
		font-size: 1.25rem;
		font-weight: 600;
		color: rgb(var(--color-text));
		margin: 0;
	}

	.total-progress {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.total-progress-bar {
		width: 120px;
		height: 8px;
		background: rgb(var(--color-border));
		border-radius: 4px;
		overflow: hidden;
	}

	.total-progress-fill {
		height: 100%;
		background: rgb(var(--color-primary));
		border-radius: 4px;
		width: 0%;
		transition: width 0.3s ease, background-color 0.3s ease;
	}

	.total-progress-text {
		font-size: 1rem;
		font-weight: 500;
		color: rgb(var(--color-text-muted));
		min-width: 3rem;
		text-align: right;
		transition: color 0.3s ease, font-weight 0.3s ease;
	}

	.progress-stats {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
		gap: 1.5rem;
		margin-bottom: 2rem;
	}

	.stat {
		text-align: center;
		padding: 1rem;
		background: rgb(var(--color-bg));
		border-radius: 8px;
		border: 1px solid rgb(var(--color-border));
	}

	.stat-number {
		display: block;
		font-size: 1.5rem;
		font-weight: 700;
		color: rgb(var(--color-text));
		margin-bottom: 0.25rem;
	}

	.stat-label {
		font-size: 0.875rem;
		color: rgb(var(--color-text-muted));
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	.completion-message {
		padding: 1.5rem;
		background: rgb(34, 197, 94, 0.1);
		border: 1px solid rgb(34, 197, 94, 0.2);
		border-radius: 8px;
		text-align: center;
	}

	.celebration {
		font-size: 1.25rem;
		margin-bottom: 1rem;
		color: rgb(34, 197, 94);
	}

	.completion-message p {
		margin-bottom: 1rem;
		line-height: 1.6;
		color: rgb(var(--color-text-muted));
	}

	.completion-message p:last-child {
		margin-bottom: 0;
	}

	.reading-philosophy {
		max-width: 800px;
		margin: 4rem auto 0;
		padding: 2rem;
		background: rgb(var(--color-bg-alt));
		border-radius: 12px;
		border: 1px solid rgb(var(--color-border));
	}

	.reading-philosophy h3 {
		font-size: 1.25rem;
		font-weight: 600;
		margin-bottom: 1rem;
		color: rgb(var(--color-text));
	}

	.reading-philosophy p {
		margin-bottom: 1.5rem;
		line-height: 1.6;
		color: rgb(var(--color-text-muted));
	}

	.seasonal-themes {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1.5rem;
		margin: 2rem 0;
	}

	.theme {
		padding: 1rem;
		background: rgb(var(--color-bg));
		border-radius: 8px;
		border: 1px solid rgb(var(--color-border));
		text-align: center;
	}

	.theme h4 {
		font-size: 1rem;
		font-weight: 600;
		margin-bottom: 0.5rem;
		color: rgb(var(--color-text));
	}

	.theme p {
		font-size: 0.875rem;
		color: rgb(var(--color-text-muted));
		margin: 0;
	}

	.reading-philosophy strong {
		color: rgb(var(--color-text));
		font-weight: 600;
	}

	@media (max-width: 768px) {
		.path-intro h1 {
			font-size: 2rem;
		}
		
		.seasonal-themes {
			grid-template-columns: 1fr;
		}

		.progress-header {
			flex-direction: column;
			gap: 1rem;
			text-align: center;
		}

		.progress-stats {
			grid-template-columns: repeat(2, 1fr);
		}

		.chapter-meta {
			flex-direction: column;
			gap: 0.5rem;
			align-items: flex-start;
		}

		.chapter-progress {
			min-width: 100px;
		}
	}
</style> 