---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import BaseHead from '../components/BaseHead.astro';
import BackToTop from '../components/BackToTop.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import Analytics from '@vercel/analytics/astro';

interface Props {
  title: string;
  description?: string;
  // Blog-specific props
  pubDate?: Date;
  updatedDate?: Date;
  heroImage?: string;
  readingTime?: number;
  tags?: string[];
  category?: string[];
  subcategory?: string;
  language?: string[];
  // SEO fields
  canonicalUrl?: string;
  ogImage?: string;
  ogImageAlt?: string;
  robots?: {
    index?: boolean;
    follow?: boolean;
    noarchive?: boolean;
    nosnippet?: boolean;
    noimageindex?: boolean;
  };
  // Layout type
  layoutType?: 'default' | 'blog';
}

const { 
  title, 
  description = SITE_DESCRIPTION,
  pubDate,
  updatedDate,
  heroImage,
  readingTime,
  tags,
  category = [],
  subcategory,
  language = ['en'],
  canonicalUrl,
  ogImage,
  ogImageAlt,
  robots,
  layoutType = 'default'
} = Astro.props;

const languageEmojis: Record<string, string> = {
  en: 'üá∫üá∏',
  es: 'üáµüá∑'
};

const categoryEmojis: Record<string, string> = {
  'art-expression': 'üéµ',
  'diy-creation': 'üõ†Ô∏è',
  'integration-growth': 'üßòüèΩ‚Äç‚ôÇÔ∏è',
  'learning-projects': 'üìö',
  'metaspace': 'üåÄ',
  'parenting': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
  'politics': '‚öñÔ∏è',
  'psychology': 'üß†',
  'systems-strategy': 'üíª'
};

const capitalize = (str: string) => str ? str.charAt(0).toUpperCase() + str.slice(1) : '';
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead 
      title={title} 
      description={description}
      image={heroImage}
      canonicalUrl={canonicalUrl}
      ogImage={ogImage}
      ogImageAlt={ogImageAlt}
      robots={robots}
      pubDate={pubDate}
      updatedDate={updatedDate}
      author={SITE_TITLE}
      keywords={tags}
      locale={language[0] ? `${language[0]}_${language[0].toUpperCase()}` : 'en_US'}
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>
  <body>
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <Header />
    <main id="main-content" role="main" class="content-wrapper">
      {layoutType === 'blog' && (
        <article class="blog-post">
          <header class="article-header">
            <div class="article-meta">
              {category && category.length > 0 && (
                <div class="category-tags">
                  {category.map((cat) => (
                    <a href={`/category/${cat.toLowerCase()}`} class="category-tag">
                      {categoryEmojis[cat] || 'üìù'} {capitalize(cat)}
                    </a>
                  ))}
                </div>
              )}
              {subcategory && (
                <span class="subcategory">{subcategory}</span>
              )}
              {language && language.length > 0 && (
                <div class="language-tags">
                  {language.map((lang) => (
                    <span class="language-tag">{languageEmojis[lang] || 'üåê'} {lang.toUpperCase()}</span>
                  ))}
                </div>
              )}
            </div>
            <h1>{title}</h1>
            {description && <p class="description">{description}</p>}
            <div class="article-info">
              {pubDate && (
                <time datetime={pubDate.toISOString()} class="pub-date">
                  <FormattedDate date={pubDate} />
                </time>
              )}
              {updatedDate && (
                <time datetime={updatedDate.toISOString()} class="updated-date">
                  Updated: <FormattedDate date={updatedDate} />
                </time>
              )}
              {readingTime && (
                <span class="reading-time">{readingTime} min read</span>
              )}
            </div>
          </header>
          <section class="content">
            <slot />
          </section>
        </article>
      )}
      {layoutType === 'default' && (
        <section class="content">
          <slot />
        </section>
      )}
    </main>
    <Footer />
    <BackToTop />
    <Analytics />
  </body>
</html> 