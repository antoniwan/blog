---
import BaseLayout from './BaseLayout.astro';
import PageHeader from '../components/PageHeader.astro';
import FormattedDate from '../components/FormattedDate.astro';
import TagDisplay from '../components/TagDisplay.astro';
import Comments from '../components/Comments.astro';
import Container from '../components/Container.astro';
import DefaultImage from '../components/DefaultImage.astro';
import Breadcrumbs from '../components/Breadcrumbs.astro';
import SocialShare from '../components/SocialShare.astro';
import LanguageToggle from '../components/LanguageToggle.astro';
import { generateCanonicalUrl } from '../utils/seo';
import { giscusConfig } from '../config/giscus';
import type { BlogLayoutProps } from '../types/layout';

interface Props extends BlogLayoutProps {}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  readingTime,
  tags,
  category,
  categoryName,
  path,
  imageAlt,
  author,
  keywords,
  tableOfContents,
  showComments = true,
  translationData,
  ...rest
} = Astro.props;

// Generate canonical URL automatically
const canonical = path || generateCanonicalUrl(Astro.url.pathname);

// Extract post slug from path for read status
const postSlug = path?.replace('/p/', '').replace('/', '') || '';
---

<BaseLayout
  title={title}
  description={description}
  pubDate={pubDate}
  updatedDate={updatedDate}
  heroImage={heroImage}
  readingTime={readingTime}
  tags={tags}
  category={category}
  path={canonical}
  imageAlt={imageAlt}
  author={author}
  keywords={keywords}
  type="article"
  structuredDataType="article"
  {...rest}
>
  <Container>
    <div class="py-6 md:py-8 lg:py-12">
      {/* Breadcrumbs - Hidden on mobile, visible on desktop */}
      <div class="hidden md:block mb-6">
        <Breadcrumbs 
          items={[
            { label: 'Home', href: '/' },
            ...(categoryName && category && category.length > 0 ? [{ label: categoryName, href: `/category/${category[0]}/` }] : []),
            { label: title }
          ]}
          class="text-sm"
        />
      </div>
      
      {/* Hero Section - Full width on mobile, moves to sidebar on desktop */}
      <div class="mb-8 md:mb-12 lg:hidden">
        <PageHeader title={title} description={description} className="!mb-6" transition:name="page-title" />
      </div>
      
      {/* Main Layout: Mobile-first, then 75/25 on desktop */}
      <div class="lg:grid lg:grid-cols-4 lg:gap-8 xl:gap-12">
        {/* Sidebar - Hidden on mobile, visible on desktop */}
        <aside class="hidden lg:block lg:col-span-1">
          <div class="sticky top-8 space-y-8 pt-12">
            {/* Post Title & Description - Only shown in sidebar on desktop */}
            <div class="space-y-4">
              <h1 class="text-2xl font-bold text-[rgb(var(--color-text))] leading-tight" transition:name="page-title">
                {title}
              </h1>
              {description && (
                		<p class="text-body-muted text-base leading-relaxed">
                  {description}
                </p>
              )}
            </div>
            
            {/* Social Share - Desktop Sidebar (Moved up for immediate access) */}
            <SocialShare 
              title={title}
              description={description}
              url={canonical}
              variant="vertical"
            />
            
            {/* Post Metadata */}
            <div class="space-y-6">
              {/* Publication Date */}
              {pubDate && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Published
                  </h3>
                  <time datetime={pubDate.toISOString()} class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                    <span class="text-[rgb(var(--color-accent))]">üìÖ</span>
                    <FormattedDate date={pubDate} format="long" />
                  </time>
                </div>
              )}
              
              {/* Updated Date */}
              {updatedDate && updatedDate.getTime() !== pubDate?.getTime() && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Updated
                  </h3>
                  <time datetime={updatedDate.toISOString()} class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                    <span class="text-[rgb(var(--color-accent))]">üîÑ</span>
                    <FormattedDate date={updatedDate} format="long" />
                  </time>
                </div>
              )}
              
              {/* Read on Date - Dynamic from localStorage */}
              <div class="space-y-2" id="read-on-section" style="display: none;">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Read on
                </h3>
                <div class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                  <span class="text-[rgb(var(--color-accent))]">üëÅÔ∏è</span>
                  <time id="read-on-date" class="leading-relaxed"></time>
                </div>
              </div>
              
              {/* Reading Time */}
              {readingTime && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Reading Time
                  </h3>
                  <div class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                    <span class="text-[rgb(var(--color-accent))]">‚è±Ô∏è</span>
                    <span>{typeof readingTime === 'string' ? readingTime : `${readingTime} min read`}</span>
                  </div>
                </div>
              )}
              
              {/* Category */}
              {categoryName && category && category.length > 0 && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Category
                  </h3>
                  <div class="flex items-center gap-2 text-base leading-relaxed">
                    <span class="text-[rgb(var(--color-accent))]">üìÅ</span>
                    <a 
                      href={`/category/${category[0]}/`}
                      class="text-[rgb(var(--color-text))] hover:text-[rgb(var(--color-accent))] theme-transition"
                    >
                      {categoryName}
                    </a>
                  </div>
                </div>
              )}
              
              {/* Tags */}
              {tags && tags.length > 0 && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Tags
                  </h3>
                  <div class="flex flex-wrap gap-0.5">
                    <TagDisplay 
                      tags={tags} 
                      maxVisible={tags.length} 
                      showMoreIndicator={false}
                      compact={true}
                    />
                  </div>
                </div>
              )}
              
              {/* Author */}
              {author && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Author
                  </h3>
                  <div class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                    <span class="text-[rgb(var(--color-accent))]">‚úçÔ∏è</span>
                    <span>{author}</span>
                  </div>
                </div>
              )}
            </div>
            
            {/* Table of Contents - Only in sidebar on desktop */}
            {tableOfContents && tableOfContents.length > 0 && (
              <div class="space-y-3">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Table of Contents
                </h3>
                <nav>
                  <ul class="space-y-1">
                    {tableOfContents.map(item => (
                      <li>
                        <a 
                          href={`#${item.slug}`}
                          class={`block text-base hover:text-[rgb(var(--color-accent))] theme-transition leading-relaxed ${
                            item.level === 3 ? 'ml-3 text-sm' : ''
                          }`}
                        >
                          {item.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </div>
            )}
          </div>
        </aside>
        
        {/* Main Content Area - Full width on mobile, 75% on desktop */}
        <main class="lg:col-span-3">
          {/* Hero Image - First thing in main content */}
          <div class="mb-8 md:mb-12">
            {heroImage ? (
              <img 
                src={heroImage} 
                alt={imageAlt || title}
                class="w-full h-[450px] object-cover rounded-lg shadow-lg md:rounded-xl"
                loading="eager"
              />
            ) : (
              <DefaultImage 
                alt={imageAlt || title}
                className="w-full h-[450px] object-cover rounded-lg shadow-lg md:rounded-xl"
                loading="eager"
              />
            )}
          </div>

          {/* Language Toggle */}
          {translationData?.hasTranslations && (
            <LanguageToggle 
              translations={translationData.translations}
              currentLanguage={translationData.currentLanguage}
              currentPath={translationData.currentPath}
            />
          )}
          
          {/* Content */}
          <div class="prose prose-lg max-w-none prose-headings:scroll-mt-20" transition:name="page-content">
            <slot />
          </div>
          
          {/* Social Share - Tablet Horizontal Bar */}
          <SocialShare 
            title={title}
            description={description}
            url={canonical}
            variant="horizontal"
          />
          
          {/* Mobile-only metadata - shown after content on mobile */}
          <div class="lg:hidden space-y-6 mt-12 pt-8 border-t border-[rgb(var(--color-border))]">
            {/* Publication Date */}
            {pubDate && (
              <div class="space-y-2">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Published
                </h3>
                <time datetime={pubDate.toISOString()} class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                  <span class="text-[rgb(var(--color-accent))]">üìÖ</span>
                  <FormattedDate date={pubDate} format="long" />
                </time>
              </div>
            )}
            
            {/* Updated Date */}
            {updatedDate && updatedDate.getTime() !== pubDate?.getTime() && (
              <div class="space-y-2">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Updated
                </h3>
                <time datetime={updatedDate.toISOString()} class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                  <span class="text-[rgb(var(--color-accent))]">üîÑ</span>
                  <FormattedDate date={updatedDate} format="long" />
                </time>
              </div>
            )}
            
            {/* Read on Date - Dynamic from localStorage (Mobile) */}
            <div class="space-y-2" id="read-on-section-mobile" style="display: none;">
              <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                Read on
              </h3>
              <div class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                <span class="text-[rgb(var(--color-accent))]">üëÅÔ∏è</span>
                <time id="read-on-date-mobile" class="leading-relaxed"></time>
              </div>
            </div>
            
            {/* Reading Time */}
            {readingTime && (
              <div class="space-y-2">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Reading Time
                </h3>
                <div class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                  <span class="text-[rgb(var(--color-accent))]">‚è±Ô∏è</span>
                  <span>{typeof readingTime === 'string' ? readingTime : `${readingTime} min read`}</span>
                </div>
              </div>
            )}
            
            {/* Category */}
            {categoryName && category && category.length > 0 && (
              <div class="space-y-2">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Category
                </h3>
                <div class="flex items-center gap-2 text-base leading-relaxed">
                  <span class="text-[rgb(var(--color-accent))]">üìÅ</span>
                  <a 
                    href={`/category/${category[0]}/`}
                    class="text-[rgb(var(--color-text))] hover:text-[rgb(var(--color-accent))] theme-transition"
                  >
                    {categoryName}
                  </a>
                </div>
              </div>
            )}
            
            {/* Tags */}
            {tags && tags.length > 0 && (
              <div class="space-y-2">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Tags
                </h3>
                <div class="flex flex-wrap gap-0.5">
                  <TagDisplay 
                    tags={tags} 
                    maxVisible={tags.length} 
                    showMoreIndicator={false}
                    compact={true}
                  />
                </div>
              </div>
            )}
            
            {/* Author */}
            {author && (
              <div class="space-y-2">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Author
                </h3>
                <div class="flex items-center gap-2 text-base text-[rgb(var(--color-text))] leading-relaxed">
                  <span class="text-[rgb(var(--color-accent))]">‚úçÔ∏è</span>
                  <span>{author}</span>
                </div>
              </div>
            )}
          </div>
          
          {/* Comments */}
          {showComments && (
            <Comments 
              repo={giscusConfig.repo}
              repoId={giscusConfig.repoId}
              category={giscusConfig.category}
              categoryId={giscusConfig.categoryId}
              mapping={giscusConfig.mapping}
              strict={giscusConfig.strict}
              reactionsEnabled={giscusConfig.reactionsEnabled}
              emitMetadata={giscusConfig.emitMetadata}
              inputPosition={giscusConfig.inputPosition}
              theme={giscusConfig.theme}
              lang={giscusConfig.lang}
              loading={giscusConfig.loading}
            />
          )}
        </main>
      </div>
    </div>
  </Container>
</BaseLayout>

<script define:vars={{ postSlug }}>
	// Storage constants - using direct values since import doesn't work in Astro client scripts
	const STORAGE_KEY = 'curious-chaos-read-posts-v1.0';
	const FALLBACK_KEY = 'curious-chaos-read-posts';
	const CROSS_TAB_DELAY = 100;
	const SAME_TAB_DELAY = 50;

	// Read status display for blog posts
	class ReadStatusDisplay {
		constructor() {
			this.storageKey = STORAGE_KEY;
			this.fallbackKey = FALLBACK_KEY;
			this.boundPostReadHandler = this.handlePostRead.bind(this);
			this.boundClearedHandler = this.handleClearedPosts.bind(this);
			this.boundStorageHandler = this.handleStorageChange.bind(this);
			this.boundDataUpdatedHandler = this.handleDataUpdated.bind(this);
			this.init();
		}

			loadReadPosts() {
		try {
			const stored = localStorage.getItem(this.storageKey) || localStorage.getItem(this.fallbackKey);
			if (!stored) return [];
			
			const parsed = JSON.parse(stored);
			
			// Validate data structure
			if (!Array.isArray(parsed)) {
				console.warn('Invalid read posts format: expected array, got', typeof parsed);
				return [];
			}
			
			// Filter and validate individual items
			return parsed.filter(item => {
				if (!item || typeof item !== 'object') return false;
				
				const hasValidSlug = typeof item.postSlug === 'string' && item.postSlug.trim().length > 0;
				const hasValidDate = typeof item.readAt === 'string' && !isNaN(Date.parse(item.readAt));
				
				if (!hasValidSlug || !hasValidDate) {
					console.warn('Filtering out invalid read post item:', item);
					return false;
				}
				
				return true;
			});
		} catch (error) {
			console.warn('Failed to parse read posts:', error);
			return [];
		}
	}

		getReadData(postSlug) {
			const readData = this.loadReadPosts();
			return readData.find((data) => data.postSlug === postSlug) || null;
		}

		formatReadDate(dateString) {
			const readDate = new Date(dateString);
			const now = new Date();
			const diffInMs = now.getTime() - readDate.getTime();
			const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
			const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
			const diffInMinutes = Math.floor(diffInMs / (1000 * 60));

			if (diffInDays > 0) {
				return diffInDays === 1 ? 'Yesterday' : `${diffInDays} days ago`;
			} else if (diffInHours > 0) {
				return diffInHours === 1 ? 'An hour ago' : `${diffInHours} hours ago`;
			} else if (diffInMinutes > 0) {
				return diffInMinutes === 1 ? 'A minute ago' : `${diffInMinutes} minutes ago`;
			} else {
				return 'Just now';
			}
		}

		updateReadStatus() {
			const readData = this.getReadData(postSlug);
			
			// Desktop version
			const desktopSection = document.getElementById('read-on-section');
			const desktopDate = document.getElementById('read-on-date');
			
			// Mobile version
			const mobileSection = document.getElementById('read-on-section-mobile');
			const mobileDate = document.getElementById('read-on-date-mobile');
			
			if (readData) {
				const formattedDate = this.formatReadDate(readData.readAt);
				
				// Show desktop section
				if (desktopSection && desktopDate) {
					desktopSection.style.display = 'block';
					desktopDate.textContent = formattedDate;
					desktopDate.setAttribute('datetime', readData.readAt);
				}
				
				// Show mobile section
				if (mobileSection && mobileDate) {
					mobileSection.style.display = 'block';
					mobileDate.textContent = formattedDate;
					mobileDate.setAttribute('datetime', readData.readAt);
				}
			} else {
				// Hide sections if not read
				if (desktopSection) desktopSection.style.display = 'none';
				if (mobileSection) mobileSection.style.display = 'none';
			}
		}

		handlePostRead(event) {
			if (event.detail?.postSlug === postSlug) {
				setTimeout(() => this.updateReadStatus(), CROSS_TAB_DELAY);
			}
		}
		
		handleClearedPosts() {
			setTimeout(() => this.updateReadStatus(), CROSS_TAB_DELAY);
		}
		
		handleStorageChange(event) {
			// React to localStorage changes from other tabs/windows
			if (event.key === this.storageKey || event.key === this.fallbackKey) {
				setTimeout(() => this.updateReadStatus(), CROSS_TAB_DELAY);
			}
		}
		
		handleDataUpdated(event) {
			// React to immediate data updates from same tab
			if (event.detail?.type === 'post-read') {
				setTimeout(() => this.updateReadStatus(), SAME_TAB_DELAY);
			}
		}
		
		init() {
			// Update on page load
			this.updateReadStatus();

			// Listen for post-read events
			window.addEventListener('post-read', this.boundPostReadHandler);

			// Listen for read-posts-cleared events
			window.addEventListener('read-posts-cleared', this.boundClearedHandler);
			
			// Listen for storage events (cross-tab synchronization)
			window.addEventListener('storage', this.boundStorageHandler);
			
			// Listen for immediate data updates (same-tab reactivity)
			window.addEventListener('reading-data-updated', this.boundDataUpdatedHandler);
		}
		
		cleanup() {
			window.removeEventListener('post-read', this.boundPostReadHandler);
			window.removeEventListener('read-posts-cleared', this.boundClearedHandler);
			window.removeEventListener('storage', this.boundStorageHandler);
			window.removeEventListener('reading-data-updated', this.boundDataUpdatedHandler);
		}
	}

	// Initialize when DOM is ready
	let readStatusDisplay;
	
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => {
			readStatusDisplay = new ReadStatusDisplay();
		});
	} else {
		readStatusDisplay = new ReadStatusDisplay();
	}
	
	// Cleanup on page unload
	window.addEventListener('beforeunload', () => {
		if (readStatusDisplay) {
			readStatusDisplay.cleanup();
		}
	});
</script>
