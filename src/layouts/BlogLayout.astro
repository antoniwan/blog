---
import BaseLayout from './BaseLayout.astro';
import PageHeader from '../components/PageHeader.astro';
import FormattedDate from '../components/FormattedDate.astro';
import StructuredData from '../components/StructuredData.astro';
import { generateStructuredData } from '../utils/structuredData';
import { generateCanonicalUrl } from '../utils/seo';

interface Props {
  title: string;
  description?: string;
  pubDate?: Date;
  updatedDate?: Date;
  heroImage?: string;
  readingTime?: number;
  tags?: string[];
  category?: string[];
  // SEO fields
  path?: string;
  image?: string;
  imageAlt?: string;
  author?: string;
  keywords?: string[];
  // Structured data
  tableOfContents?: {
    items: Array<{
      text: string;
      slug: string;
      depth: number;
    }>;
  };
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  readingTime,
  tags,
  category,
  path,
  image,
  imageAlt,
  author,
  keywords,
  tableOfContents,
  ...rest
} = Astro.props;

// Generate canonical URL automatically
const canonical = path || generateCanonicalUrl(Astro.url.pathname);

// Generate structured data for blog post
const structuredData = generateStructuredData({
  title,
  description: description || '',
  path: canonical,
  type: 'blogpost',
  author,
  pubDate,
  updatedDate,
  heroImage: image || heroImage,
  keywords: keywords || [],
  readingTime
});
---

<BaseLayout
  title={title}
  description={description}
  pubDate={pubDate}
  updatedDate={updatedDate}
  heroImage={heroImage}
  readingTime={readingTime}
  tags={tags}
  category={category}
  path={canonical}
  image={image}
  imageAlt={imageAlt}
  author={author}
  keywords={keywords}
  type="article"
  {...rest}
>
  <!-- Structured Data -->
  <StructuredData data={structuredData} />
  
  <div class="w-full px-4 md:px-6 lg:px-8 xl:px-12">
    <div class="max-w-container mx-auto py-8 md:py-12 lg:py-16">
      {/* Hero Section */}
      <div class="space-y-6 mb-12">
        <PageHeader title={title} description={description} className="!mb-6" />
        
        <div class="flex flex-wrap gap-4 text-sm text-neutral-600 dark:text-neutral-400">
          {pubDate && (
            <time datetime={pubDate.toISOString()} class="flex items-center gap-2">
              <span class="text-primary-500 dark:text-primary-400">üìÖ</span>
              <FormattedDate date={pubDate} format="long" />
            </time>
          )}
          
          {readingTime && (
            <span class="flex items-center gap-2">
              <span class="text-primary-500 dark:text-primary-400">‚è±Ô∏è</span>
              {readingTime} min read
            </span>
          )}
          
          {category && category.length > 0 && (
            <span class="flex items-center gap-2">
              <span class="text-primary-500 dark:text-primary-400">üìÅ</span>
              <a 
                href={`/category/${category[0]}/`}
                class="hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
              >
                {category[0]}
              </a>
            </span>
          )}
          
          {tags && tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {tags.map(tag => (
                <a 
                  href={`/tag/${tag}/`}
                  class="inline-flex items-center px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 rounded hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                >
                  #{tag}
                </a>
              ))}
            </div>
          )}
        </div>
      </div>
      
      {/* Table of Contents */}
      {tableOfContents && tableOfContents.items.length > 0 && (
        <div class="mb-8 p-4 bg-neutral-50 dark:bg-neutral-900 rounded-lg">
          <h2 class="text-lg font-semibold mb-4">Table of Contents</h2>
          <nav>
            <ul class="space-y-2">
              {tableOfContents.items.map(item => (
                <li>
                  <a 
                    href={`#${item.slug}`}
                    class={`block hover:text-primary-500 dark:hover:text-primary-400 transition-colors ${
                      item.depth === 3 ? 'ml-4 text-sm' : ''
                    }`}
                  >
                    {item.text}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        </div>
      )}
      
      {/* Content */}
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <slot />
      </div>
    </div>
  </div>
</BaseLayout>