---
import BaseLayout from './BaseLayout.astro';
import PageHeader from '../components/PageHeader.astro';
import FormattedDate from '../components/FormattedDate.astro';
import TagDisplay from '../components/TagDisplay.astro';
import Comments from '../components/Comments.astro';
import Container from '../components/Container.astro';
import DefaultImage from '../components/DefaultImage.astro';
import { generateCanonicalUrl } from '../utils/seo';
import { giscusConfig } from '../config/giscus';
import { SEO_CONFIG } from '../consts';
import type { BlogLayoutProps } from '../types/layout';

interface Props extends BlogLayoutProps {}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  readingTime,
  tags,
  category,
  path,
  image,
  imageAlt,
  author,
  keywords,
  tableOfContents,
  showComments = true,
  ...rest
} = Astro.props;

// Generate canonical URL automatically
const canonical = path || generateCanonicalUrl(Astro.url.pathname);
---

<BaseLayout
  title={title}
  description={description}
  pubDate={pubDate}
  updatedDate={updatedDate}
  heroImage={heroImage}
  readingTime={readingTime}
  tags={tags}
  category={category}
  path={canonical}
  image={image}
  imageAlt={imageAlt}
  author={author}
  keywords={keywords}
  type="article"
  structuredDataType="blogpost"
  {...rest}
>
  <Container>
    <div class="py-6 md:py-8 lg:py-12">
      {/* Hero Section - Full width on mobile, moves to sidebar on desktop */}
      <div class="mb-8 md:mb-12 lg:hidden">
        <PageHeader title={title} description={description} className="!mb-6" transition:name="page-title" />
      </div>
      
      {/* Main Layout: Mobile-first, then 75/25 on desktop */}
      <div class="lg:grid lg:grid-cols-4 lg:gap-8 xl:gap-12">
        {/* Sidebar - Hidden on mobile, visible on desktop */}
        <aside class="hidden lg:block lg:col-span-1">
          <div class="sticky top-8 space-y-8 pt-12">
            {/* Post Title & Description - Only shown in sidebar on desktop */}
            <div class="space-y-4">
              <h1 class="text-2xl font-bold text-[rgb(var(--color-text))] leading-tight" transition:name="page-title">
                {title}
              </h1>
              {description && (
                		<p class="text-body-muted text-sm">
                  {description}
                </p>
              )}
            </div>
            
            {/* Post Metadata */}
            <div class="space-y-6">
              {/* Publication Date */}
              {pubDate && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Published
                  </h3>
                  <time datetime={pubDate.toISOString()} class="flex items-center gap-2 text-sm text-[rgb(var(--color-text))]">
                    <span class="text-[rgb(var(--color-primary))]">üìÖ</span>
                    <FormattedDate date={pubDate} format="long" />
                  </time>
                </div>
              )}
              
              {/* Updated Date */}
              {updatedDate && updatedDate.getTime() !== pubDate?.getTime() && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Updated
                  </h3>
                  <time datetime={updatedDate.toISOString()} class="flex items-center gap-2 text-sm text-[rgb(var(--color-text))]">
                    <span class="text-[rgb(var(--color-primary))]">üîÑ</span>
                    <FormattedDate date={updatedDate} format="long" />
                  </time>
                </div>
              )}
              
              {/* Reading Time */}
              {readingTime && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Reading Time
                  </h3>
                  <div class="flex items-center gap-2 text-sm text-[rgb(var(--color-text))]">
                    <span class="text-[rgb(var(--color-primary))]">‚è±Ô∏è</span>
                    <span>{readingTime} min read</span>
                  </div>
                </div>
              )}
              
              {/* Category */}
              {category && category.length > 0 && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Category
                  </h3>
                  <div class="flex items-center gap-2 text-sm">
                    <span class="text-[rgb(var(--color-primary))]">üìÅ</span>
                    <a 
                      href={`/category/${category[0]}/`}
                      class="text-[rgb(var(--color-text))] hover:text-[rgb(var(--color-primary))] theme-transition"
                    >
                      {category[0]}
                    </a>
                  </div>
                </div>
              )}
              
              {/* Tags */}
              {tags && tags.length > 0 && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Tags
                  </h3>
                  <div class="flex flex-wrap gap-1">
                    <TagDisplay 
                      tags={tags} 
                      maxVisible={tags.length} 
                      showMoreIndicator={false}
                      compact={true}
                    />
                  </div>
                </div>
              )}
              
              {/* Author */}
              {author && (
                <div class="space-y-2">
                  <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                    Author
                  </h3>
                  <div class="flex items-center gap-2 text-sm text-[rgb(var(--color-text))]">
                    <span class="text-[rgb(var(--color-primary))]">‚úçÔ∏è</span>
                    <span>{author}</span>
                  </div>
                </div>
              )}
            </div>
            
            {/* Table of Contents - Only in sidebar on desktop */}
            {tableOfContents && tableOfContents.items.length > 0 && (
              <div class="space-y-3">
                <h3 class="text-xs font-semibold text-[rgb(var(--color-text-muted))] uppercase tracking-wider">
                  Table of Contents
                </h3>
                <nav>
                  <ul class="space-y-1">
                    {tableOfContents.items.map(item => (
                      <li>
                        <a 
                          href={`#${item.slug}`}
                          class={`block text-sm hover:text-[rgb(var(--color-primary))] theme-transition ${
                            item.depth === 3 ? 'ml-3 text-xs' : ''
                          }`}
                        >
                          {item.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </div>
            )}
          </div>
        </aside>
        
        {/* Main Content Area - Full width on mobile, 75% on desktop */}
        <main class="lg:col-span-3">
          {/* Mobile-only metadata - shown above content on mobile */}
          <div class="lg:hidden space-y-4 mb-8">
            <div class="flex flex-wrap gap-4 text-sm text-[rgb(var(--color-text-muted))]">
              {pubDate && (
                <time datetime={pubDate.toISOString()} class="flex items-center gap-2">
                  <span class="text-[rgb(var(--color-primary))]">üìÖ</span>
                  <FormattedDate date={pubDate} format="long" />
                </time>
              )}
              
              {readingTime && (
                <span class="flex items-center gap-2">
                  <span class="text-[rgb(var(--color-primary))]">‚è±Ô∏è</span>
                  {readingTime} min read
                </span>
              )}
              
              {category && category.length > 0 && (
                <span class="flex items-center gap-2">
                  <span class="text-[rgb(var(--color-primary))]">üìÅ</span>
                  <a 
                    href={`/category/${category[0]}/`}
                    class="hover:text-[rgb(var(--color-primary))] theme-transition"
                  >
                    {category[0]}
                  </a>
                </span>
              )}
            </div>
            
            {tags && tags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                <TagDisplay 
                  tags={tags} 
                  maxVisible={tags.length} 
                  showMoreIndicator={false}
                  compact={false}
                />
              </div>
            )}
            
            {/* Mobile-only Table of Contents */}
            {tableOfContents && tableOfContents.items.length > 0 && (
              <div class="p-4 bg-[rgb(var(--color-bg-alt))] rounded-lg">
                <h2 class="text-lg font-semibold mb-4">Table of Contents</h2>
                <nav>
                  <ul class="space-y-2">
                    {tableOfContents.items.map(item => (
                      <li>
                        <a 
                          href={`#${item.slug}`}
                          class={`block hover:text-[rgb(var(--color-primary))] theme-transition ${
                            item.depth === 3 ? 'ml-4 text-sm' : ''
                          }`}
                        >
                          {item.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </div>
            )}
          </div>
          
          {/* Hero Image - First thing in main content */}
          <div class="mb-8 md:mb-12">
            {heroImage ? (
              <img 
                src={heroImage} 
                alt={imageAlt || title}
                class="w-full h-[450px] object-cover rounded-lg shadow-lg md:rounded-xl"
                loading="eager"
              />
            ) : (
              <DefaultImage 
                alt={imageAlt || title}
                className="w-full h-[450px] object-cover rounded-lg shadow-lg md:rounded-xl"
                loading="eager"
              />
            )}
          </div>
          
          {/* Content */}
          <div class="prose prose-lg max-w-none prose-headings:scroll-mt-20" transition:name="page-content">
            <slot />
          </div>
          
          {/* Comments Section */}
          {showComments && (
            <div class="mt-12">
              <Comments
                repo={giscusConfig.repo}
                repoId={giscusConfig.repoId}
                category={giscusConfig.category}
                categoryId={giscusConfig.categoryId}
                mapping={giscusConfig.mapping}
                strict={giscusConfig.strict}
                reactionsEnabled={giscusConfig.reactionsEnabled}
                emitMetadata={giscusConfig.emitMetadata}
                inputPosition={giscusConfig.inputPosition}
                lang={giscusConfig.lang}
                loading={giscusConfig.loading}
                theme={giscusConfig.theme}
              />
            </div>
          )}
        </main>
      </div>
    </div>
  </div>
</BaseLayout>